Перем мОчищатьДанныеНУДо2015 Экспорт;

Процедура ПроверитьПроводку(Проводка)

	СчетДт = Проводка.СчетДт;
	СчетКт = Проводка.СчетКт;
	
	РеквизитыСчетаДт     = БухгалтерскийУчетПовтИсп.РеквизитыСчета(СчетДт);
	РеквизитыСчетаКт     = БухгалтерскийУчетПовтИсп.РеквизитыСчета(СчетКт);
	
	СчетДтКоличественный                = РеквизитыСчетаДт.Количественный;
	СчетКтКоличественный                = РеквизитыСчетаКт.Количественный;
	
	СчетДтВалютный                      = РеквизитыСчетаДт.Валютный;
	СчетКтВалютный                      = РеквизитыСчетаКт.Валютный;
	
	СчетДтЗабалансовый                  = РеквизитыСчетаДт.Забалансовый;
	СчетКтЗабалансовый                  = РеквизитыСчетаКт.Забалансовый;
	
	СчетДтНалоговыйУчет                 = РеквизитыСчетаДт.НалоговыйУчет;
	СчетКтНалоговыйУчет                 = РеквизитыСчетаКт.НалоговыйУчет;
	
	СчетДтУчетПоНалоговымНазначениямНДС = РеквизитыСчетаДт.УчетПоНалоговымНазначениямНДС;
	СчетКтУчетПоНалоговымНазначениямНДС = РеквизитыСчетаКт.УчетПоНалоговымНазначениямНДС;
	
	СчетДтУчетСуммНУ                    = РеквизитыСчетаДт.УчетСуммНУ;
	СчетКтУчетСуммНУ                    = РеквизитыСчетаКт.УчетСуммНУ;
	
	// Проверим и почистим небалансовые реквизиты
	Если НЕ СчетДтКоличественный И Проводка.КоличествоДт <> 0 Тогда
	    Проводка.КоличествоДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетДтВалютный И Проводка.ВалютаДт <> Неопределено Тогда
	    Проводка.ВалютаДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетДтВалютный И Проводка.ВалютнаяСуммаДт <> 0 Тогда
	    Проводка.ВалютнаяСуммаДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКтКоличественный И Проводка.КоличествоКт <> 0 Тогда
	    Проводка.КоличествоКт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКтВалютный И Проводка.ВалютаКт <> Неопределено Тогда
	    Проводка.ВалютаКт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКтВалютный И Проводка.ВалютнаяСуммаКт <> 0 Тогда
	    Проводка.ВалютнаяСуммаКт = Неопределено;
	КонецЕсли; 

	// Проверим сочетание баланса и забаланса
	Если СчетДтЗабалансовый И НЕ СчетКтЗабалансовый Тогда
		Проводка.СчетКт          = Неопределено;
		Проводка.ВалютаКт        = Неопределено;
		Проводка.КоличествоКт    = 0;
		Проводка.ВалютнаяСуммаКт = 0;
		Проводка.СубконтоКт.Очистить();
		Проводка.НалоговоеНазначениеКт = Неопределено;
		Проводка.СуммаНУКт = 0;
	КонецЕсли; 

	Если СчетКтЗабалансовый И НЕ СчетДтЗабалансовый Тогда
		Проводка.СчетДт          = Неопределено;
		Проводка.ВалютаДт        = Неопределено;
		Проводка.КоличествоДт    = 0;
		Проводка.ВалютнаяСуммаДт = 0;
		Проводка.СубконтоДт.Очистить();
		Проводка.НалоговоеНазначениеДт = Неопределено;
		Проводка.СуммаНУДт = 0;
	КонецЕсли; 
	
	Если НЕ СчетКтНалоговыйУчет И Проводка.НалоговоеНазначениеКт <> Неопределено Тогда
	    Проводка.НалоговоеНазначениеКт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКтНалоговыйУчет И Проводка.СуммаНУКт <> 0 Тогда
	    Проводка.СуммаНУКт = 0;
	КонецЕсли; 

	Если НЕ СчетДтНалоговыйУчет И Проводка.НалоговоеНазначениеДт <> Неопределено Тогда
	    Проводка.НалоговоеНазначениеДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетДтНалоговыйУчет И Проводка.СуммаНУДт <> 0 Тогда
	    Проводка.СуммаНУДт = 0;
	КонецЕсли; 
	
	Если (мОчищатьДанныеНУДо2015 = Истина) И (Проводка.Период >= глЗначениеПеременной("ДатаНКУ2015")) Тогда
	
		Если (Проводка.НалоговоеНазначениеКт <> Неопределено) 
			И (НЕ СчетКтУчетПоНалоговымНазначениямНДС
				ИЛИ НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(Проводка.НалоговоеНазначениеКт) <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС
			) Тогда
			Если НЕ БухгалтерскийУчетПовтИсп.СчетЗатратБудущихПериодов(Проводка.СчетКт) Тогда
				Проводка.НалоговоеНазначениеКт = Неопределено;
			КонецЕсли; 
		КонецЕсли; 

		Если Проводка.СуммаНУКт <> 0 И НЕ СчетКтУчетСуммНУ Тогда
		    Проводка.СуммаНУКт = 0;
		КонецЕсли; 
		
		Если (Проводка.НалоговоеНазначениеДт <> Неопределено)
			И (НЕ СчетДтУчетПоНалоговымНазначениямНДС
				ИЛИ НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(Проводка.НалоговоеНазначениеДт) <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС
			) Тогда
			Проводка.НалоговоеНазначениеДт = Неопределено;
		КонецЕсли; 

		Если Проводка.СуммаНУДт <> 0 И НЕ СчетДтУчетСуммНУ Тогда
		    Проводка.СуммаНУДт = 0;
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьПроводку
 
Функция ПровестиПоЗатратам(Проводка, Индекс, СтруктураПараметров)
	
	Организация = Проводка.Организация;
	
	Если СтруктураПараметров.Свойство("СоответствиеИспользуемыеКлассыСчетовРасходов") = Истина Тогда
		СоответствиеИспользуемыеКлассыСчетовРасходов = СтруктураПараметров.СоответствиеИспользуемыеКлассыСчетовРасходов;
		ИспользуемыеКлассыСчетовРасходов = СоответствиеИспользуемыеКлассыСчетовРасходов[Организация];
		Если ИспользуемыеКлассыСчетовРасходов = Неопределено Тогда
			ИспользуемыеКлассыСчетовРасходов = БухгалтерскийУчетПовтИсп.ПолучитьИспользуемыеКлассыСчетовРасходов(Проводка.Период, Организация);
			СоответствиеИспользуемыеКлассыСчетовРасходов.Вставить(Организация, ИспользуемыеКлассыСчетовРасходов);
		КонецЕсли;
	Иначе	
		СтруктураПараметров.Вставить("СоответствиеИспользуемыеКлассыСчетовРасходов", Новый Соответствие);
		СоответствиеИспользуемыеКлассыСчетовРасходов = СтруктураПараметров.СоответствиеИспользуемыеКлассыСчетовРасходов;
		ИспользуемыеКлассыСчетовРасходов = БухгалтерскийУчетПовтИсп.ПолучитьИспользуемыеКлассыСчетовРасходов(Проводка.Период, Организация);
		СоответствиеИспользуемыеКлассыСчетовРасходов.Вставить(Организация, ИспользуемыеКлассыСчетовРасходов);
	КонецЕсли; 

	Если ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс9 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СоответствиеНужноДелитьПроводку") = Ложь Тогда
		СтруктураПараметров.Вставить("СоответствиеНужноДелитьПроводку", Новый Соответствие);
	КонецЕсли;
	
	СоответствиеНужноДелитьПроводку = СтруктураПараметров.СоответствиеНужноДелитьПроводку;
	
	СчетДт         = Проводка.СчетДт;
	ВидыСубконтоДт = СчетДт.ВидыСубконто;
	
	СчетКт         = Проводка.СчетКт;
	ВидыСубконтоКт = СчетКт.ВидыСубконто;
	
	Ключ = Строка(СчетДт) + "|" + Строка(СчетКт) + "|" + Строка(ИспользуемыеКлассыСчетовРасходов);
	
	// Проверим, не определяли ли мы уже для этого сочетания параметров
	СтруктураЗначение = СоответствиеНужноДелитьПроводку[Ключ];
	
	Если СтруктураЗначение = Неопределено Тогда
		
		СтруктураИзменятьДелитьПроводку = БухгалтерскийУчетПовтИсп.ОпределитьИзменятьДелитьПроводку(СчетДт, СчетКт, ИспользуемыеКлассыСчетовРасходов);
		ИзменятьПроводку = СтруктураИзменятьДелитьПроводку.ИзменятьПроводку;
		ДелитьПроводку   = СтруктураИзменятьДелитьПроводку.ДелитьПроводку;
		
		// Для того чтобы во второй раз не проверять, запишем в соответствие результат проверки
		СтруктураЗначение = Новый Структура("ИзменятьПроводку, ДелитьПроводку", ИзменятьПроводку, ДелитьПроводку);
	    СоответствиеНужноДелитьПроводку.Вставить(Ключ, СтруктураЗначение);
		
	КонецЕсли;	
	
	ИзменятьПроводку = СтруктураЗначение.ИзменятьПроводку;
	ДелитьПроводку   = СтруктураЗначение.ДелитьПроводку;
	
	Если НЕ ИзменятьПроводку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипСтатьиЗатрат = Тип("СправочникСсылка.СтатьиЗатрат");
	ЕстьСчет8Класса = Ложь;
	
	Для К = 1 По ВидыСубконтоДт.Количество() Цикл
		
		ЗначениеСубконто = Проводка.СубконтоДт[ВидыСубконтоДт[К-1].ВидСубконто];
		Если ТипЗнч(ЗначениеСубконто) = ТипСтатьиЗатрат Тогда
			
			Счет8Класса = ЗначениеСубконто.Счет8Класса;
			
			ЕстьСчет8Класса = БухгалтерскийУчетПовтИсп.ЕстьСчет8Класса(Счет8Класса, ИспользуемыеКлассыСчетовРасходов);
			Если  ЕстьСчет8Класса Тогда
				ВидыСубконтоСчет8Класса = Счет8Класса.ВидыСубконто;
			КонецЕсли;	
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
		
	Если НЕ ЕстьСчет8Класса Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДелитьПроводку Тогда
		
		// новая проводка
		НоваяПроводка = ЭтотОбъект.Вставить(Индекс);
		
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
		
		Для К = 1 По ВидыСубконтоКт.Количество() Цикл
			НоваяПроводка.СубконтоКт[ВидыСубконтоКт[К-1].ВидСубконто] = Проводка.СубконтоКт[ВидыСубконтоКт[К-1].ВидСубконто];
		КонецЦикла;
		
		НоваяПроводка.СчетДт = Счет8Класса;
		
		Для К = 1 По ВидыСубконтоСчет8Класса.Количество() Цикл
			НоваяПроводка.СубконтоДт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто] = Проводка.СубконтоДт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто];
		КонецЦикла;
		
		
		// исправим кредитовую сторону проводки
		Проводка.СчетКт             = Счет8Класса;
		Проводка.СубконтоКт.Очистить();
		Для К = 1 По ВидыСубконтоСчет8Класса.Количество() Цикл
			Проводка.СубконтоКт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто] = Проводка.СубконтоДт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто];
		КонецЦикла; 		
		Проводка.ВалютаКт        = Проводка.ВалютаДт;
		Проводка.ВалютнаяСуммаКт = Проводка.ВалютнаяСуммаДт;
		Проводка.КоличествоКт    = Проводка.КоличествоДт;
		
		Проводка.НалоговоеНазначениеКт = Проводка.НалоговоеНазначениеДт;
		Проводка.СуммаНУКт = Проводка.СуммаНУДт;
		
		// сохраним значение счета дебета в реквизите проводки
		Проводка.СчетДополнительный = СчетКт;
		
		ПроверитьПроводку(НоваяПроводка);
		ПроверитьПроводку(Проводка);
		
		Возврат Истина;
		
	Иначе
		// исправим дебетовый счет проводки
		Проводка.СчетДт = Счет8Класса;
		СоответсвиеСубконто = Новый Соответствие;
		Для К = 1 По ВидыСубконтоДт.Количество() Цикл
			СоответсвиеСубконто.Вставить(ВидыСубконтоДт[К-1].ВидСубконто, Проводка.СубконтоДт[ВидыСубконтоДт[К-1].ВидСубконто]);
		КонецЦикла; 		
		Проводка.СубконтоДт.Очистить();
		Для К = 1 По ВидыСубконтоСчет8Класса.Количество() Цикл
			Проводка.СубконтоДт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто] = СоответсвиеСубконто.Получить(ВидыСубконтоСчет8Класса[К-1].ВидСубконто);
		КонецЦикла; 		
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ПровестиПоЗатратам()

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ
// 
 
// Обработчик события "ПередЗаписью".
// Проверяет возможность изменения записей регистра.
// Проверяет заполнение корреспонденции.
// Замещает пустые значения субконто составного типа значением Неопределено.
// Замещает субконто не составного типа со значением Неопределено пустым значением своего типа.
// Делает транзитную проводку через 8-й класс счетов
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	БухгалтерскийУчет.СвернутьНаборЗаписейРегистраБухгалтерии(ЭтотОбъект);
	
	КвоПроводок    = ЭтотОбъект.Количество();
	КвоДобавленных = 0;
	
	Если КвоПроводок > 0 Тогда
	    Заголовок = СокрЛП(ЭтотОбъект.Отбор.Регистратор.Значение);
	Иначе
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	
	Для К = 1 По КвоПроводок Цикл
		
		Индекс = К - 1 + КвоДобавленных;
		Проводка = ЭтотОбъект[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Проводка.СчетДт) И НЕ БухгалтерскийУчетПовтИсп.ЗабалансовыйСчет(Проводка.СчетКт) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Проводка № "+(Проводка.НомерСтроки+1) +" <"+Проводка.Содержание+">: не заполнен счет дебета.",Отказ,Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Проводка.СчетКт) И НЕ БухгалтерскийУчетПовтИсп.ЗабалансовыйСчет(Проводка.СчетДт) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Проводка № "+(Проводка.НомерСтроки+1) +" <"+Проводка.Содержание+">: не заполнен счет кредита.",Отказ,Заголовок);
		КонецЕсли;
		
		Если ПровестиПоЗатратам(Проводка, Индекс, СтруктураПараметров) Тогда
			КвоДобавленных = КвоДобавленных + 1;
		Иначе
			ПроверитьПроводку(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	// Приведение пустых значений субконто составного типа в Неопределено
	// Приведение субконто не составного типа со значением Неопределено в пустое значение своего типа
	Для К = 1 По КвоПроводок + КвоДобавленных Цикл
		
		Индекс = К - 1;
		Проводка = ЭтотОбъект[Индекс];
		
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			ТипыСубконто = Субконто.Ключ.ТипЗначения.Типы();
			Если ТипыСубконто.Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено); 
			ИначеЕсли ТипыСубконто.Количество() = 1	И Субконто.Значение = Неопределено Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, ОбщегоНазначения.ПустоеЗначениеТипа(ТипыСубконто[0])); 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			ТипыСубконто = Субконто.Ключ.ТипЗначения.Типы();
			Если ТипыСубконто.Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, Неопределено); 
			ИначеЕсли ТипыСубконто.Количество() = 1	И Субконто.Значение = Неопределено Тогда	
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, ОбщегоНазначения.ПустоеЗначениеТипа(ТипыСубконто[0])); 
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры // ПередЗаписью

мОчищатьДанныеНУДо2015 = Истина;


