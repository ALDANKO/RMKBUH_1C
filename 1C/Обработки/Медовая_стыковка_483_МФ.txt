Перем ИспИмяФайла Экспорт; //***

Перем СведенияОПоставщике,  КодЯзыкаПечать;

Перем мНастройкаПериода;

Перем СписокПервички;

Перем СписокРеглОтчетов;

Перем мСписокВыбораСпецРежимНалогообложения; 

Перем УчетПоОбособленнымПодразделениям;

Перем мВалютаРегламентированногоУчета;

Перем КоличествоДокументов,  КоличествоДокументовСчет,  КоличествоДокументовАкт,  КоличествоДокументовНН,  КоличествоДокументовДод2,  КоличествоДокументовЗапит,  
КоличествоОтправленных, КоличествоДокументовВозвратТоваровОтПокупателя;

Перем ИмяБазы;

Перем ЮрикФизик, ЮрикФизикОтчет;

Перем СтрокаРегистрации;

Перем Н;

Перем СтрокаДокументов,  СтрокаОтчетов;

Перем ПерезаписьДокументов;

Перем МедКомпонент,  ИмяПлагина;

Перем wshShell,  WshExec; 

Перем СправочникМедок,  Справочник1С,  СправочникМедокЧитабельноеНазвание;

Перем СправочникМедокГруппа;

Перем мСписокГруппШаблоновМедок;

Перем мСписокШаблоновМедок;

Перем СуффиксДСС;

Перем СуффиксМДЗ; 

Перем ТекстОтменыДокумента;

Перем СписокДляОткрытия;

Перем ОбратитесьКРазработчику;

Перем ОтменаПередачиНН;
Перем ИННПокупателя, Покупатель, КонтрНаименование,	КонтрЕДРПОУ, КонтрИНН, КонтрАдр, КонтрТлф;
//-----------------------------------------------------------------------------------------------

Функция ПолучитьТекстОшибки( Инфо )
	Возврат "Ошибка!" + Символы.ПС + 
			"Описание='" + Инфо.Описание + "'" + Символы.ПС + 
			"ИмяМодуля='" + Инфо.ИмяМодуля + "'" + Символы.ПС + 
			"НомерСтроки=" + Инфо.НомерСтроки + Символы.ПС + 
			"ИсходнаяСтрока='" + СокрЛП(Инфо.ИсходнаяСтрока) + "'";
КонецФункции

Функция ПолучитьНомерБезНулей( Документ )
	НомерБезПрефикса  =  СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Документ));
	Если СтрДлина(НомерБезПрефикса) > 7 Тогда
		НомерБезПрефикса = Прав(НомерБезПрефикса, 7);
		Пока Лев(НомерБезПрефикса, 1) = "0" Цикл
			НомерБезПрефикса = Сред(НомерБезПрефикса, 2);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат НомерБезПрефикса;
КонецФункции

Функция ПолучитьИмяБазы()
	
	ИмяБазы=Метаданные.Имя;
	Если 	  Найти(ИмяБазы, "БухгалтерияДляУкраины")=1 Тогда ИмяБазы="БУ"
	ИначеЕсли Найти(ИмяБазы, "УправлениеПроизводственнымПредприятиемДляУкраины")=1 Тогда  ИмяБазы="УПП"
	ИначеЕсли Найти(ИмяБазы, "УправлениеТорговымПредприятиемДляУкраины")=1 Тогда ИмяБазы="УТП"
	ИначеЕсли Найти(ИмяБазы, "УправлениеТорговлейДляУкраины")=1 Тогда ИмяБазы="УТ"
	КонецЕсли;
	Возврат ИмяБазы;
	
КонецФункции

Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина)

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
		   И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
		   И (ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти))
		   И (ДокументОбъект.УчитыватьНДС)
		   И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
					И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
					И (ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя))
					И (ДокументОбъект.УчитыватьНДС)
					И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если ЕстьРеквизитДокумента("Сумма", МетаданныеДокумента) Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
				И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
				И (ЕстьРеквизитДокумента("СуммаНДС", МетаданныеДокумента))
				И (ДокументОбъект.УчитыватьНДС)
				И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

Функция ПроверитьПоИД(Статус)  
	
	Перем Стр2;  
	
	Если Статус = "0" Тогда Стр2 = НСтр("ru = 'Готовится';uk = 'Готується'");
	ИначеЕсли Статус = "1" Тогда Стр2 = НСтр("ru = 'Подписан бухгалтером';uk = 'Підписаний бухгалтером'");
	ИначеЕсли Статус = "2" Тогда Стр2 = НСтр("ru = 'Подписан директором';uk = 'Підписаний директором'");
	ИначеЕсли Статус = "3" Тогда Стр2 = НСтр("ru = 'Подписан печатью';uk = 'Підписаний печаткою'");
	ИначеЕсли Статус = "4" Тогда Стр2 = НСтр("ru = 'Отправлен';uk = 'Відправлений'");
	ИначеЕсли Статус = "6" Тогда Стр2 = НСтр("ru = 'Получено сообщение';uk = 'Отримано повідомлення'"); 
	ИначеЕсли Статус = "9" Тогда Стр2 = НСтр("ru = 'Принято';uk = 'Прийнято'"); 
	ИначеЕсли Статус = "10" Тогда Стр2 = НСтр("ru = 'Не принято';uk = 'Не прийнято'");
	ИначеЕсли Статус = "11" Тогда Стр2 = НСтр("ru = 'Ошибка отправки';uk = 'Помилка відправки'"); 
	ИначеЕсли Статус = "12" Тогда Стр2 = НСтр("ru = 'На подпись';uk = 'На підпис'");
	ИначеЕсли Статус = "13" Тогда Стр2 = НСтр("ru = 'Архив';uk = 'Архів'");
	ИначеЕсли Статус = "14" Тогда Стр2 = НСтр("ru = 'Получено';uk = 'Отримано'"); 
	ИначеЕсли Статус = "15" Тогда Стр2 = НСтр("ru = 'Импортирован';uk = 'Імпортований'");
	ИначеЕсли Статус = "16" Тогда Стр2 = НСтр("ru = 'Отклонен контрагентом';uk = 'Відхилено контрагентом'");
	ИначеЕсли Статус = "17" Тогда Стр2 = НСтр("ru = 'Подписан сотрудником';uk = 'Підписаний співробітником'"); 
	ИначеЕсли Статус = "19" Тогда Стр2 = НСтр("ru = 'Доставлено контрагенту';uk = 'Доставлено контрагенту'");	
	ИначеЕсли Статус = "20" Тогда Стр2 = НСтр("ru = 'Утвержден контрагеном';uk = 'Затверджено контрагентом'");
	ИначеЕсли Статус = "32" Тогда Стр2 = НСтр("ru = 'Доставка контрагенту невозможна';uk = 'Доставка контрагенту неможлива'");	
	КонецЕсли;  

	Возврат Стр2; 	
	
КонецФункции

Функция ПроверитьСтатусПоИД(Статус2)
	
	Перем Стр3;
	
	Если Статус2 = "1" Тогда Стр3 = НСтр("ru = 'Черновик';uk = 'Чернетка'");
	ИначеЕсли  Статус2 = "2" Тогда Стр3 = НСтр("ru = 'Правильный';uk = 'Правильний'");	
	ИначеЕсли  Статус2 = "3" Тогда Стр3 = НСтр("ru = 'Ошибочный';uk = 'Помилковий'");
	ИначеЕсли  Статус2 = "4" Тогда Стр3 = НСтр("ru = 'Импортирован';uk = 'Імпортований'");
	ИначеЕсли  Статус2 = "5" Тогда Стр3 = НСтр("ru = 'Копия';uk = 'Копія'");
	ИначеЕсли  Статус2 = "6" Тогда Стр3 = НСтр("ru = 'Отправленный';uk = 'Відправлений'");
	ИначеЕсли  Статус2 = "7" Тогда Стр3 = НСтр("ru = 'Контроль отключен';uk = 'Контроль відключений'");
	КонецЕсли;
	Возврат Стр3;	
	
КонецФункции

Функция ПроверитьМесяц(МесяцОтчета)
	
	Перем Мес; 	
	Если МесяцОтчета = "1" Тогда Мес = НСтр("ru = 'Январь';uk = 'Січень'");
	ИначеЕсли  МесяцОтчета = "2" Тогда Мес = НСтр("ru = 'Февраль';uk = 'Лютий'");	
	ИначеЕсли  МесяцОтчета = "3" Тогда Мес = НСтр("ru = 'Март';uk = 'Березень'");	
	ИначеЕсли  МесяцОтчета = "4" Тогда Мес = НСтр("ru = 'Апрель';uk = 'Квітень'");	
	ИначеЕсли  МесяцОтчета = "5" Тогда Мес = НСтр("ru = 'Май';uk = 'Травень'");	
	ИначеЕсли  МесяцОтчета = "6" Тогда Мес = НСтр("ru = 'Июнь';uk = 'Червень'");	
	ИначеЕсли  МесяцОтчета = "7" Тогда Мес = НСтр("ru = 'Июль';uk = 'Липень");	
	ИначеЕсли  МесяцОтчета = "8" Тогда Мес = НСтр("ru = 'Август';uk = 'Серпень'");	
	ИначеЕсли  МесяцОтчета = "9" Тогда Мес = НСтр("ru = 'Сентябрь';uk = 'Вересень'");	
	ИначеЕсли  МесяцОтчета = "10" Тогда Мес = НСтр("ru = 'Октябрь';uk = 'Жовтень'");	
	ИначеЕсли  МесяцОтчета = "11" Тогда Мес = НСтр("ru = 'Ноябрь';uk = 'Листопад'");	
	ИначеЕсли  МесяцОтчета = "12" Тогда Мес = НСтр("ru = 'Декабрь';uk = 'Грудень'");		
	КонецЕсли;
	Возврат Мес;	
	
КонецФункции

Функция НайтиОрганизациюПоИНН(ИННОрганизации)   
	
	Перем ОрганизацияПоКоду; 
	
	Если НЕ ИмяБазы="УТ" Тогда
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  "ВЫБРАТЬ
		|КодыОрганизацииСрезПоследних.Организация
		|ИЗ
		|РегистрСведений.КодыОрганизации.СрезПоследних(&НаДату,  ) КАК КодыОрганизацииСрезПоследних
		|ГДЕ
		|КодыОрганизацииСрезПоследних.ИНН  =  &ИНН";
		Запрос.УстановитьПараметр("НаДату",  ТекущаяДата());
		Запрос.УстановитьПараметр("ИНН",  ИННОрганизации);        
		Выборка  =  Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			// Если только код нужен,  то так должно сработать:
			КодОрганизации  =  Выборка.Организация.Код;
			// И если нужен весь объект организации,  то можно его сразу получить:
			//Организация  =  Выборка.Организация.ПолучитьОбъект();
		КонецЕсли;  
	Иначе
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|Организации.*
		|ИЗ
		|Справочник.Организации КАК Организации 
		|ГДЕ
		|Организации.ИНН  =  &ИНН"; 
		Запрос.УстановитьПараметр("ИНН",  ИННОрганизации);
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			 КодОрганизации  =  Выборка.Код;
		 КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПоКоду  =  Справочники.Организации.НайтиПоКоду(КодОрганизации);

	Возврат ОрганизацияПоКоду;
	
КонецФункции

Функция НайтиОрганизациюПоЕДРПОУ(ЕДРПОУОрганизации)   
	
	Перем ОрганизацияПоКоду; 
	
	Если НЕ ИмяБазы="УТ" Тогда
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  "ВЫБРАТЬ
		|КодыОрганизацииСрезПоследних.Организация
		|ИЗ
		|РегистрСведений.КодыОрганизации.СрезПоследних(&НаДату,  ) КАК КодыОрганизацииСрезПоследних
		|ГДЕ
		|КодыОрганизацииСрезПоследних.КодПоЕДРПОУ  =  &ЕДРПОУ"; 
		Запрос.УстановитьПараметр("НаДату",  ТекущаяДата());
		Запрос.УстановитьПараметр("ЕДРПОУ",  ЕДРПОУОрганизации);        
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Если только код нужен,  то так должно сработать:
			КодОрганизации  =  Выборка.Организация.Код;
			// И если нужен весь объект организации,  то можно его сразу получить:
			//Организация  =  Выборка.Организация.ПолучитьОбъект();
			//Иначе
			// Нету организации с кодом ЕДРПОУ
		КонецЕсли;
		
	Иначе
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|Организации.*
		|ИЗ
		|Справочник.Организации КАК Организации 
		|ГДЕ
		|Организации.КодПоЕДРПОУ  =  &ЕДРПОУ"; 
		Запрос.УстановитьПараметр("ЕДРПОУ",  ЕДРПОУОрганизации);
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КодОрганизации  =  Выборка.Код;
		КонецЕсли;
		//Запрос.УстановитьПараметр("ЕДРПОУ",  ЕДРПОУОрганизации);        
		//Выборка  =  Запрос.Выполнить().Выбрать();
		//Если Выборка.Следующий() Тогда
		//	// Если только код нужен,  то так должно сработать:
		//	КодОрганизации  =  Выборка.Код;
		//	// И если нужен весь объект организации,  то можно его сразу получить:
		//	//Организация  =  Выборка.Организация.ПолучитьОбъект();
		//	//Иначе
		//	// Нету организации с кодом ЕДРПОУ
		//КонецЕсли;   
	КонецЕсли;
	ОрганизацияПоКоду  =  Справочники.Организации.НайтиПоКоду(КодОрганизации); 
	Возврат ОрганизацияПоКоду;
	
КонецФункции

Функция СоздатьНовыйДоговор(Контрагент,  Организация,  ДатаДог,  НомерДог)
	
	ОтборДоговоров  =  Новый Структура();
	ОтборДоговоров.Вставить("Дата",  ДатаДог);
	
	ВыборкаДоговоров  =  Справочники.ДоговорыКонтрагентов.Выбрать(, Контрагент,  ОтборДоговоров);
	Пока ВыборкаДоговоров.Следующий() Цикл
		Если ВыборкаДоговоров.Организация  =  Организация и ВыборкаДоговоров.Номер  =  НомерДог Тогда
			Возврат ВыборкаДоговоров.Ссылка;
		КонецЕсли;   
	КонецЦикла;     
	
	НайденныйДоговорОбъект  =  Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НайденныйДоговорОбъект.Наименование           =  НСтр("ru = '№" + НомерДог + " от "+ Формат(ДатаДог,  "ДФ = dd.MM.yyyy") + "';uk = '№" + НомерДог + " від "+ Формат(ДатаДог,  "ДФ = dd.MM.yyyy") + "'", Локализация.КодЯзыкаИнформационнойБазы());
	НайденныйДоговорОбъект.Дата                   =  ДатаДог;
	НайденныйДоговорОбъект.Номер                  =  НомерДог;
	НайденныйДоговорОбъект.ВедениеВзаиморасчетов  =  Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	НайденныйДоговорОбъект.ВалютаВзаиморасчетов   =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "ОсновнаяВалютаВзаиморасчетов");
	
	Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
		НайденныйДоговорОбъект.ВалютаВзаиморасчетов  =  Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	НайденныйДоговорОбъект.Организация   =  Организация;
	
	НайденныйДоговорОбъект.Владелец     =  Контрагент;
	НайденныйДоговорОбъект.ВидДоговора  =  Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	
	НайденныйДоговорОбъект.СхемаНалоговогоУчета        =  Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
	НайденныйДоговорОбъект.СхемаНалоговогоУчетаПоТаре  =  Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
	//Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" Тогда	
	//НайденныйДоговорОбъект.СложныйНалоговыйУчет         =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "ОсновноеЗначениеСложныйНалоговыйУчет");
	//КонецЕсли;

	Если ИмяБазы = "БУ" Тогда
		НайденныйДоговорОбъект.СложныйНалоговыйУчет         =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "ОсновноеЗначениеСложныйНалоговыйУчет");
		Если НайденныйДоговорОбъект.СложныйНалоговыйУчет  Тогда
			НайденныйДоговорОбъект.ВедениеВзаиморасчетовНУ  =  Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		Иначе
			НайденныйДоговорОбъект.ВедениеВзаиморасчетовНУ  =  НайденныйДоговорОбъект.ВедениеВзаиморасчетов;
		КонецЕсли;
		//ИначеЕсли ИмяБазы = "УправлениеТорговымПредприятиемДляУкраины" Тогда
	Иначе
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов  =  НайденныйДоговорОбъект.ВедениеВзаиморасчетов;  
	КонецЕсли;  			
	
	ОшибкаПриЗаписиДоговора  =  Ложь;
	
	Если ИмяБазы = "БУ" Тогда
		НайденныйДоговорОбъект.ПроверитьПередЗаписью(ОшибкаПриЗаписиДоговора,  Ложь);
	Иначе
			НайденныйДоговорОбъект.ПроверитьЗаполнение(ОшибкаПриЗаписиДоговора,  Ложь);
		ОшибкаПриЗаписиДоговора  =  Истина;
	КонецЕсли;
	
	Если ОшибкаПриЗаписиДоговора тогда
		Сообщить("Не удалось записать основной договор контрагента.");
		Возврат Неопределено;
	Иначе
		НайденныйДоговорОбъект.Записать();
	КонецЕсли;
	
	НайденныйДоговор  =  НайденныйДоговорОбъект.Ссылка;  	
	
	Возврат НайденныйДоговор;
	
	
КонецФункции

Функция ПолучитьИлиСоздатьДокумент(Синоним,  ДатаДок,  НомерДокумента)
	
	Если Синоним  =  "Счет на оплату покупателю" Тогда
		ОтборДокументов  =  новый Структура();
		ОтборДокументов.Вставить("Дата",  ДатаДок);
		ВыборкаДокументов  =  Документы.СчетНаОплатуПокупателю.Выбрать(, , ОтборДокументов);
		НайденныйДокумент  =  Неопределено;
		Пока ВыборкаДокументов.Следующий() Цикл
			Если ВыборкаДокументов.Номер  =   НомерДокумента Тогда
				НайденныйДокумент  =  ВыборкаДокументов.Ссылка;
				Возврат НайденныйДокумент;
			КонецЕсли;
		КонецЦикла;
		// а далее процедура создания нового документа "Счет на оплату покупателя" с ДатаДок,  НомерДокумента
		
		//ИначеЕсли ТипДокумента  =  "Поступление товаров и услуг" Тогда

	КонецЕсли;
КонецФункции

Функция ОпределитьТипРНН(PDate, ТипРННвОтчете)
	
	Перем ТипРНН;
	
	Если PDate<Дата(2011, 01, 01) Тогда
		Если ТипРННвОтчете="заг" Тогда ТипРНН="0";
		ИначеЕсли ТипРННвОтчете="спец" Тогда ТипРНН="1";		
		ИначеЕсли ТипРННвОтчете="сг" Тогда ТипРНН="2";		
		ИначеЕсли ТипРННвОтчете="перер" Тогда ТипРНН="4";
		КонецЕсли;
	ИначеЕсли PDate>=Дата(2011, 01, 01) и PDate<Дата(2013, 03, 01) Тогда
		Если ТипРННвОтчете="заг" Тогда ТипРНН="9";
		ИначеЕсли ТипРННвОтчете="спец" Тогда ТипРНН="10";		
		ИначеЕсли ТипРННвОтчете="сг" Тогда ТипРНН="11";		
		ИначеЕсли ТипРННвОтчете="перер" Тогда ТипРНН="12";
		КонецЕсли;
	ИначеЕсли PDate>=Дата(2013, 03, 01) Тогда
		Если ТипРННвОтчете="заг" Тогда ТипРНН="14";
		ИначеЕсли ТипРННвОтчете="спец" Тогда ТипРНН="15";		
		ИначеЕсли ТипРННвОтчете="сг" Тогда ТипРНН="16";		
		ИначеЕсли ТипРННвОтчете="перер" Тогда ТипРНН="17";
		КонецЕсли;
	КонецЕсли;	
	Возврат ТипРНН;
	
КонецФункции

Функция ОпределитьКодБланка(СравнимДату, ТипРННвОтчете, ЮрикФизикОтчет)
	
	Перем КодБланка;
	
	Если СравнимДату<Дата(2011, 01, 01) Тогда
		Если ЮрикФизикОтчет="Юрик" Тогда
			Если ТипРННвОтчете="заг" Тогда        КодБланка="J1201504";
			ИначеЕсли ТипРННвОтчете="спец" Тогда  КодБланка="J1209003";		
			ИначеЕсли ТипРННвОтчете="сг" Тогда    КодБланка="J1209404";		
			ИначеЕсли ТипРННвОтчете="перер" Тогда КодБланка="J1200804";
			КонецЕсли;
		Иначе
			КодБланка="F1201504";
		КонецЕсли;
	ИначеЕсли СравнимДату>=Дата(2011, 01, 01) и СравнимДату<Дата(2013, 03, 01) Тогда
		Если ЮрикФизикОтчет="Юрик" Тогда 			
			Если ТипРННвОтчете="заг" Тогда        КодБланка="J1201505";
			ИначеЕсли ТипРННвОтчете="спец" Тогда  КодБланка="J1209005";		
			ИначеЕсли ТипРННвОтчете="сг" Тогда    КодБланка="J1209405";		
			ИначеЕсли ТипРННвОтчете="перер" Тогда КодБланка="J1200805";
			КонецЕсли;
		Иначе
			КодБланка="F1201505";
		КонецЕсли;    		
	ИначеЕсли СравнимДату>=Дата(2013, 03, 01) Тогда
		Если ЮрикФизикОтчет="Юрик" Тогда 
			Если ТипРННвОтчете="заг" Тогда        КодБланка="J1201506";
			ИначеЕсли ТипРННвОтчете="спец" Тогда  КодБланка="J1209006";		
			ИначеЕсли ТипРННвОтчете="сг" Тогда    КодБланка="J1209406";		
			ИначеЕсли ТипРННвОтчете="перер" Тогда КодБланка="J1200806";
			КонецЕсли;
		Иначе
			КодБланка="F1201506";
		КонецЕсли; 		
	КонецЕсли;	
	
	Возврат КодБланка;
	
КонецФункции
//-----------------------------------------------------------------------------------------------
Функция ПроверитьСуществованиеДокумента(Документ,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх)
	
	Запрос  =  Новый Запрос();  	
	Запрос.Текст  =  "ВЫБРАТЬ
	|	 "+Документ+".Ссылка
	|ИЗ
	|	Документ."+Документ+" КАК "+Документ+"
	|ГДЕ
	|	"+Документ+".Организация  =  &Организация
	|	И "+Документ+".Контрагент  =  &Контрагент
	|   И "+Документ+".ДатаВходящегоДокумента  =  &ДатаВходящегоДокумента
	|	И "+Документ+".НомерВходящегоДокумента  =  &НомерВходящегоДокумента";
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Контрагент",  Покупатель);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  ДатаДокаВх);  
	Запрос.УстановитьПараметр("НомерВходящегоДокумента",  НомерДокаВх);  	
	Выборка  =  Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьКодПериода(Документ)
	
	Перем КодПериода;
	Если      Месяц(Документ.Дата) = 3 Тогда
		КодПериода = 10
	ИначеЕсли Месяц(Документ.Дата) = 6 Тогда
		КодПериода = 20
	ИначеЕсли Месяц(Документ.Дата) = 9 Тогда
		КодПериода = 25
	ИначеЕсли Месяц(Документ.Дата)= 12 Тогда 
		КодПериода = 30
	Иначе
		КодПериода = 0
	КонецЕсли;  		
	Возврат КодПериода;
	
КонецФункции

Функция ПолучитьНовыйИД(пGUID,  ДатаДляНовогоИД,  НомерДляНовогоИД,  ИмяСхемы,  КодКонтрагентаДляНовогоИД)
	
	Перем НовыйИД;  	
	
	Если пGUID = "00000000-0000-0000-0000-000000000000" Тогда
		//идентификатора нет. Документ, сформирован (Р)уками, а не из обработки
		//(созданных вручную или импортированных в ХМЛ) 
		НовыйИД = Строка("MR" + ДатаДляНовогоИД + НомерДляНовогоИД + ИмяСхемы + КодКонтрагентаДляНовогоИД);  
	Иначе
		//если ИД известен, значит использовалось (А)втоматическое формирование накладной СОМ-объектами 
		НовыйИД = Строка("MA" + пGUID); 
	КонецЕсли;
	
	Возврат НовыйИД; 
	
КонецФункции

Функция ПолучитьСхемуНалогообложения(ДатаДокумента)
	
	Попытка
		Структура = Новый Структура; 
		Структура.Вставить("Организация", Организация);
		Если ИмяБазы="БУ" ИЛИ ИмяБазы="УПП" Тогда
			Возврат РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьПоследнее(ДатаДокумента,Структура).ИнформацияОСтатусеПлательщикаНалогов; 
		ИначеЕсли  ИмяБазы="УТП" Тогда
			Возврат РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДатаДокумента,Структура).ИнформацияОСтатусеПлательщикаНалогов;
		ИначеЕсли ИмяБазы="УТ" Тогда
			Возврат "";
		КонецЕсли;
	Исключение 		
	КонецПопытки;   
	
КонецФункции

Функция ПолучитьВерсиюСТочкой(версия)
	констДлина = 7;
	новаястр = СтрЗаменить(Строка(версия), Символы.НПП, "");
	
	Пока СтрДлина(новаястр) < констДлина Цикл
		новаястр = "0" + новаястр;
	КонецЦикла;
	
	новаястр = Лев(новаястр,2) + "." + Сред(новаястр,3,2) + "." + Прав(новаястр,3);
	возврат новаястр;
Конецфункции
//----------------------------------------------------------------------------------------------- 
Функция ПроверкаВерсииМедка(ВерсияМедка)	
	Если  ВерсияМедка < ЭлементыФормы.НастройкаКонтрольВерсииМедка.Значение Тогда
		ВерсияМедкаЧитабельная = ПолучитьВерсиюСТочкой( ВерсияМедка );
		ВерсияМедкаMin = ПолучитьВерсиюСТочкой(ЭлементыФормы.НастройкаКонтрольВерсииМедка.Значение);
		Предупреждение(НСтр("ru = 'Для корректной работы необходима версия не ниже ';uk = 'Для коректної роботи необхідна версія не нижче 10.00.'")+ ВерсияМедкаMin + 
		Символы.ПС + НСтр("ru = 'У Вас установлена версия ';uk = 'У Вас встановлено версію '") + ВерсияМедкаЧитабельная + Символы.ПС + 
		НСтр("ru = 'Обновите программу!';uk = 'Оновіть програму!'"));         		
		Возврат ложь;
	КонецЕсли;
	Возврат истина;
Конецфункции

Процедура ПроверитьПараметры()
	
	Если (ЭлементыФормы.НадписьПараметры.Значение) Тогда
		ЭлементыФормы.ПараметрыПредприятияПоле.Доступность = Истина;
		ЭлементыФормы.ПараметрыФилиалПоле.Доступность = Истина;
		ЭлементыФормы.ПараметрыЛогинПоле.Доступность = Истина;
		ЭлементыФормы.ПараметрыПарольПоле.Доступность = Истина;
	Иначе
		ЭлементыФормы.ПараметрыПредприятияПоле.Доступность = Ложь;
		ЭлементыФормы.ПараметрыФилиалПоле.Доступность = Ложь;
		ЭлементыФормы.ПараметрыЛогинПоле.Доступность = Ложь;
		ЭлементыФормы.ПараметрыПарольПоле.Доступность = Ложь;
	КонецЕсли;  
	
КонецПроцедуры

Процедура Подключение1СМедок()
	
	Если НЕ МедКомпонент  =  Неопределено Тогда
		МедКомпонент.CloseAddin();
	КонецЕсли;
	
	Попытка 		
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
		ИмяПлагина =  ЭлементыФормы.ПутьКФайлуМедка.Значение + "\medoc1c.dll"; 
		ЗагрузитьВнешнююКомпоненту(ИмяПлагина); 
		МедКомпонент  =  Новый("AddIn.Medoc1C");
		МедКомпонент.SetConnectionInfo(СтрокаСоединенияИнформационнойБазы()); 
		ЭлементыФормы.ЭДОВозможен.Видимость =  Истина;
		ЭлементыФормы.ЭДОНевозможен.Видимость =  Ложь;
		ОтключитьОбработчикОжидания("Подключение1СМедок");
		ПроверитьНаличиеПервички();
		ПроверитьНаличиеОтчетов(СуффиксДСС,  СуффиксМДЗ);
	Исключение
		Возврат;
	КонецПопытки; 
	
КонецПроцедуры

Процедура ВРазработке()
	
	Предупреждение(Нстр("ru = 'В разработке.';uk = 'На доопрацюванні.'"));
	Возврат;
	
КонецПроцедуры

Процедура ВыборЯрлыка()
	
	Если ЭлементыФормы.ЗапЛок.Значение = 1 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\ezvit.exe";	
	ИначеЕсли ЭлементыФормы.ЗапЛок.Значение = 2 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\ezvitnet.exe";	
	ИначеЕсли ЭлементыФормы.ЗапЛок.Значение = 3 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\station.exe";
	Иначе
		ЭлементыФормы.НадписьЯрлык.Заголовок = "";
	КонецЕсли;          
	
КонецПроцедуры   

Процедура ВыборСправочникаКлюч()
	
	Если ЭлементыФормы.ПСпрКонтрагентов.Значение  =  4 Тогда  		
		ЭлементыФормы.КлючСправочника.Значение  = "";
		ЭлементыФормы.КолвоСпр1С.Значение = 0;
		ЭлементыФормы.КолвоСпрМедок.Значение = 0;
		ЭлементыФормы.КолвоРазница.Значение = 0;
		
	ИначеЕсли ЭлементыФормы.ПСпрКонтрагентов.Значение  =  1 Тогда  		
		ЭлементыФормы.КлючСправочника.Значение  = "ЄДРПОУ";
		СправочникМедокЧитабельноеНазвание = НСтр("ru = 'Контрагентов';uk = 'Контрагентів'");
	ИначеЕсли ЭлементыФормы.ПСпрКонтрагентов.Значение  =  2 Тогда
		ЭлементыФормы.КлючСправочника.Значение  = "Артикул"; 
		СправочникМедокЧитабельноеНазвание = НСтр("ru = 'Номенклатуры';uk = 'Номенклутур'");
	ИначеЕсли ЭлементыФормы.ПСпрКонтрагентов.Значение  =  3 Тогда
		ЭлементыФормы.КлючСправочника.Значение  = "ІПН";  
		СправочникМедокЧитабельноеНазвание = НСтр("ru = 'Сотрудников';uk = 'Співробітників'");
	КонецЕсли;  
	
КонецПроцедуры

Процедура СравнитьСправочники(СправочникМедок,  СправочникМедокГруппа,  Справочник1С)
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  "ВЫБРАТЬ
	|    "+Справочник1С+".Ссылка, 
	|    "+Справочник1С+".Код
	|ИЗ
	|    Справочник."+Справочник1С+" КАК "+Справочник1С+"
	| ";
	Выборка  =  Запрос.Выполнить().Выбрать(); 
	КолвоСпр1С = Выборка.Количество();
	//-------------------------------------------------------------------------- 	
	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		КодПредприятяВБазе = App.SeekOrg(КодПоЕДРПОУСпр,  пФилСпр);
		Счетчик = 0; 
		ГруппыСправочников  =  Новый СписокЗначений();  
	Исключение
		ПрефиксТекст= НСтр("ru = 'Невозможно сравнить справочники';uk = 'Неможливо порівняти довідники'");
		ЗапускМедка(ПрефиксТекст); 		
		Возврат;
	КонецПопытки;
	//----------------------------------------------------------------------------		
	Если Справочник1С = "Номенклатура" Тогда
		DictGRP  =  App.GetDictionary(); 
		tablGRP  =  DictGRP.Open(СправочникМедокГруппа);
		tablGRP.First();
		Пока НЕ tablGRP.EOF Цикл 
			ЕСЛИ tablGRP.Fields.Item("IDORG").Value  =  КодПредприятяВБазе ТОГДА      
				КодГруппы  =  tablGRP.Fields.Item("CODE").Value;
				ГруппыСправочников.Добавить(СокрЛП(КодГруппы));							
			КонецЕсли; 
			tablGRP.Next();
		КонецЦикла;
		
		Dict  =  App.GetDictionary(); 
		tabl  =  Dict.Open(СправочникМедок); 
		Для Сч  =  0 По ГруппыСправочников.Количество() - 1 Цикл
			ГруппаСпр = ГруппыСправочников.Получить(Сч);
			tabl.First(); 
			Пока НЕ tabl.EOF Цикл 
				ЕСЛИ СокрЛП(tabl.Fields.Item("GRP").Value)  =  СокрЛП(ГруппаСпр) Тогда
					Счетчик = Счетчик +1;
				КонецЕсли;	
				tabl.Next(); 
			КонецЦикла;   
		КонецЦикла;
		//---------------------------------------------------------------------------------------------
	ИначеЕсли Справочник1С = "Контрагенты" Тогда
		DictGRP  =  App.GetDictionary(); 
		tablGRP  =  DictGRP.Open(СправочникМедокГруппа);
		tablGRP.First();
		Пока НЕ tablGRP.EOF Цикл 
			ЕСЛИ tablGRP.Fields.Item("IDORG").Value  =  КодПредприятяВБазе ТОГДА      
				КодГруппы  =  tablGRP.Fields.Item("CODE").Value;
				ГруппыСправочников.Добавить(СокрЛП(КодГруппы));							
			КонецЕсли; 
			tablGRP.Next();
		КонецЦикла;
		
		Dict  =  App.GetDictionary(); 
		tabl  =  Dict.Open(СправочникМедок); 
		Для Сч  =  0 По ГруппыСправочников.Количество() - 1 Цикл
			ГруппаСпр = ГруппыСправочников.Получить(Сч);
			tabl.First(); 
			Пока НЕ tabl.EOF Цикл 
				ЕСЛИ СокрЛП(tabl.Fields.Item("IDPARTNERGRP").Value)  =  СокрЛП(ГруппаСпр) Тогда
					Счетчик = Счетчик +1;
				КонецЕсли;	
				tabl.Next(); 
			КонецЦикла;   
		КонецЦикла;
		//------------------------------------------------------------------------------------------------
	ИначеЕсли Справочник1С = "СотрудникиОрганизаций" Тогда
		DictGRP  =  App.GetDictionary(); 
		tablGRP  =  DictGRP.Open(СправочникМедок);
		tablGRP.First();
		Пока НЕ tablGRP.EOF Цикл 
			ЕСЛИ tablGRP.Fields.Item("IDORG").Value  =  КодПредприятяВБазе ТОГДА      
				Счетчик = Счетчик +1;
			КонецЕсли; 
			tablGRP.Next();
		КонецЦикла;
		//------------------------------------------------------------------------------------------------
	Иначе
		Возврат;
	КонецЕсли;
	КолвоСпрМедок  =  Счетчик;
	КолвоРазница =  КолвоСпр1С - КолвоСпрМедок;
	
КонецПроцедуры

Процедура ЗапускМедка(ПрефиксТекст)
	
	Если WshExec  =  Неопределено или (WshExec <> Неопределено и WshExec.Status  =  1) Тогда
		Режим  =  РежимДиалогаВопрос.ДаНет;
		Ответ  =  Вопрос(ПрефиксТекст + НСтр("ru  =  ' - M.E.Doc IS не запущен.'; uk  =  ' - M.E.Doc IS не запущено.'") + Символы.ПС + Символы.ПС + НСтр("ru  =  'Запустить его на основании настроек?'; uk  =  'Запустити його за налаштуванями? '") + Символы.ПС + ПутьКФайлуМедка + ЭлементыФормы.НадписьЯрлык.Заголовок,  Режим,  0);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда
			ПриНажатииНажатие(ПутьКФайлуМедка);
			ПодключитьОбработчикОжидания("Подключение1СМедок", 1, Ложь);
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры
//-----------------------------------------------------------------------------------------------
Процедура ЗаписатьЭлемент(ОбъектXML,  ИмяЭлемента,  Текст)
	
	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ОбъектXML.ЗаписатьТекст(Текст);
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	

Процедура ВыборПериодаОтбораПервичкиДефолтные()
	
	Если ПерСохраненнный = 1 Тогда   		
		НачПериода		 =  ВосстановитьЗначение("НачПериода");
		КонПериода		 =  ВосстановитьЗначение("КонПериода"); 
	ИначеЕсли ПерСохраненнный = 2 Тогда 
		ЭлементыФормы.НачПериода.Значение = Дата(Год(ТекущаяДата()), 01, 01);
		ЭлементыФормы.КонПериода.Значение = Дата(Текущаядата());   
	ИначеЕсли ПерСохраненнный = 3 Тогда
		ЭлементыФормы.НачПериода.Значение = Дата(Год(ТекущаяДата()), Месяц(ТекущаяДата()), 01);
		ЭлементыФормы.КонПериода.Значение = Дата(ТекущаяДата());
	ИначеЕсли ПерСохраненнный = 4 Тогда
		ЭлементыФормы.НачПериода.Значение = Дата(НачалоНедели(ТекущаяДата()));
		ЭлементыФормы.КонПериода.Значение = Дата(ТекущаяДата()); 		
	ИначеЕсли ПерСохраненнный = 5 Тогда
		ЭлементыФормы.НачПериода.Значение = Дата(ТекущаяДата());
		ЭлементыФормы.КонПериода.Значение = Дата(ТекущаяДата()); 		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСтатусов(App, Документ, ИД)
	
	СтатусТекст  =  ПроверитьПоИД(Строка(App.GetSendSTTByExDocID(ИД))); 	
	СтатусТекст2  =  ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД)));
	НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ, "Документ");    				
	НайденнаяСтрока.Статус = Формат(Строка(СтатусТекст + ",  " + СтатусТекст2));
	
КонецПроцедуры

Процедура ПроверитьНаличиеОтчетов(СуффиксДСС,  СуффиксМДЗ)
	
	Если НЕ ВсегоЧислоОтч=0 Тогда
		Попытка 
			App  =  Новый COMОбъект("MEDOC.ZApplication"); 
			Для Каждого СтрокаДокумент из ТаблицаОтчетов Цикл
				ДокументОтчет  =  СтрокаДокумент.ДокументОтчет; 
				
				ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()) + СуффиксДСС);
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда 
					СтатусТекст  =  СокрЛП(ПроверитьПоИД(Строка(App.GetSendSTTByExDocID(ИД)))); 	
					СтатусТекст2  =  СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет,  "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаДСС = Формат(Строка(СтатусТекст + ",  " + СтатусТекст2)); 
				Иначе 
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет,  "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаДСС = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc IS';uk = 'Документ не передавався в M.E.Doc IS'")); 					
				КонецЕсли; 			
				
				ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()) + СуффиксМДЗ);
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда 
					СтатусТекстМДЗ  =  СокрЛП(ПроверитьПоИД(Строка(App.GetSendSTTByExDocID(ИД)))); 	
					СтатусТекстМДЗ2  =  СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет, "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаМДЗ = Формат(Строка(СтатусТекстМДЗ + ",  " + СтатусТекстМДЗ2)); 
				Иначе 
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет,  "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаМДЗ = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc IS';uk = 'Документ не передавався в M.E.Doc IS'")); 					
				КонецЕсли;
			КонецЦикла;	
		Исключение  		
			Возврат; 
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

Процедура Доступнось_ДСС_НАЛ()
	
	Если 
		ЭлементыФормы.ТипДокОтчета.Значение  =  "РегламентированныйОтчетОСуммахДебиторскойИКредиторскойЗадолженности" ИЛИ 
		ЭлементыФормы.ТипДокОтчета.Значение  =  "РегламентированныйОтчетПоТруду" 
		Тогда	
		ЭлементыФормы.ОтчНал.Значение = Ложь;
		ЭлементыФормы.ОтчНал.Видимость = Ложь;
		ЭлементыФормы.ОтчСтат.Значение = Истина;
		ЭлементыФормы.ОтчСтат.Видимость = Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаМДЗ.Видимость= Ложь;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДСС.Видимость= Истина;
	ИначеЕсли 
		ЭлементыФормы.ТипДокОтчета.Значение  =  "РегламентированныйОтчетРеестрНалоговыхНакладных" 
		Тогда   
		ЭлементыФормы.ОтчНал.Значение = Истина;
		ЭлементыФормы.ОтчНал.Видимость = Истина;
		ЭлементыФормы.ОтчСтат.Значение = Ложь;
		ЭлементыФормы.ОтчСтат.Видимость = Ложь;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаМДЗ.Видимость= Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДСС.Видимость= Ложь;
	ИначеЕсли
		ЭлементыФормы.ТипДокОтчета.Значение  =  "сепаратор" 
		Тогда
		ЭлементыФормы.ОтчНал.Значение = Ложь;
		ЭлементыФормы.ОтчНал.Видимость = Ложь;
		ЭлементыФормы.ОтчСтат.Значение = Ложь;
		ЭлементыФормы.ОтчСтат.Видимость = Ложь;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаМДЗ.Видимость= Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДСС.Видимость= Истина; 
	Иначе
		ЭлементыФормы.ОтчНал.Значение = Истина;
		ЭлементыФормы.ОтчНал.Видимость = Истина;
		ЭлементыФормы.ОтчСтат.Значение = Истина;
		ЭлементыФормы.ОтчСтат.Видимость = Истина; 
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаМДЗ.Видимость= Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДСС.Видимость= Истина; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументСуществует(ДокументНазвание,  ДатаДокаВх,  НомерДокаВх);
	
	ТекстОтменыДокумента  =  ДокументНазвание + НомерДокаВх + " від " +  Формат(ДатаДокаВх,  "ДЛФ = Д") + " вже існує в 1С!";
	МедКомпонент.CancelDoc(ТекстОтменыДокумента); 
	
КонецПроцедуры

//-----------------------------------------------------------------------------------------------
Процедура Формирование_ВозвратТоваровПоставщику(App,  pd,  orgId,  Документ,  Бланк,  ИД)
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Doc.DisableScripts();
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
	    ДатаДокумента =Документ.Дата;  
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  ТекущаяДата(), , , КодЯзыкаПечать);
		
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(СведенияОПокупателе.НомерСчета);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(СведенияОПокупателе.МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПокупателе.Телефоны);
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО); 
		КонецЕсли;      

		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_TEL_FIZ_K").Value  =  СокрЛП(СведенияОПоставщике.Телефоны);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
	    rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
		rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");	
		
		rsMain.Fields.Item("SUMPDV").Value = Документ.Товары.Итог("СуммаНДС"); 
		rsMain.Fields.Item("DOCSUM").Value = Документ.СуммаДокумента;
		rsMain.Fields.Item("SUMPDV_TEXT").Value = Документ.Товары.Итог("СуммаНДС");
		rsMain.Fields.Item("DOCSUM_TEXT").Value = Документ.СуммаДокумента;
		rsMain.Fields.Item("OTRUMAV_FIO").Value = Документ.Получил;
		rsMain.Fields.Item("DOV_SERIA").Value = Документ.ДоверенностьСерия;
		rsMain.Fields.Item("DOV_NOMER").Value = Документ.ДоверенностьНомер;
		rsMain.Fields.Item("DOV_DATA").Value = Формат(Документ.ДоверенностьДата, "ДЛФ = Д");

				
		Если ИмяБазы = "УПП" Тогда
			rsMain.Fields.Item("VO_NAME").Value = "";
		Иначе 
			rsMain.Fields.Item("VO_NAME").Value = СокрЛП(Документ.Ответственный);
		КонецЕсли;

		
		Если ЗначениеЗаполнено(Документ.Склад) Тогда   
			rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(Документ.Склад);
		КонецЕсли;
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК Наименование, 
		|	ВЫБОР
		|		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА ВозвратТоваровПоставщикуТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА ВозвратТоваровПоставщику.Цена / 1.2
		|					ТОГДА ВозвратТоваровПоставщикуТовары.Цена 
		|				ИНАЧЕ ВозвратТоваровПоставщикуТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена, 
		|	ВозвратТоваровПоставщикуТовары.Количество, 
		|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
		|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК Единица, 
		|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаБезСкидки
		//|	ВозвратТоваровПоставщикуТовары.СуммаСкидки КАК Скидка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка = &Документ ";

		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);			
		Результат  =  Запрос.Выполнить();
		Контр  =  0;
		Н  =  Результат.Выгрузить().Количество(); 		
		rsMain.Fields.Item("KVO").Value = Н;
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_MOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_MOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);				   
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
			//rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
				
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;  
	КонецПопытки;  
		 	
КонецПроцедуры

Процедура Формирование_ВозвратТоваровОтПокупателя(App,  pd,  orgId,  Документ,  Бланк,  ИД)
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Doc.DisableScripts();
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
	    ДатаДокумента =Документ.Дата;
		
		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  ТекущаяДата(), , , КодЯзыкаПечать);
		//Если ТипЗнч(Документ.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		//	Банк		= Документ.СтруктурнаяЕдиница.Банк;
		//	МФО	 		= Банк.Код;
		//	НомерСчета 	= Документ.СтруктурнаяЕдиница.НомерСчета;
		//Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		//КонецЕсли;
		
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		КонецЕсли;      

		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_TEL_FIZ_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
	    rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
			
		rsMain.Fields.Item("SUMPDV").Value = Документ.Товары.Итог("СуммаНДС"); 
		rsMain.Fields.Item("DOCSUM").Value = Документ.СуммаДокумента;
		rsMain.Fields.Item("SUMPDV_TEXT").Value = Документ.Товары.Итог("СуммаНДС");
		rsMain.Fields.Item("DOCSUM_TEXT").Value = Документ.СуммаДокумента;
		//rsMain.Fields.Item("EMP_NAME").Value = Документ.СуммаДокумента;
				
		//Если ИмяБазы = "УПП" Тогда
		//	rsMain.Fields.Item("OTRUMAV_FIO").Value = "";
		//Иначе 
		//	rsMain.Fields.Item("OTRUMAV_FIO").Value = СокрЛП(Документ.Ответственный);
		//КонецЕсли;

		rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		Если ЗначениеЗаполнено(Документ.Склад) Тогда   
			rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(Документ.Склад);
		КонецЕсли;
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК Наименование, 
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА ВозвратТоваровОтПокупателяТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА ВозвратТоваровПоставщику.Цена / 1.2
		|					ТОГДА ВозвратТоваровОтПокупателяТовары.Цена 
		|				ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена, 
		|	ВозвратТоваровОтПокупателяТовары.Количество, 
		//|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
		|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК Единица, 
		|	ВозвратТоваровОтПокупателяТовары.СуммаБезСкидки КАК СуммаБезСкидки,
		|	ВозвратТоваровОтПокупателяТовары.СуммаСкидки КАК Скидка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Документ";
		
			Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);			
		Результат  =  Запрос.Выполнить();
		Контр  =  0;
		Н  =  Результат.Выгрузить().Количество(); 		
		rsMain.Fields.Item("KVO").Value = Н;
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);				   
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
			//rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
				
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;  
	КонецПопытки;  
		 	
КонецПроцедуры
	
Процедура Формирование_Акт(App,  pd,  orgId,  Документ,  Бланк,  ИД)
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Doc.DisableScripts();  
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		//Если ТипЗнч(Документ.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		//	Банк		= Документ.СтруктурнаяЕдиница.Банк;
		//	МФО	 		= Банк.Код;
		//	НомерСчета 	= Документ.СтруктурнаяЕдиница.НомерСчета;
		//Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		//КонецЕсли;

        ДатаДокумента =Документ.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Сделка) Тогда
			rsMain.Fields.Item("OSN_T").Value  =  Строка("Розр.док.:");
			rsMain.Fields.Item("OSN_TIP").Value  =  Строка("Рахунок на оплату покупцеві"); 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  Строка("№");
			НомерБезПрефикса = ПолучитьНомерБезНулей(Документ.Сделка); 
			rsMain.Fields.Item("OSN_NOMER").Value  =  НомерБезПрефикса;
			rsMain.Fields.Item("OSN_DATA_T").Value  =  Строка("від"); 
			rsMain.Fields.Item("OSN_DATA").Value  =  Дата(Документ.Сделка.Ссылка.Дата); 
		Иначе
			rsMain.Fields.Item("OSN_T").Value  =  "";
			rsMain.Fields.Item("OSN_TIP").Value  =  ""; 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  "";
			rsMain.Fields.Item("OSN_NOMER").Value  =  "";
			rsMain.Fields.Item("OSN_DATA_T").Value  =  ""; 
			rsMain.Fields.Item("OSN_DATA").Value  =  ""; 
		КонецЕсли; 
		
		//Если ИмяБазы = "УправлениеПроизводственнымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента);
		//ИначеЕсли ИмяБазы = "УправлениеТорговымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//Иначе 
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента) Тогда
			rsMain.Fields.Item("DOG_NUM_T").Value = "№";
			rsMain.Fields.Item("DOG_DATA_T").Value = "від";     
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
			rsMain.Fields.Item("OSN_TIP").Value = Документ.ДоговорКонтрагента.НаименованиеДляПечати;                      
		Иначе
			rsMain.Fields.Item("DOG_NUM_T").Value = "";
			rsMain.Fields.Item("DOG_DATA_T").Value = "";
		КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value  =  СокрЛП(Документ.ПредставительОрганизации);
		
		Если ИмяБазы = "УПП" Тогда 
			РуководителиОрганизации  =  РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Документ.Организация,  Документ.Дата);
			rsMain.Fields.Item("FIRM_RUKPOS").Value = СокрЛП(РуководителиОрганизации.РуководительДолжность);  
			rsMain.Fields.Item("FIRM_RUK").Value = СокрЛП(РуководителиОрганизации.Руководитель); 
			rsMain.Fields.Item("SIDE_OTV_FIO").Value  = ""; 
		Иначе
			РуководителиОрганизации  =  ОбщегоНазначения.ОтветственныеЛица(Документ.Организация,  Документ.Дата);
			rsMain.Fields.Item("FIRM_RUKPOS").Value = СокрЛП(РуководителиОрганизации.РуководительДолжность);  
			rsMain.Fields.Item("FIRM_RUK").Value = СокрЛП(РуководителиОрганизации.РуководительПредставление);
			rsMain.Fields.Item("SIDE_OTV_FIO").Value  =  СокрЛП(Документ.Получил); 
		КонецЕсли;	 	
		
		rsMain.Fields.Item("DATA1").Value  =  Формат(Документ.Дата, "ДДДММГГГГ");
		rsMain.Fields.Item("DATA2").Value  =  Формат(Документ.Дата, "ДДДММГГГГ"); 
		rsMain.Fields.Item("SIDE_CD_K").Value  =  СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);    
		
		ИтогСуммаСНДС  =  Документ.СуммаДокумента;
		Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			ИтогНДС  =  Документ.Услуги.Итог("СуммаНДС");
		Иначе
			ИтогНДС  =  Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		КонецЕсли;
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(Документ.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		// в УТП нету колонки единицизмерения в производственных услугах
		Если ИмяБазы  =  "УТП" Тогда
			ЕдиницаВПроизводстве  =  """грн.""";
		Иначе
			ЕдиницаВПроизводстве  =  "АктОбОказанииПроизводственныхУслугУслуги.ЕдиницаИзмерения"
		КонецЕсли;     	
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Содержание как Наименование, 
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	РеализацияТоваровУслугУслуги.Цена, 
		|	РеализацияТоваровУслугУслуги.Количество, 
		|	""грн."" как Единица, 
		|	РеализацияТоваровУслугУслуги.Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктОбОказанииПроизводственныхУслугУслуги.Содержание как Наименование, 
		|	ВЫБОР
		|		КОГДА АктОбОказанииПроизводственныхУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена  / 1.2
		|				ИНАЧЕ АктОбОказанииПроизводственныхУслугУслуги.Цена 
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	АктОбОказанииПроизводственныхУслугУслуги.Цена, 
		|	АктОбОказанииПроизводственныхУслугУслуги.Количество, 
		|	"+ЕдиницаВПроизводстве+", 
		|	АктОбОказанииПроизводственныхУслугУслуги.Сумма
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
		|ГДЕ
		|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка  =  &Документ";
		
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);  
		Результат  =  Запрос.Выполнить();      	
		Н  =  Результат.Выгрузить().Количество();
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		
		rsMain = Doc.DataSets("TAB1"); 	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;	
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		//Возврат;
	КонецПопытки;  
	
КонецПроцедуры 		 

Процедура Формирование_Счет(App,  pd,  orgId,  Документ,  Бланк,  ИД)  		  
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Doc.DisableScripts();
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		Если ТипЗнч(Документ.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= Документ.СтруктурнаяЕдиница.Банк;
			МФО	 		= Банк.Код;
			НомерСчета 	= Документ.СтруктурнаяЕдиница.НомерСчета;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;

        ДатаДокумента =Документ.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		КонецЕсли;      
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);
		
		//Если ИмяБазы = "УправлениеПроизводственнымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента);
		//ИначеЕсли ИмяБазы = "УправлениеТорговымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//ИначеЕсли ИмяБазы = "УТ" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//Иначе 
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(Документ.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_NUM_T").Value = "№";  
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
			rsMain.Fields.Item("DOG_DATA_T").Value = "від";
			rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
			//rsMain.Fields.Item("OSN_TIP").Value = Документ.ДоговорКонтрагента.НаименованиеДляПечати;
		Иначе
			rsMain.Fields.Item("DOG_NUM_T").Value = "";  
			rsMain.Fields.Item("DOG_DATA_T").Value = "";  			
		КонецЕсли;
		
		rsMain.Fields.Item("VO_NAME").Value  =  СокрЛП(Документ.Ответственный.Физлицо);      
		
		ИтогСуммаСНДС  =  Документ.СуммаДокумента;
		ИтогНДС  =  Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		
		Если ИмяБазы  =  "УТП" Тогда
			ИтогСкидка  =  0;
		ИначеЕсли ИмяБазы = "УПП" Тогда
			ИтогСкидка = Документ.Товары.Итог("ЗначениеУсловияАвтоматическойСкидки") + Документ.Услуги.Итог("ЗначениеУсловияАвтоматическойСкидки");
		ИначеЕсли ИмяБазы = "УТ" Тогда
			ИтогСкидка  =  0;
		Иначе
			ИтогСкидка  =  Документ.Товары.Итог("СуммаСкидки") + Документ.Услуги.Итог("СуммаСкидки");
		КонецЕсли;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;   	
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = ИтогСуммаСНДС;   
		rsMain.Fields.Item("ZNYGKA").Value =  ИтогСкидка;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;   
		
		rsMain.Post(); 	
		Если ИмяБазы  =  "УТП" Тогда
			ВыборСкидки = "ПроцентСкидкиНаценки";
			ВыборСуммы  =  "Сумма";
		ИначеЕсли ИмяБазы = "УПП" Тогда
			ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		ИначеЕсли ИмяБазы = "УТ" Тогда
			ВыборСуммы  =  "Сумма";  
			ВыборСкидки = "ПроцентСкидкиНаценки";
		Иначе
			ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";    
		КонецЕсли;              
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателюТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуПокупателюТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СчетНаОплатуПокупателюТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА СчетНаОплатуПокупателюТовары.Цена / 1.2
		|					ТОГДА СчетНаОплатуПокупателюТовары.Цена 
		|				ИНАЧЕ СчетНаОплатуПокупателюТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	СчетНаОплатуПокупателюТовары.Количество, 
		|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения КАК Единица, 
		|	СчетНаОплатуПокупателюТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
		|	СчетНаОплатуПокупателюТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетНаОплатуПокупателюУслуги.Содержание, 
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СчетНаОплатуПокупателюУслуги.СтавкаНДС  =  &Ставка20
		//|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена / 1.2
		|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		|				ИНАЧЕ СчетНаОплатуПокупателюУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ, 
		|	СчетНаОплатуПокупателюУслуги.Количество, 
		|	""грн."", 
		|	СчетНаОплатуПокупателюУслуги."+ВыборСуммы+",
		|	СчетНаОплатуПокупателюУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		|ГДЕ
		|	СчетНаОплатуПокупателюУслуги.Ссылка  =  &Документ";
		
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);			
		Результат  =  Запрос.Выполнить();
		Контр  =  0;
		Н  =  Результат.Выгрузить().Количество(); 		
		rsMain.Fields.Item("KVO").Value = Н;
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);				   
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;  
	КонецПопытки;  
	
КонецПроцедуры

Процедура Формирование_РасхНакл(App,  pd,  orgId,  Документ,  Бланк,  ИД)
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Doc.DisableScripts();
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		Если ТипЗнч(Документ.БанковскийСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= Документ.БанковскийСчетОрганизации.Банк;
			МФО	 		= Банк.Код;
			НомерСчета 	= Документ.БанковскийСчетОрганизации.НомерСчета;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;
		
        ДатаДокумента =Документ.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
 	
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО); 
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);  
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		КонецЕсли;
		
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(СокрЛП(Документ.ДоговорКонтрагента)) Тогда
		//	rsMain.Fields.Item("DOG_T").Value = Строка("Договір:");
		//	Если ИмяБазы  =  "УправлениеТорговымПредприятиемДляУкраины" Тогда
		//		rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Наименование) + " №" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//	ИначеЕсли ИмяБазы  =  "УТ" Тогда	 
		//		rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Наименование) + " №" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//	Иначе 
		//		rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		//	КонецЕсли;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(Документ.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_T").Value = "Договір:";
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
			rsMain.Fields.Item("OSN_TIP").Value = Документ.ДоговорКонтрагента.НаименованиеДляПечати;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Документ.Сделка) Тогда
			//Синоним  =  Документ.Сделка.Ссылка.Метаданные().Синоним;
			//ДатаСделки  =  Документ.Сделка.Ссылка.Дата;
			//НомерСделки  =  Документ.Сделка.Ссылка.Номер;
			rsMain.Fields.Item("OSN_T").Value  =  Строка("Розр.док.:");
			rsMain.Fields.Item("OSN_TIP").Value  =  Строка("Рахунок на оплату покупцеві"); 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  Строка("№");
			rsMain.Fields.Item("OSN_NOMER").Value  =  ПолучитьНомерБезНулей(Документ.Сделка);
			rsMain.Fields.Item("OSN_DATA_T").Value  =  Строка("від"); 
			rsMain.Fields.Item("OSN_DATA").Value  =  Дата(Документ.Сделка.Ссылка.Дата);     
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Склад) Тогда   
			rsMain.Fields.Item("SKLAD_T").Value = Строка("Склад:");
			rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(Документ.Склад);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.АдресДоставки) Тогда
			rsMain.Fields.Item("ADR_DOST_T").Value  =   Строка("Адреса доставки:");
			rsMain.Fields.Item("ADR_DOST").Value  =  СокрЛП(Документ.АдресДоставки); 
		КонецЕсли; 
		
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(Документ.МестоСоставленияДокумента); 
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);
		
		ИтогСуммаСНДС  =  Документ.СуммаДокумента;
		ИтогНДС  =  Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		
		Если ИмяБазы  =  "УТП" Тогда
			ИтогСкидка  =  0;
		ИначеЕсли ИмяБазы  =  "УТ" Тогда
			ИтогСкидка  =  0;	
		ИначеЕсли ИмяБазы  = "УПП" Тогда
			ИтогСкидка  =  Документ.Товары.Итог("ЗначениеУсловияАвтоматическойСкидки") + Документ.Услуги.Итог("ЗначениеУсловияАвтоматическойСкидки");
		Иначе
			ИтогСкидка  =  Документ.Товары.Итог("СуммаСкидки") + Документ.Услуги.Итог("СуммаСкидки");
		КонецЕсли;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = Документ.СуммаДокумента;
		rsMain.Fields.Item("ZNYGKA").Value = ИтогСкидка;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post();
		
		Если ИмяБазы  =  "УТП" Тогда
		//	ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		Иначе
		//	ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";
		КонецЕсли;              
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугТовары.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РеализацияТоваровУслугТовары.Количество, 
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Единица,
		|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Содержание, 
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугУслуги.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ, 
		|	РеализацияТоваровУслугУслуги.Количество, 
		|	""грн."" ,
		|	РеализацияТоваровУслугУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ";
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);		
		
		Результат  =  Запрос.Выполнить();
		Контр  =  0;
		Н  =  Результат.Выгрузить().Количество();
		
		rsMain.Fields.Item("KVO").Value = Н;
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(Документ.ПредставительОрганизации);
		
		Если ИмяБазы = "УПП" Тогда
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = "";
		Иначе 
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(Документ.Получил);
		КонецЕсли;
		
		rsMain.Fields.Item("DOV_SERIA").Value = СокрЛП(Документ.ДоверенностьСерия);   
		rsMain.Fields.Item("DOV_NOMER").Value = СокрЛП(Документ.ДоверенностьНомер);
		rsMain.Fields.Item("DOV_DATA").Value = СокрЛП(Документ.ДоверенностьДата); 
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование); 
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Количество * ВыборкаДетальныеЗаписи.ЦенаБезНДС;	
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		//-----------------------------------------------------
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

Процедура Формирование_АктаСверки(App,  pd,  orgId,  Документ,  Бланк,  ИД)
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Doc.DisableScripts();

		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		
        ДатаДокумента =Документ.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 

		rsMain.Fields.Item("VALUTA_CHARCODE").Value  =  СокрЛП(Документ.ВалютаДокумента);
		rsMain.Fields.Item("NA_KORIST_TEXT").Value  =  "на користь";
		
		Если Документ.СверкаСогласована =  Истина Тогда
			rsMain.Fields.Item("REZ_T").Value = "В результаті звірення виявлена розбіжність інформації про стан розрахунків у розмірі";
			rsMain.Fields.Item("REZ_S").Value = Документ.Расхождение;
			rsMain.Fields.Item("REZ_V").Value =  СокрЛП(Документ.ВалютаДокумента); 			
			rsMain.Fields.Item("SV_ZD").Value =  "За даними"; 
			rsMain.Fields.Item("SV_SIDE").Value =  СокрЛП(СведенияОПокупателе.ПолноеНаименование); 
			rsMain.Fields.Item("SV_NA").Value =  "на"; 
			rsMain.Fields.Item("SV_DATA").Value =  Документ.ДатаОкончания; 
			rsMain.Fields.Item("SV_NA_KORIST_TEXT").Value =  "заборгованість на користь";
			rsMain.Fields.Item("SV_V").Value =  СокрЛП(Документ.ВалютаДокумента); 
			
			Если Документ.ОстатокНаНачало>0 Тогда        			
				rsMain.Fields.Item("SK_KT_SIDE").Value = Документ.ОстатокНаНачало;
			Иначе
				rsMain.Fields.Item("SK_DT_SIDE").Value = Документ.ОстатокНаНачало * (-1);  					
			КонецЕсли;
			
			Если Документ.Расхождение>0 Тогда
				rsMain.Fields.Item("SV_NA_KORIST").Value =  СокрЛП(СведенияОПокупателе.ПолноеНаименование); 
				rsMain.Fields.Item("SV_DOCSUM").Value =  (Документ.ОстатокНаНачало + Документ.Расхождение) * (-1); 
			Иначе
				rsMain.Fields.Item("SV_NA_KORIST").Value =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
				rsMain.Fields.Item("SV_DOCSUM").Value =  Документ.ОстатокНаНачало + Документ.Расхождение;	
			КонецЕсли;
		КонецЕсли;
		
		rsMain.Fields.Item("DOCDATE").Value = Документ.Дата;  	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		//rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("DATA_BEG").Value  =  Документ.ДатаНачала;
		rsMain.Fields.Item("DATA_END").Value  =  Документ.ДатаОкончания;
		rsMain.Fields.Item("DATA1").Value = Документ.ДатаОкончания; 
		
		Если ИмяБазы = "УПП" Тогда
			rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента);
		Иначе 
			rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		КонецЕсли;
		
		Если ИмяБазы = "УТ" Тогда		
		Иначе  
			ДанныеПредставителяОрганизации  =  ОбщегоНазначения.ДанныеФизЛица(Документ.Организация, Документ.ПредставительОрганизации,  Документ.Дата);
			rsMain.Fields.Item("VO_NAME").Value  =  ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации), "", ДанныеПредставителяОрганизации.Представление);
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(Документ.ПредставительКонтрагента); 
		КонецЕсли;	
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		Если Документ.ОстатокНаНачало>0 тогда    
			rsMain.Fields.Item("SND_ORG").Value  =  Документ.ОстатокНаНачало; 
			rsMain.Fields.Item("SNK_SIDE").Value  =  Документ.ОстатокНаНачало; 
		Иначе 
			rsMain.Fields.Item("SNK_ORG").Value  =  Макс(Документ.ОстатокНаНачало,  -Документ.ОстатокНаНачало); 
			rsMain.Fields.Item("SND_SIDE").Value  =  Макс(Документ.ОстатокНаНачало,  -Документ.ОстатокНаНачало); 
		КонецЕсли; 
				
		ТаблицаАктаСверки  =  СоздатьТаблицуАктаСверки(Документ); 	
		
		rsMain  =  Doc.DataSets("TAB1");
		КоличествоСтрок  =  ТаблицаАктаСверки.Количество();
		Счетчик  =  0;
		ОборотыПоДебету = 0 ;
		ОборотыПоКредиту = 0 ;   	
		
		Для Каждого СтрокаТЗ Из ТаблицаАктаСверки Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_DATA_ORG").Value  =  СтрокаТЗ.ДАТАОрганизации;
			rsMain.Fields.Item("TAB1_DOC_ORG").Value  =  СокрЛП(СтрокаТЗ.ПредставлениеОрганизации);
			rsMain.Fields.Item("TAB1_DT_ORG").Value  =  СтрокаТЗ.ДТОрганизации;
			rsMain.Fields.Item("TAB1_KT_ORG").Value  =  СтрокаТЗ.КТОрганизации;
			rsMain.Fields.Item("TAB1_DATA_SIDE").Value  =  СтрокаТЗ.ДАТАКонтрагента;
			rsMain.Fields.Item("TAB1_DOC_SIDE").Value  =  СокрЛП(СтрокаТЗ.ПредставлениеКонтрагента);
			rsMain.Fields.Item("TAB1_DT_SIDE").Value  =  СтрокаТЗ.ДТКонтрагента;
			rsMain.Fields.Item("TAB1_KT_SIDE").Value  =  СтрокаТЗ.КТКонтрагента;   			
			
			rsMain.Post(); 
			ОборотыПоДебету = ОборотыПоДебету + СтрокаТЗ.ДТОрганизации;
			ОборотыПоКредиту = ОборотыПоКредиту +  СтрокаТЗ.КТОрганизации;
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;		
		КонецЦикла; 
	
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		rsMain.Append();
		//rsMain.Post();

		rsMain.Fields.Item("OB_DT_ORG").Value= ОборотыПоДебету;
		rsMain.Fields.Item("OB_KT_ORG").Value= ОборотыПоКредиту;
		
		ОстатокНаКонец = Документ.ОстатокНаНачало + Документ.Расхождение;
		Если ОстатокНаКонец>0 Тогда			
			rsMain.Fields.Item("SK_DT_ORG").Value = ОстатокНаКонец;
			rsMain.Fields.Item("NA_KORIST").Value= СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		ИначеЕсли ОстатокНаКонец<0 Тогда
			rsMain.Fields.Item("SK_KT_ORG").Value = ОстатокНаКонец;
			rsMain.Fields.Item("NA_KORIST").Value= СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		КонецЕсли;
		rsMain.Fields.Item("DOCSUM").Value = ОстатокНаКонец;
		
		rsMain.Post();   
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

Функция СоздатьТаблицуАктаСверки(Документ)
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовОрганизация.Дата как ДАТАОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Представление как ПредставлениеОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Дебет КАК ДТОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Кредит КАК КТОрганизации
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовОрганизация    
	|ГДЕ
	|	АктСверкиВзаиморасчетовОрганизация.Ссылка  =  &Документ";
	Запрос.УстановитьПараметр("Документ",  Документ); 
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	Запрос2  =  Новый Запрос;
	Запрос2.Текст  =  
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовКонтрагент.Дата как ДАТАКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Представление как ПредставлениеКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Дебет КАК ДТКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Кредит КАК КТКонтрагента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК АктСверкиВзаиморасчетовКонтрагент 
	|ГДЕ
	|	АктСверкиВзаиморасчетовКонтрагент.Ссылка  =  &Документ"; 
	
	Запрос2.УстановитьПараметр("Документ",  Документ); 
	Результат2  =  Запрос2.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ДАТАКонтрагента"); 
	Результат.Колонки.Добавить("ПредставлениеКонтрагента"); 
	Результат.Колонки.Добавить("ДТКонтрагента"); 
	Результат.Колонки.Добавить("КТКонтрагента"); 
	Если Результат2.Количество() Тогда 
		Если Результат.Количество() >=  Результат2.Количество() Тогда 
			Для Н = 0 По Результат2.Количество() -1 Цикл 
				Стр  =  Результат[Н]; 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			КонецЦикла;
		Иначе 
			//во второй таблице больше количество строк 
			Для Н  =  0 По Результат.Количество() -1 Цикл 
				Стр  =  Результат[Н]; 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			КонецЦикла;
			
			Пока Н <> Результат2.Количество()  Цикл
				Н  =  Н + 1;
				Стр  =  Результат.Добавить(); 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н-1]); 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Функция Формирование_НН(App,  Документ,  Бланк,  PDate,  ИД)  
	
	Перем Позиция;	
	Перем НН2012; // истина - НН выписана после 16/12/2011,  ложь - до 16/12/2011
	Если НачалоДня(Дата(Документ.Дата)) >=  НачалоДня(Дата(2011, 12, 16)) Тогда	
		НН2012  =  Истина;
	Иначе
		НН2012  =  Ложь;
	КонецЕсли;
	
	Попытка
		yes  =  App.SelectFirm(КодПоЕДРПОУ,  пФил); 
		ЕСЛИ yes ТОГДА 
			Doc   =  App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0); 
			Doc.DisableScripts(); 
		Конецесли;
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПродавце       =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  Документ.Дата);
		СведенияОПокупателе     =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата);
		
		 //запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
		 Попытка
			НалоговыйДокументОбъект  =  Документ.ПолучитьОбъект();
			СтруктураПараметров      =  НалоговыйДокументОбъект.ПечатьДокумента(Истина);
			ПоляНН = СтруктураПараметров.НалоговыйДокумент;
		    СтруктураДанныеТЧ        =  СтруктураПараметров.НалоговыйДокумент.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
		Исключение
			Предупреждение(НСТР("ru  =  'Заполнение по данным документа невозможно в данной версии конфигурации. Необходимо обновить конфигурацию!'; uk  =  'Заповнення даними документа неможливе на поточній версії конфигурації. Необхідно оновити конфігурацію!'"));
			Возврат Ложь;
		КонецПопытки;

		Если ИмяБазы = "УПП" или ИмяБазы = "УТП" Тогда
			ТекТелефоныОрганизации  =  СведенияОПродавце.Телефоны;
			Позиция1  =  Найти (ТекТелефоныОрганизации, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныОрганизации, ", ")) Тогда  
				Позиция1  =  Сред(ТекТелефоныОрганизации, 1, Позиция1-1);
			Иначе
				Позиция1 =  ТекТелефоныОрганизации;
			КонецЕсли;   		
			Позиция1  =  СтрЗаменить(Позиция1,  " ",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "(",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  ")",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "-",  ""); 
			ТекТелефоныОрганизации  =  Позиция1;       
			//---------------------------------------------------------------------
			ТекТелефоныКонтрагента  =  СведенияОПокупателе.Телефоны;
			Позиция2  =  Найти (ТекТелефоныКонтрагента, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
				Позиция2  =  Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
			Иначе
				Позиция2 =  ТекТелефоныКонтрагента;
			КонецЕсли;   		
			Позиция2  =  СтрЗаменить(Позиция2,  " ",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "(",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  ")",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "-",  ""); 
			ТекТелефоныКонтрагента  =  Позиция2;
		Иначе
			ТекТелефоныОрганизации  =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,     "Телефоны, ",           Ложь);
			ТекТелефоныОрганизации  =  ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			ТекТелефоныКонтрагента  =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
			ТекТелефоныКонтрагента  =  ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		КонецЕсли;
		//ВалютаДокумента   =  Константа.ПолучитьАтрибут("ОсновнаяВалюта").Наименование;
		
		rsMain.Fields.Item("N11").Value  =  СокрЛП(ПоляНН.HFILL);        
		
	Попытка	
		rsMain.Fields.Item("N13").Value  = ?(ЗначениеЗаполнено(ПоляНН.HORIG1), 1, "");
	Исключение
	КонецПопытки;

	Попытка
		rsMain.Fields.Item("N14").Value  = СокрЛП(ПоляНН.HTYPR);
	Исключение
	КонецПопытки;
	
	Попытка	
		Если Строка(Документ.ВидОперации) = "Операции, освобожденные от  НДС" Тогда
		rsMain.Fields.Item("N26").Value  ="Без ПДВ";
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	Попытка
		rsMain.Fields.Item("N25").Value  = СокрЛП(ПоляНН.H03);
	Исключение
	КонецПопытки;
	
	Попытка
		rsMain.Fields.Item("N8").Value   =  Строка(СокрЛП(Документ.ВидДоговора)); 
		Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента.Номер) тогда
			rsMain.Fields.Item("N81").Value  =  Строка(СокрЛП(Документ.ДоговорКонтрагента.Номер)); 
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента.Дата) тогда
			rsMain.Fields.Item("N82").Value      =  Документ.ДоговорКонтрагента.Дата; 
		КонецЕсли;
	Исключение
	КонецПопытки;


		
		//Если Строка(СокрЛП(СведенияОПокупателе.ИНН)) = "" Тогда 
		//	rsMain.Fields.Item("N4").Value   = "100000000000";
		//	rsMain.Fields.Item("N3").Value   = "Неплатник";
		//Иначе 
		    rsMain.Fields.Item("N4").Value   = СокрЛП(ПоляНН.HKBUY); //Строка(СокрЛП(СведенияОПокупателе.ПолноеНаименование)); 
		    rsMain.Fields.Item("N3").Value   = СокрЛП(ПоляНН.HNAMEBUY); //Строка(СокрЛП(СведенияОПокупателе.ИНН));
			Попытка
				rsMain.Fields.Item("DEPT_POK").Value = СокрЛП(ПоляНН.HFBUY);
			Исключение
			КонецПопытки;
		//КонецЕсли;
				
		//// КИТ-2005
		//КтоВыписалНалоговуюНакладную = "";
		//ФИО = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Документ.Дата, Новый Структура("ФизЛицо", Документ.КтоВыписалНалоговуюНакладную));
		//Если ФИО.Количество() > 0 Тогда
		//	КтоВыписалНалоговуюНакладную = ВРег(Лев(СокрЛ(ФИО[0].Имя), 1))
		//								 + ". "
		//								 + ВРег(Лев(СокрЛ(ФИО[0].Отчество), 1))
		//								 + ". "
		//								 + СокрЛП(ФИО[0].Фамилия); 
		//Иначе
		//	КтоВыписалНалоговуюНакладную = "" + Документ.КтоВыписалНалоговуюНакладную;									 
		//КонецЕсли;
		//
		Попытка
			rsMain.Fields.Item("N10").Value      =  СокрЛП(ПоляНН.HBOS);//Строка(СокрЛП(КтоВыписалНалоговуюНакладную));
			rsMain.Fields.Item("INN").Value      =  СокрЛП(ПоляНН.HKBOS);
		Исключение
		КонецПопытки;	
		
		rsMain.Fields.Item("EDR_POK").Value  =  ?(Документ.Контрагент.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо, СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ), СокрЛП(СведенияОПокупателе.КодПоДРФО));
		
		Если ЗначениеЗаполнено(Документ.СпецРежимНалогообложения) Тогда
			rsMain.Fields.Item("N2_12").Value = Документ.СпецРежимНалогообложения;
		КонецЕсли; 
		
		//Если ЗначениеЗаполнено(Документ.ТипПричиныНевыдачиПокупателю) Тогда
		//	rsMain.Fields.Item("PZOB").Value = Документ.ТипПричиныНевыдачиПокупателю;
		//КонецЕсли; 
		
		// заполним налоговое обязательство по виду операции документа
		//А нужно ли это
		Если Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации Тогда
			//rsMain.Fields.Item("PZOB").Value = 0; // ?? не нашел соответствие
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации Тогда
			rsMain.Fields.Item("PZOB").Value = 2;
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
			rsMain.Fields.Item("PZOB").Value = 1;
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
			rsMain.Fields.Item("PZOB").Value = 3;
		КонецЕсли;
		
		НомерБезПрефикса  =  ПолучитьНомерБезНулей(Документ);
		СпецРеж = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", Документ.Метаданные()))
			И (Документ.СпецРежимНалогообложения > 0) Тогда
			rsMain.Fields.Item("N2_12").Value = СокрЛП(ПоляНН.HNUM1);
			СпецРеж = "/" + СокрЛП(ПоляНН.HNUM1) + "/";
		КонецЕсли;

		Филия = "";
		Если (ЕстьРеквизитДокумента("ОбособленноеПодразделение", Документ.Метаданные()))
			И (ЗначениеЗаполнено(Документ.ОбособленноеПодразделение.Префикс)) Тогда
			rsMain.Fields.Item("N2_13").Value = СокрЛП(ПоляНН.HNUM2);
			Филия = СокрЛП(ПоляНН.HNUM2);
			Если НЕ ЗначениеЗаполнено(СпецРеж) Тогда				
				СпецРеж = "//";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерБезПрефикса) и НомерБезПрефикса <> "" Тогда
			rsMain.Fields.Item("N2_11").Value    =  СокрЛП(ПоляНН.HNUM);;   
		КонецЕсли;
		
		rsMain.Fields.Item("N2_1").Value = НомерБезПрефикса + СпецРеж + Филия;	
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(ПоляНН.HNAMESEL);
		rsMain.Fields.Item("FIRM_INN").Value  = СокрЛП(ПоляНН.HKSEL); // СокрЛП(СведенияОПродавце.ИНН);
		Попытка
			rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПродавце.НомерСвидетельства);
		Исключение
		КонецПопытки;
		rsMain.Fields.Item("NAKL_TYPE").Value = 1;   // 0  =  Входящая НН 1  =  Исходящая 
		
		НазваниеЯчейки  =  ?(НН2012, "PHON", "FIRM_PHON");
		rsMain.Fields.Item(НазваниеЯчейки).Value  =  Строка(СокрЛП(ТекТелефоныОрганизации)); 
		Попытка
			rsMain.Fields.Item("N16").Value  =  СокрЛП(ПоляНН.R003G10S);
		Исключение
		КонецПопытки;
		     //В исксезде нетупередачи поля, хз нужно ли
		//Если Документ.ВидОперации  =  Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации Тогда
		//	rsMain.Fields.Item("A6_10").Value  =  "Без ПДВ"; 
		//КонецЕсли;	
		
		//Попытка   //запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
		//	НалоговыйДокументОбъект  =  Документ.ПолучитьОбъект();
		//	СтруктураПараметров      =  НалоговыйДокументОбъект.ПечатьДокумента(Истина);
		//	СтруктураДанныеТЧ        =  СтруктураПараметров.НалоговыйДокумент.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
		//Исключение
		//	Предупреждение(НСТР("ru  =  'Заполнение по данным документа невозможно в данной версии конфигурации. Необходимо обновить конфигурацию!'; uk  =  'Заповнення даними документа неможливе на поточній версії конфигурації. Необхідно оновити конфігурацію!'"));
		//	Возврат Ложь;
		//КонецПопытки;

		rsMain  =  Doc.DataSets("TAB1");
		ИтогОснСтавка = 0;
		ИтогТеррУкр = 0;
		ИтогЭкспорт = 0;
		ИтогОсвобожден = 0;
		ИтогСтавка7 = 0;
		НоваяНН = ?( НачалоДня(Дата(Документ.Дата)) >=  НачалоДня(Дата(2014, 12, 01)), истина, ложь);		
		//ЧСуммаНДС = Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС") + Документ.ОС.Итог("СуммаНДС")+Документ.НМА.Итог("СуммаНДС");
		//ЧСуммаСНДС = ПолучитьСуммуДокументаСНДС(Документ, "Товары")+ПолучитьСуммуДокументаСНДС(Документ, "Услуги")+ПолучитьСуммуДокументаСНДС(Документ, "ОС")+ПолучитьСуммуДокументаСНДС(Документ, "НМА");
		ЧСуммаНДС = Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		ЧСуммаСНДС = ПолучитьСуммуДокументаСНДС(Документ, "Товары")+ПолучитьСуммуДокументаСНДС(Документ, "Услуги");
		Если Документ.Метаданные().ТабличныеЧасти.Найти("ОС") <> Неопределено Тогда
			ЧСуммаНДС = ЧСуммаНДС + Документ.ОС.Итог("СуммаНДС");
			ЧСуммаСНДС = ЧСуммаСНДС + ПолучитьСуммуДокументаСНДС(Документ, "ОС");
		КонецЕсли;
		
		Если Документ.Метаданные().ТабличныеЧасти.Найти("НМА") <> Неопределено Тогда
			ЧСуммаНДС = ЧСуммаНДС + Документ.НМА.Итог("СуммаНДС");
			ЧСуммаСНДС = ЧСуммаСНДС + ПолучитьСуммуДокументаСНДС(Документ, "НМА");
		КонецЕсли;
		//СуммаНДС=ОбщегоНазначения.ФорматСумм(ЧСуммаНДС);
		//СуммаСНДС=ОбщегоНазначения.ФорматСумм(ЧСуммаСНДС);
		//СуммаБезНДС= ОбщегоНазначения.ФорматСумм(ЧСуммаСНДС - ЧСуммаНДС);
		СуммаНДС = Формат(ЧСуммаНДС, "ЧГ=0; ЧДЦ=2");
		СуммаСНДС = Формат(ЧСуммаСНДС, "ЧГ=0; ЧДЦ=2");
		СуммаБезНДС = Формат(ЧСуммаСНДС - ЧСуммаНДС, "ЧГ=0; ЧДЦ=2");
		
		КоличествоСтрок  =  СтруктураДанныеТЧ.Количество();
		Счетчик  =  0; 
		G109Есть = СтруктураДанныеТЧ.Колонки.Найти("G109") <> Неопределено;
		Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл 
			rsMain.Edit(); 
		Попытка
			rsMain.Fields.Item("TAB1_A13").Value =  СокрЛП(СтрокаТЧ.G3S); // Номенклатура
		Исключение
		КонецПопытки;	
			
		Попытка
			rsMain.Fields.Item("TAB1_A131").Value =  СокрЛП(СтрокаТЧ.G4); // Код згыдно УКТ ЗЕД
		Исключение
		КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A14").Value =  СокрЛП(СтрокаТЧ.G4S); // Единица измерения  товаров   
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A141").Value =  СокрЛП(СтрокаТЧ.G105_2S); // Единица измерения  товаров КоД
			Исключение
			КонецПопытки;	
			
			Попытка
				rsMain.Fields.Item("TAB1_A15").Value =  СокрЛП(СтрокаТЧ.G5); // Количество 
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A16").Value =  СокрЛП(СтрокаТЧ.G6); // Цена продажи
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A8").Value =  СокрЛП(СтрокаТЧ.G008);   //Код ставки
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A9").Value =  СокрЛП(СтрокаТЧ.G009);  //Код пильгы
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A10").Value =  СокрЛП(СтрокаТЧ.G010);   //Объём поставок
			Исключение
			КонецПопытки;
			
			rsMain.Post();  		
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;		
		КонецЦикла;
		
		
		//Непонятно что это вообще
		//Если (НоваяНН) И (НЕ G109Есть) И (ИтогТеррУкр <> 0 ) И (ПроверкаНовойФормыНН())Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
		rsMain=Doc.DataSets() ;  
		rsMain.Edit();             
		rsMain.Append();
		rsMain.Post(); 
	Попытка
		Тара = СокрЛП(ПоляНН.R02G11);		
		Если Тара <> "0" Тогда		
			rsMain.Fields.Item("A3_11").Value  =  СокрЛП(ПоляНН.R02G11);  //ЗЗТ-загальна сума коштів
		КонецЕсли;
	Исключение
	КонецПопытки;
	Попытка
		rsMain.Fields.Item("A5_7").Value  =  СокрЛП(ПоляНН.R01G7);   //Ставка 20%
		rsMain.Fields.Item("A6_7").Value  =  СокрЛП(ПоляНН.R03G7);
		rsMain.Fields.Item("A6_11").Value  =  СокрЛП(ПоляНН.R03G11);  //   Общая сумма
	Исключение
	КонецПопытки;	
	
	Попытка
		rsMain.Fields.Item("A5_71").Value  =  СокрЛП(ПоляНН.R01G109);     //Ставка 7%
		rsMain.Fields.Item("A6_71").Value  =  СокрЛП(ПоляНН.R03G109);
		rsMain.Fields.Item("A6_11").Value  =  СокрЛП(ПоляНН.R03G11);  //   Общая сумма
	Исключение
	КонецПопытки;	
	
	Попытка
		rsMain.Fields.Item("A5_8").Value  =  СокрЛП(ПоляНН.R01G8);   //Всякие ставки по 0%
	Исключение
	КонецПопытки;
	
	Попытка
	  //Всякие ставки по 0%
		rsMain.Fields.Item("A5_9").Value  =  СокрЛП(ПоляНН.R01G9);
	Исключение
	КонецПопытки;
	
	Попытка
		rsMain.Fields.Item("A5_10").Value  =  СокрЛП(ПоляНН.R01G10);
	Исключение
	КонецПопытки;
	
	Попытка
		rsMain.Fields.Item("A7_11").Value  =  СокрЛП(ПоляНН.R04G11);   //   Общая сумма с ПДВ
	Исключение
	КонецПопытки;
		
		rsMain.Post();
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save(1);
		Doc.Close();
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция Формирование_Дод2(App,  Документ,  Бланк,  PDate,  ИД) 
	
	Попытка
		
		yes  =  App.SelectFirm(КодПоЕДРПОУ,  пФил); 
		ЕСЛИ yes ТОГДА   
			Doc  =  App.OpenOrCreateByExDocID(Бланк, 0, PDate,  , ИД, 0);
			Doc.DisableScripts(); 
		КонецЕсли;
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПродавце       =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  Документ.Дата);
		СведенияОПокупателе     =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата);
		
		Попытка   //запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
			НалоговыйДокументОбъект  =  Документ.ПолучитьОбъект();
			СтруктураПараметров      =  НалоговыйДокументОбъект.ПечатьДокумента(Истина);
			ПоляРК = СтруктураПараметров.НалоговыйДокумент;
			СтруктураДанныеТЧ        =  СтруктураПараметров.НалоговыйДокумент.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
						
		Исключение
			Сообщить(НСТР("ru  =  'Заполнение по данным документа невозможно в данной версии конфигурации. Необходимо обновить конфигурацию!'; uk  =  'Заповнення даними документа неможливе на поточній версії конфигурації. Необхідно оновити конфігурацію!'"));
			Возврат Ложь;
		КонецПопытки;
		
		Если ИмяБазы = "УПП" или ИмяБазы = "УТП"  Тогда
			ТекТелефоныОрганизации  =  СведенияОПродавце.Телефоны;
			Позиция1  =  Найти (ТекТелефоныОрганизации, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныОрганизации, ", ")) Тогда  
				Позиция1  =  Сред(ТекТелефоныОрганизации, 1, Позиция1-1);
			Иначе
				Позиция1 =  ТекТелефоныОрганизации;
			КонецЕсли;   		
			Позиция1  =  СтрЗаменить(Позиция1,  " ",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "(",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  ")",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "-",  ""); 
			ТекТелефоныОрганизации  =  Позиция1;       
			//---------------------------------------------------------------------
			ТекТелефоныКонтрагента  =  СведенияОПокупателе.Телефоны;
			Позиция2  =  Найти (ТекТелефоныКонтрагента, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
				Позиция2  =  Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
			Иначе
				Позиция2 =  ТекТелефоныКонтрагента;
			КонецЕсли;   		
			Позиция2  =  СтрЗаменить(Позиция2,  " ",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "(",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  ")",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "-",  ""); 
			ТекТелефоныКонтрагента  =  Позиция2;    
		Иначе
			ТекТелефоныОрганизации  =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,     "Телефоны, ",           Ложь);
			ТекТелефоныОрганизации  =  ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			ТекТелефоныКонтрагента  =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
			ТекТелефоныКонтрагента  =  ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		КонецЕсли;
		
		//Попытка
		//	Если ЕстьРеквизитДокумента("ДатаОплаты", Документ.Метаданные()) Тогда
		//		rsMain.Fields.Item("N11").Value = Формат(Документ.ДатаОплаты, "ДДДММГГГГ"); 
		//	КонецЕсли;
		//Исключение                                                                                        //Вроде не нужно
		//КонецПопытки;
		//
		//Попытка
		//	rsMain.Fields.Item("N13").Value = Формат(Документ.Дата, "ДДДММГГГГ"); 
		//Исключение
		//КонецПопытки;
		
			
		rsMain.Fields.Item("N1_11").Value = СокрЛП(ПоляРК.HNUM);      //Номер розрахунку
		СпецРеж = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", Документ.Метаданные()))
			И (Документ.СпецРежимНалогообложения > 0) Тогда
			rsMain.Fields.Item("N1_12").Value =  СокрЛП(ПоляРК.HNUM1);
			СпецРеж = "/" + СокрЛП(ПоляРК.HNUM1) + "/";
		КонецЕсли;
        Филия = "";
			Если (ЕстьРеквизитДокумента("НалоговаяНакладная", Документ.Метаданные()))
			И (ЗначениеЗаполнено(Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс)) Тогда
			rsMain.Fields.Item("N1_13").Value = СокрЛП(ПоляРК.HNUM2);
			Филия = СокрЛП(ПоляРК.HNUM2);
			Если НЕ ЗначениеЗаполнено(СпецРеж) Тогда				
				СпецРеж = "//";
			КонецЕсли;
		КонецЕсли;		
	     		
	    rsMain.Fields.Item("N1").Value =  СокрЛП(ПоляРК.HNUM) + СпецРеж + Филия;
		
		rsMain.Fields.Item("N2_11").Value = СокрЛП(ПоляРК.HPODNUM);
		rsMain.Fields.Item("N2_12").Value = СокрЛП(ПоляРК.HPODNUM1);
		rsMain.Fields.Item("N2_13").Value = СокрЛП(ПоляРК.HPODNUM2);
		Попытка
			rsMain.Fields.Item("N12").Value = Документ.Дата;
		Исключение
		КонецПопытки;
		
		rsMain.Fields.Item("N15").Value =СокрЛП(ПоляРК.HFILL);
		rsMain.Fields.Item("N2").Value = СокрЛП(ПоляРК.HPODFILL); //Дата НН 
	Попытка	
		Если ЗначениеЗаполнено(Документ.ТипПричиныНевыдачиПокупателю) Тогда
			rsMain.Fields.Item("PZOB").Value = Документ.ТипПричиныНевыдачиПокупателю;
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	//Попытка	
	//	Если (ЗначениеЗаполнено(Документ.НалоговаяНакладная.ДоговорКонтрагента))
	//		И (ЗначениеЗаполнено(Документ.НалоговаяНакладная.ДоговорКонтрагента.Ссылка.Дата)) Тогда 
	//		rsMain.Fields.Item("N2_2").Value = Документ.НалоговаяНакладная.ДоговорКонтрагента.Ссылка.Дата;
	//		rsMain.Fields.Item("N2_3").Value = Документ.НалоговаяНакладная.ДоговорКонтрагента.Ссылка.Номер;  
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
		
		//rsMain.Fields.Item("N16").Value = 1;
		Попытка
			rsMain.Fields.Item("N16").Value  =  ?(ЗначениеЗаполнено(ПоляРК.HERPN), 1, 0); //Підлягає реєстрації в ЄРПН покупцем
		Исключение
		КонецПопытки;
		
		Попытка    //Непонятно нужло ли это вообще
			Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", Документ.Метаданные()) Тогда
				rsMain.Fields.Item("N14").Value  =  ?(Документ.ЭлектронныйДокумент,1,0);
				rsMain.Fields.Item("K1").Value  =  ?(Документ.ЭлектронныйДокумент,"","Х");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка	
			rsMain.Fields.Item("N17").Value  = ?(ЗначениеЗаполнено(СтруктураПараметров.НалоговыйДокумент.HORIG1), 1, "");
			rsMain.Fields.Item("N18").Value  = СокрЛП(СтруктураПараметров.НалоговыйДокумент.HTYPR);
		Исключение
		КонецПопытки;
		
		//Если Строка(СокрЛП(СведенияОПокупателе.ИНН)) = "" Тогда 
		//	rsMain.Fields.Item("N4").Value   = "100000000000";
		//	rsMain.Fields.Item("N3").Value   = "Неплатник";
		//Иначе 
		//Что есть в 1C то и будем передавать
		    rsMain.Fields.Item("N3").Value   =  СокрЛП(ПоляРК.HNAMEBUY); 
		    rsMain.Fields.Item("N4").Value   =  СокрЛП(ПоляРК.HKBUY);
			
			Попытка
				rsMain.Fields.Item("DEPT_POK").Value = СокрЛП(ПоляРК.HFBUY);
			Исключение
			КонецПопытки;
	       
		//КонецЕсли;
		Попытка //Вроде не нужно но пусть до теста
			rsMain.Fields.Item("N6").Value = СокрЛП(ТекТелефоныКонтрагента); 
			rsMain.Fields.Item("N7").Value = СокрЛП(Документ.Контрагент.НомерСвидетельства);
			rsMain.Fields.Item("N8").Value = СокрЛП(Документ.НалоговаяНакладная.ВидДоговора);
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента.Дата) тогда
			rsMain.Fields.Item("N81").Value      =  Документ.ДоговорКонтрагента.Ссылка.Номер;
			rsMain.Fields.Item("N82").Value      =  Документ.ДоговорКонтрагента.Ссылка.Дата; 
		КонецЕсли;   
		
		//Если СтрДлина(СокрЛП(Документ.ФормаРасчетов))>0 Тогда 
		//	rsMain.Fields.Item("N9").Value  =  СокрЛП(Документ.ФормаРасчетов);
		//КонецЕсли;
		
		// КИТ-2005
		Попытка	
			rsMain.Fields.Item("N10").Value      =  СокрЛП(ПоляРК.HBOS);  //   Кто составил
			rsMain.Fields.Item("INN").Value      =  СокрЛП(ПоляРК.HKBOS);     
		Исключение
		КонецПопытки;	
		//rsMain.Fields.Item("N5").Value       =  УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Документ.Контрагент,  "Юридический"); 
		EDR_POK  =  ?(Документ.Контрагент.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо, СведенияОПокупателе.КодПоЕДРПОУ, СведенияОПокупателе.КодПоДРФО);  
		rsMain.Fields.Item("EDR_POK").Value = СокрЛП(EDR_POK);  
		rsMain.Fields.Item("NAKL_TYPE").Value = 1;   // 0  =  Входящая НН 1  =  Исходящая      
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(ПоляРК.HNAMESEL);  
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(ПоляРК.HKSEL);
		
		Попытка
			rsMain.Fields.Item("N26").Value = ?(ЗначениеЗаполнено(ПоляРК.HERPN0),1, 0);
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("N27").Value = СокрЛП(ПоляРК.H03);
		Исключение
		КонецПопытки;
	Попытка	
		Если Строка(Документ.ВидОперации) = "Операции, освобожденные от  НДС (корректировка)" или Строка(Документ.ВидОперации) = "Операции, освобожденные от  НДС (возврат)" Тогда
		rsMain.Fields.Item("N28").Value  ="Без ПДВ";
		КонецЕсли;
	Исключение
	КонецПопытки;

		Попытка
			rsMain.Fields.Item("N29").Value = СокрЛП(ПоляРК.R003G10S);
		Исключение
		КонецПопытки;


		rsMain.Post();    						
			
		//rsMain.Fields.Item("A1_9").Value = Документ.СуммаДокумента - Документ.СуммаНДСДокумента;
		//rsMain.Fields.Item("A2_9").Value = Документ.СуммаНДСДокумента;
		
		rsMain  =  Doc.DataSets("TAB1");
		ИтогОснСтавкаДод2=0;
		ИтогНулеваяСтавкаДод2=0;
		ИтогОсвобожденДод2=0;
		КоличествоСтрок  =  СтруктураДанныеТЧ.Количество();
		Счетчик  =  0;
		ИтогСтавка7 = 0;
		НоваяНН = ?( НачалоДня(Дата(Документ.Дата)) >=  НачалоДня(Дата(2014, 12, 01)), истина, ложь);
		//G111Есть = СтруктураДанныеТЧ.Колонки.Найти("G111") <> Неопределено;
		Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл			
			rsMain.Edit();       
			//rsMain.Fields.Item("TAB1_A1").Value = Документ.Дата;   //Дата корректировки стоимости
			rsMain.Fields.Item("TAB1_A2").Value = СокрЛП(СтрокаТЧ.G2S); //Причина корректировки 
			rsMain.Fields.Item("TAB1_A3").Value =  СокрЛП(СтрокаТЧ.G3S); // Номенклатура
			
			//Если Документ.Дата >=  глЗначениеПеременной("ДатаВступленияВСилуПриказа1379") Тогда
			//	Если ЗначениеЗаполнено(СтрокаТЧ.G4) Тогда 
			//		КодУКТВЭД = СокрЛП(СтрЗаменить(СтрЗаменить(СтрокаТЧ.G4,  " ",  ""),  ".",  ""));
				Попытка
					rsMain.Fields.Item("TAB1_A31").Value  =  СокрЛП(СтрокаТЧ.G4);  
				Исключение
				КонецПопытки;	
			//	КонецЕсли;    
			//КонецЕсли;      		
			Попытка	
				rsMain.Fields.Item("TAB1_A4").Value  =  СокрЛП(СтрокаТЧ.G4S);  //Ед изм
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A41").Value =  СокрЛП(СтрокаТЧ.G105_2S);  //Код ед изм
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A5").Value = СокрЛП(СтрокаТЧ.G5);
			Исключение
			КонецПопытки;
			Попытка
				//rsMain.Fields.Item("TAB1_A6").Value = СокрЛП(СтрокаТЧ.G6);  
				rsMain.Fields.Item("TAB1_A6").Value = Формат(СтрокаТЧ.G6,"ЧДЦ=2; ЧГ=0"); //*** 160412 Е.Г. СокрЛП(СтрокаТЧ.G6);   //Корректировки
			Исключение
			КонецПопытки;
			Попытка															//Корректировки
				rsMain.Fields.Item("TAB1_A7").Value = СокрЛП(СтрокаТЧ.G7);
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A8").Value = СокрЛП(СтрокаТЧ.G8);  
			Исключение
			КонецПопытки;
			rsMain.Fields.Item("TAB1_A01").Value = СокрЛП(СтрокаТЧ.G001);
			Попытка
	        	rsMain.Fields.Item("TAB1_A011").Value = СокрЛП(СтрокаТЧ.G008);
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A013").Value = СокрЛП(СтрокаТЧ.G010);
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A012").Value = СокрЛП(СтрокаТЧ.G009);
			Исключение
			КонецПопытки;	
	                     					
			//Если ЗначениеЗаполнено(СтрокаТЧ.G9) Тогда
			//	ИтогОснСтавкаДод2 = ИтогОснСтавкаДод2 +СокрЛП(СтрокаТЧ.G9);
			//КонецЕсли;
				
			rsMain.Post(); 		
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;    		
		КонецЦикла;
		////-----------------------------------------------------     
		//Если (НоваяНН) И (НЕ G111Есть) И (ИтогНулеваяСтавкаДод2 <> 0 ) И (ПроверкаНовойФормыНН())Тогда
		//	Возврат Ложь;
		//КонецЕсли; 
	
		rsMain=Doc.DataSets() ;  
		rsMain.Edit();             
		rsMain.Append();
		rsMain.Post();			

		Попытка
			rsMain.Fields.Item("A1_9").Value  =  СокрЛП(ПоляРК.R01G9);   //Ставка 20%
			rsMain.Fields.Item("A2_9").Value  =  СокрЛП(ПоляРК.R02G9);
		Исключение
		КонецПопытки;	
		//*** 160426
		//Попытка
		//	rsMain.Fields.Item("A1_91").Value  =  СокрЛП(ПоляРК.R01G111);   //Ставка 7%
		//	rsMain.Fields.Item("A2_91").Value  =  СокрЛП(ПоляРК.R02G111);
		//Исключение
		//КонецПопытки;
		
		Ставка20 = ПоляРК.R02G9;
		//*** 160426 Ставка7 = ПоляРК.R02G111;
		Попытка
			rsMain.Fields.Item("A2_92").Value  = Ставка20; //*** 160426 +Ставка7;
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A1_10").Value  =  СокрЛП(ПоляРК.R007G03);   //Ставки 0%   902
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("A1_101").Value  =  СокрЛП(ПоляРК.R006G03);      //   901
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("A1_11").Value  =  СокрЛП(ПоляРК.R01G11);      //    903
		Исключение
		КонецПопытки;
		
		rsMain.Post();
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save(1);
		Doc.Close();
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Процедура Формирование_Запит(App,  Документ,  Бланк,  PDate,  ИД) 	
	
	Doc  =  App.OpenOrCreateByExDocID(Бланк, 0, PDate,  , ИД, 0);					
	rsMain  =  Doc.DataSets(); 
	rsMain.Edit();
	rsMain.Fields.Item("Rep_DATE").Value   =  ТекущаяДата();  // Дата запроса 	
	rsMain.Post();   
	
	НомерБезПрефикса  =  ПолучитьНомерБезНулей(Документ);
	
	rsMain  =  Doc.DataSets("TAB1");
	rsMain.Fields.Item("TAB1_A1").Value = 1; 
	
	Попытка 
		НомерДокумента  =  СокрЛП(НомерБезПрефикса);   // МОжет не быть такой функции в старых конфигурациях 
	Исключение 
		НомерДок  =  НомерБезПрефикса; 
	КонецПопытки; 
	
	//Проверка на символ "/" 		
	Если Найти(НомерДокумента,  "/")  =  0 Тогда 
		НомерДок  =  НомерДокумента; 
		Филия  =  0; 
	Иначе 
		
		НомерДок  =  Лев(НомерДокумента,  Найти(НомерДокумента, "/")-1); 
		Филия   =  Прав(НомерДокумента,  СтрДлина(НомерДокумента)- НАйти(НомерДокумента,  "/")); 
	КонецЕсли;   		
	
	Попытка 
		НомерДок  =  Число(НомерДок); 
	Исключение 
		НомерДок  =  НомерДок; 
	КонецПопытки; 
	
	rsMain.Fields.Item("TAB1_A21").Value = НомерДок;  
	Если Филия <>0 Тогда 
		rsMain.Fields.Item("TAB1_A23").Value = Филия; 
	КонецЕсли; 
	
	rsMain.Fields.Item("TAB1_A3").Value = Документ.Дата;

	//Если 
	//Документ.ВидДокумента  =   Перечисление.ВидыДокументовКнигиПриобретения.НалоговаяНакладная Тогда 
	//	rsMain.Fields.Item("TAB1_A4").Value = "ПН";
	//ИначеЕсли 
	//Документ.ВидДокумента   =  Перечисление.ВидыДокументовКнигиПриобретения.РасчетКорректировки Тогда			
	//	rsMain.Fields.Item("TAB1_A4").Value = "РК";     			
	//КонецЕсли; 
	
	rsMain.Fields.Item("TAB1_A4").Value = "ПН";     
	rsMain.Fields.Item("TAB1_A5").Value = СокрЛП(Документ.Контрагент.ИНН); // ИНН Контрагента  		
	rsMain.Post();    			
	Doc.Save(1);  
	Doc.Close();
	
Конецпроцедуры
//-----------------------------------------------------------------------------------------------
Процедура Формирование_1ПВМес(App,  Документ,  Бланк,  PDate,  ИД)
	
	Doc   =  App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0);   
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post();  	
	
	rsMain.Fields.Item("A1010").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетПоТрудуМес.П1010_1;
	
	//rsMain.Fields.Item(СП.A1010).Value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетПоТрудуМес.П1010_1;
	
	//Если Документ.Области.П1010_1.Значение<>0 Тогда rsMain.Fields.Item("A1010").value =  Документ.Области.П1010_1.Значение; КонецЕсли; 
	//Если Документ.П1010_1.Значение<>0 Тогда rsMain.Fields.Item("A1010").value =  Документ.П1010_1.Значение; КонецЕсли; 
	//Если мОтчетПоТруду.Области.П1010_1.Значение<>0 Тогда rsMain.Fields.Item("A1010").value =  мОтчетПоТруду.Области.П1010_1.Значение; КонецЕсли; 
	//rsMain.Fields.Item("A1010").value = ?(ЗначениеЗаполнено(мОтчетПоТруду.Области.П1010_1.Значение),  мОтчетПоТруду.Области.П1010_1.Значение,  "");
	
	
	//rsMain.Fields.Item("B1010").Value = Документ.П1010_2;
	
	//rsMain.Fields.Item("A1010").Value = СокрЛП(Документ.П1010_1);
	//rsMain.Fields.Item("B1010").Value = СокрЛП(Документ.П1010_2);
	
	//rsMain.Fields.Item("A1010").Value = мОтчетПоТруду.Области.П1010_1.Значение;
	//rsMain.Fields.Item("B1010").Value = мОтчетПоТруду.Области.П1010_2.Значение;  
	
	rsMain.Post(); 
	Doc.Save(1);
	Doc.Close();
	
КонецПроцедуры

Процедура Формирование_1ПВКв(App,  Документ,  Бланк,  PDate,  ИД)
	
	Doc   =  App.OpenOrCreateByExDocID(Бланк, 10, PDate, , ИД, 0);   
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post();  
		
	Doc.Save(1);
	Doc.Close();
	
КонецПроцедуры

Процедура Формирование_РНН(App, Документ,  Бланк,  PDate,  ИД, ПорцияРНН, ТипРНН)
	
	Doc   =  App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0);   
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post();
	
	rsMain.Fields.Item("HNP").Value  = ПорцияРНН;
	rsMain.Fields.Item("RSTTYPE").Value  = ТипРНН;
	rsMain.Fields.Item("HZ").Value   = ?(ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН.HZ), "1", "");
	rsMain.Fields.Item("HZN").Value  = ?(ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН.HZN), "1", "");
	rsMain.Fields.Item("HKV").Value  = ?(ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН.HKV), "1", "");
	
	Попытка   //запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
		НалоговыйДокументОбъект  =  Документ.ПолучитьОбъект();
		СтруктураПараметров      =  НалоговыйДокументОбъект.ПечатьДокумента(Истина);
		СтруктураДанныеТЧ        =  СтруктураПараметров.НалоговыйДокумент.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
	Исключение
		//Предупреждение(НСТР("ru  =  'Заполнение по данным документа невозможно в данной версии конфигурации. Необходимо обновить конфигурацию!'; uk  =  'Заповнення даними документа неможливе на поточній версії конфигурації. Необхідно оновити конфігурацію!'"));
		Возврат;
	КонецПопытки;
	
	rsMain  =  Doc.DataSets("TAB1");
	КоличествоСтрок  =  СтруктураДанныеТЧ.Количество();
	Счетчик  =  0;   		
	Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл 
		rsMain.Edit();  
		Сообщить(СтрокаТЧ.G1);
		
		rsMain.Post();  		
		Счетчик  =  Счетчик + 1; 
		Если  Счетчик <> КоличествоСтрок Тогда 
			rsMain.Append();  
		КонецЕсли;		
	КонецЦикла;
	
	Doc.Save(1);
	Doc.Close();
	
КонецПроцедуры

Процедура Формирование_БалансДСС(App,  Документ,  БланкДСС,  PDate,  ИД)
	
	Doc  =  App.OpenOrCreateByExDocID(БланкДСС,  ОпределитьКодПериода(Документ), PDate, ,  ИД, 0); 
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post();
	
	Если БланкДСС = "S0100111" Тогда
		rsMain.Fields.Item("N3").Value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ССЧ,  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ССЧ,  "");
		rsMain.Fields.Item("N4").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоПСБУ = "v",  "1",  "");
		rsMain.Fields.Item("N5").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоМСФО = "v",  "1",  "");
		
		rsMain.Fields.Item("A1000").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10003;
		rsMain.Fields.Item("A1001").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10013;
		rsMain.Fields.Item("A1002").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10023<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10023,  "");
		rsMain.Fields.Item("A1005").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10053;
		rsMain.Fields.Item("A1010").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10103;
		rsMain.Fields.Item("A1011").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10113;
		rsMain.Fields.Item("A1012").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10123<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10123,  "");
		rsMain.Fields.Item("A1015").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10153;
		rsMain.Fields.Item("A1016").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10163;
		rsMain.Fields.Item("A1017").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10173<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10173,  "");
		rsMain.Fields.Item("A1020").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10203;
		rsMain.Fields.Item("A1021").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10213;
		rsMain.Fields.Item("A1022").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10223<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10223,  "");
		rsMain.Fields.Item("A1030").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10303;
		rsMain.Fields.Item("A1035").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10353;
		rsMain.Fields.Item("A1040").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10403;
		rsMain.Fields.Item("A1045").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10453;
		rsMain.Fields.Item("A1050").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10503;
		rsMain.Fields.Item("A1060").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10603;
		rsMain.Fields.Item("A1065").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10653;
		rsMain.Fields.Item("A1090").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10903;
		rsMain.Fields.Item("A1095").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10953;
		rsMain.Fields.Item("A1100").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11003;
		rsMain.Fields.Item("A1101").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11013;
		rsMain.Fields.Item("A1102").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11023;
		rsMain.Fields.Item("A1103").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11033;
		rsMain.Fields.Item("A1104").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11043;
		rsMain.Fields.Item("A1110").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11103;
		rsMain.Fields.Item("A1115").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11153;
		rsMain.Fields.Item("A1120").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11203;
		rsMain.Fields.Item("A1125").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11253;
		rsMain.Fields.Item("A1130").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11303;
		rsMain.Fields.Item("A1135").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11353;
		rsMain.Fields.Item("A1136").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11363;
		rsMain.Fields.Item("A1140").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11403;
		rsMain.Fields.Item("A1145").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11453;
		rsMain.Fields.Item("A1155").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11553;
		rsMain.Fields.Item("A1160").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11603;
		rsMain.Fields.Item("A1165").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11653;
		rsMain.Fields.Item("A1166").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11663;
		rsMain.Fields.Item("A1167").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11673;
		rsMain.Fields.Item("A1170").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11703;
		rsMain.Fields.Item("A1180").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11803;
		rsMain.Fields.Item("A1181").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11813;
		rsMain.Fields.Item("A1182").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11823;
		rsMain.Fields.Item("A1183").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11833;
		rsMain.Fields.Item("A1184").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11843;
		rsMain.Fields.Item("A1190").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11903;
		rsMain.Fields.Item("A1195").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11953;
		rsMain.Fields.Item("A1200").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П12003;
		rsMain.Fields.Item("A1300").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П13003;
		rsMain.Fields.Item("A1400").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14003;
		rsMain.Fields.Item("A1405").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14053;
		rsMain.Fields.Item("A1410").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14103;
		rsMain.Fields.Item("A1411").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14113;
		rsMain.Fields.Item("A1412").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14123;
		rsMain.Fields.Item("A1415").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14153;
		rsMain.Fields.Item("A1420").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14203;
		rsMain.Fields.Item("A1415").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14253<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14253,  "");
		rsMain.Fields.Item("A1425").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14303<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14303,  "");
		rsMain.Fields.Item("A1430").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14353;
		rsMain.Fields.Item("A1435").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14953;
		rsMain.Fields.Item("A1495").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15003;
		rsMain.Fields.Item("A1500").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15053;
		rsMain.Fields.Item("A1505").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15103;
		rsMain.Fields.Item("A1510").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15153;
		rsMain.Fields.Item("A1515").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15203;
		rsMain.Fields.Item("A1520").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15213;
		rsMain.Fields.Item("A1521").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15253;
		rsMain.Fields.Item("A1525").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15253;
		rsMain.Fields.Item("A1526").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15263;
		rsMain.Fields.Item("A1530").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15303;
		rsMain.Fields.Item("A1531").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15313;
		rsMain.Fields.Item("A1532").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15323;
		rsMain.Fields.Item("A1533").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15333;
		rsMain.Fields.Item("A1534").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15343;
		rsMain.Fields.Item("A1535").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15353;
		rsMain.Fields.Item("A1540").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15403;
		rsMain.Fields.Item("A1545").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15453;
		rsMain.Fields.Item("A1595").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15953;
		rsMain.Fields.Item("A1600").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16003;
		rsMain.Fields.Item("A1605").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16053;
		rsMain.Fields.Item("A1610").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16103;
		rsMain.Fields.Item("A1615").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16153;
		rsMain.Fields.Item("A1620").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16203;
		rsMain.Fields.Item("A1621").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16213;
		rsMain.Fields.Item("A1625").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16253;
		rsMain.Fields.Item("A1630").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16303;
		rsMain.Fields.Item("A1635").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16353;
		rsMain.Fields.Item("A1640").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16403;
		rsMain.Fields.Item("A1645").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16453;
		rsMain.Fields.Item("A1650").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16503;
		rsMain.Fields.Item("A1660").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16603;
		rsMain.Fields.Item("A1665").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16653;
		rsMain.Fields.Item("A1670").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16703;
		rsMain.Fields.Item("A1690").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16903;
		rsMain.Fields.Item("A1695").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16953;
		rsMain.Fields.Item("A1700").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П17003;
		rsMain.Fields.Item("A1800").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П18003;
		rsMain.Fields.Item("A1900").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П19003;
		
		rsMain.Fields.Item("B1000").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10004;
		rsMain.Fields.Item("B1001").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10014;
		rsMain.Fields.Item("B1002").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10024<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10024,  "");
		rsMain.Fields.Item("B1005").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10054;
		rsMain.Fields.Item("B1010").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10104;
		rsMain.Fields.Item("B1011").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10114;
		rsMain.Fields.Item("B1012").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10124<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10124,  "");
		rsMain.Fields.Item("B1015").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10154;
		rsMain.Fields.Item("B1016").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10164;
		rsMain.Fields.Item("B1017").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10174<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10174,  "");
		rsMain.Fields.Item("B1020").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10204;
		rsMain.Fields.Item("B1021").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10214;
		rsMain.Fields.Item("B1022").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10224<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10224,  "");
		rsMain.Fields.Item("B1030").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10304;
		rsMain.Fields.Item("B1035").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10354;
		rsMain.Fields.Item("B1040").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10404;
		rsMain.Fields.Item("B1045").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10454;
		rsMain.Fields.Item("B1050").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10504;
		rsMain.Fields.Item("B1060").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10604;
		rsMain.Fields.Item("B1065").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10654;
		rsMain.Fields.Item("B1090").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10904;
		rsMain.Fields.Item("B1095").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10954;
		rsMain.Fields.Item("B1100").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11004;
		rsMain.Fields.Item("B1101").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11014;
		rsMain.Fields.Item("B1102").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11024;
		rsMain.Fields.Item("B1103").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11034;
		rsMain.Fields.Item("B1104").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11044;
		rsMain.Fields.Item("B1110").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11104;
		rsMain.Fields.Item("B1115").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11154;
		rsMain.Fields.Item("B1120").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11204;
		rsMain.Fields.Item("B1125").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11254;
		rsMain.Fields.Item("B1130").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11304;
		rsMain.Fields.Item("B1135").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11354;
		rsMain.Fields.Item("B1136").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11364;
		rsMain.Fields.Item("B1140").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11404;
		rsMain.Fields.Item("B1145").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11454;
		rsMain.Fields.Item("B1155").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11554;
		rsMain.Fields.Item("B1160").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11604;
		rsMain.Fields.Item("B1165").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11654;
		rsMain.Fields.Item("B1166").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11664;
		rsMain.Fields.Item("B1167").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11674;
		rsMain.Fields.Item("B1170").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11704;
		rsMain.Fields.Item("B1180").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11804;
		rsMain.Fields.Item("B1181").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11814;
		rsMain.Fields.Item("B1182").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11824;
		rsMain.Fields.Item("B1183").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11834;
		rsMain.Fields.Item("B1184").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11844;
		rsMain.Fields.Item("B1190").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11904;
		rsMain.Fields.Item("B1195").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11954;
		rsMain.Fields.Item("B1200").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П12004;
		rsMain.Fields.Item("B1300").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П13004;
		rsMain.Fields.Item("B1400").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14004;
		rsMain.Fields.Item("B1405").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14054;
		rsMain.Fields.Item("B1410").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14104;
		rsMain.Fields.Item("B1411").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14114;
		rsMain.Fields.Item("B1412").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14124;
		rsMain.Fields.Item("B1415").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14154;
		rsMain.Fields.Item("B1420").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14204;
		rsMain.Fields.Item("B1415").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14254<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14254,  "");
		rsMain.Fields.Item("B1425").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14304<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14304,  "");
		rsMain.Fields.Item("B1430").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14354;
		rsMain.Fields.Item("B1435").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14954;
		rsMain.Fields.Item("B1495").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15004;
		rsMain.Fields.Item("B1500").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15054;
		rsMain.Fields.Item("B1505").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15104;
		rsMain.Fields.Item("B1510").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15154;
		rsMain.Fields.Item("B1515").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15204;
		rsMain.Fields.Item("B1520").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15214;
		rsMain.Fields.Item("B1521").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15254;
		rsMain.Fields.Item("B1525").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15254;
		rsMain.Fields.Item("B1526").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15264;
		rsMain.Fields.Item("B1530").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15304;
		rsMain.Fields.Item("B1531").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15314;
		rsMain.Fields.Item("B1532").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15324;
		rsMain.Fields.Item("B1533").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15334;
		rsMain.Fields.Item("B1534").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15344;
		rsMain.Fields.Item("B1535").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15354;
		rsMain.Fields.Item("B1540").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15404;
		rsMain.Fields.Item("B1545").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15454;
		rsMain.Fields.Item("B1595").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15954;
		rsMain.Fields.Item("B1600").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16004;
		rsMain.Fields.Item("B1605").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16054;
		rsMain.Fields.Item("B1610").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16104;
		rsMain.Fields.Item("B1615").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16154;
		rsMain.Fields.Item("B1620").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16204;
		rsMain.Fields.Item("B1621").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16214;
		rsMain.Fields.Item("B1625").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16254;
		rsMain.Fields.Item("B1630").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16304;
		rsMain.Fields.Item("B1635").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16354;
		rsMain.Fields.Item("B1640").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16404;
		rsMain.Fields.Item("B1645").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16454;
		rsMain.Fields.Item("B1650").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16504;
		rsMain.Fields.Item("B1660").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16604;
		rsMain.Fields.Item("B1665").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16654;
		rsMain.Fields.Item("B1670").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16704;
		rsMain.Fields.Item("B1690").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16904;
		rsMain.Fields.Item("B1695").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16954;
		rsMain.Fields.Item("B1700").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П17004;
		rsMain.Fields.Item("B1800").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П18004;
		rsMain.Fields.Item("B1900").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П19004;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргБухгалтер;
		
	ИначеЕсли БланкДСС = "S0100112" Тогда 	
		rsMain.Fields.Item("N3").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ССЧ,  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ССЧ,  "");
		rsMain.Fields.Item("N4").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоПСБУ = "v",  "1",  "");
		rsMain.Fields.Item("N5").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоМСФО = "v",  "1",  "");
		
		rsMain.Fields.Item("A1000").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10003;
		rsMain.Fields.Item("A1001").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10013;
		rsMain.Fields.Item("A1002").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10023<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10023,  "");
		rsMain.Fields.Item("A1005").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10053;
		rsMain.Fields.Item("A1010").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10103;
		rsMain.Fields.Item("A1011").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10113;
		rsMain.Fields.Item("A1012").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10123<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10123,  "");
		rsMain.Fields.Item("A1015").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10153;
		rsMain.Fields.Item("A1016").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10163;
		rsMain.Fields.Item("A1017").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10173<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10173,  "");
		rsMain.Fields.Item("A1020").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10203;
		rsMain.Fields.Item("A1021").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10213;
		rsMain.Fields.Item("A1022").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10223<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10223,  "");
		rsMain.Fields.Item("A1030").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10303;
		rsMain.Fields.Item("A1035").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10353;
		rsMain.Fields.Item("A1040").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10403;
		rsMain.Fields.Item("A1045").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10453;
		rsMain.Fields.Item("A1050").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10503;
		rsMain.Fields.Item("A1060").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10603;
		rsMain.Fields.Item("A1065").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10653;
		rsMain.Fields.Item("A1090").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10903;
		rsMain.Fields.Item("A1095").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10953;
		rsMain.Fields.Item("A1100").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11003;
		rsMain.Fields.Item("A1101").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11013;
		rsMain.Fields.Item("A1102").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11023;
		rsMain.Fields.Item("A1103").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11033;
		rsMain.Fields.Item("A1104").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11043;
		rsMain.Fields.Item("A1110").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11103;
		rsMain.Fields.Item("A1115").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11153;
		rsMain.Fields.Item("A1120").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11203;
		rsMain.Fields.Item("A1125").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11253;
		rsMain.Fields.Item("A1130").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11303;
		rsMain.Fields.Item("A1135").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11353;
		rsMain.Fields.Item("A1136").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11363;
		rsMain.Fields.Item("A1140").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11403;
		rsMain.Fields.Item("A1145").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11453;
		rsMain.Fields.Item("A1155").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11553;
		rsMain.Fields.Item("A1160").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11603;
		rsMain.Fields.Item("A1165").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11653;
		rsMain.Fields.Item("A1166").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11663;
		rsMain.Fields.Item("A1167").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11673;
		rsMain.Fields.Item("A1170").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11703;
		rsMain.Fields.Item("A1180").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11803;
		rsMain.Fields.Item("A1181").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11813;
		rsMain.Fields.Item("A1182").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11823;
		rsMain.Fields.Item("A1183").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11833;
		rsMain.Fields.Item("A1184").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11843;
		rsMain.Fields.Item("A1190").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11903;
		rsMain.Fields.Item("A1195").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11953;
		rsMain.Fields.Item("A1200").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П12003;
		rsMain.Fields.Item("A1300").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П13003;
		rsMain.Fields.Item("A1400").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14003;
		//rsMain.Fields.Item("A1401").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14013;
		rsMain.Fields.Item("A1405").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14053;
		rsMain.Fields.Item("A1410").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14103;
		rsMain.Fields.Item("A1411").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14113;
		rsMain.Fields.Item("A1412").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14123;
		rsMain.Fields.Item("A1415").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14153;
		rsMain.Fields.Item("A1420").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14203;
		rsMain.Fields.Item("A1415").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14253<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14253,  "");
		rsMain.Fields.Item("A1425").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14303<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14303,  "");
		rsMain.Fields.Item("A1430").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14353;
		rsMain.Fields.Item("A1435").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14953;
		rsMain.Fields.Item("A1495").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15003;
		rsMain.Fields.Item("A1500").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15053;
		rsMain.Fields.Item("A1505").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15103;
		rsMain.Fields.Item("A1510").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15153;
		rsMain.Fields.Item("A1515").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15203;
		rsMain.Fields.Item("A1520").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15213;
		rsMain.Fields.Item("A1521").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15253;
		rsMain.Fields.Item("A1525").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15253;
		rsMain.Fields.Item("A1526").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15263;
		rsMain.Fields.Item("A1530").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15303;
		rsMain.Fields.Item("A1531").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15313;
		rsMain.Fields.Item("A1532").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15323;
		rsMain.Fields.Item("A1533").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15333;
		rsMain.Fields.Item("A1534").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15343;
		rsMain.Fields.Item("A1535").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15353;
		rsMain.Fields.Item("A1540").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15403;
		rsMain.Fields.Item("A1545").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15453;
		rsMain.Fields.Item("A1595").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15953;
		rsMain.Fields.Item("A1600").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16003;
		rsMain.Fields.Item("A1605").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16053;
		rsMain.Fields.Item("A1610").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16103;
		rsMain.Fields.Item("A1615").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16153;
		rsMain.Fields.Item("A1620").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16203;
		rsMain.Fields.Item("A1621").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16213;
		rsMain.Fields.Item("A1625").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16253;
		rsMain.Fields.Item("A1630").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16303;
		rsMain.Fields.Item("A1635").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16353;
		rsMain.Fields.Item("A1640").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16403;
		rsMain.Fields.Item("A1645").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16453;
		rsMain.Fields.Item("A1650").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16503;
		rsMain.Fields.Item("A1660").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16603;
		rsMain.Fields.Item("A1665").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16653;
		rsMain.Fields.Item("A1670").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16703;
		rsMain.Fields.Item("A1690").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16903;
		rsMain.Fields.Item("A1695").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16953;
		rsMain.Fields.Item("A1700").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П17003;
		rsMain.Fields.Item("A1800").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П18003;
		rsMain.Fields.Item("A1900").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П19003;
		
		rsMain.Fields.Item("B1000").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10004;
		rsMain.Fields.Item("B1001").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10014;
		rsMain.Fields.Item("B1002").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10024<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10024,  "");
		rsMain.Fields.Item("B1005").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10054;
		rsMain.Fields.Item("B1010").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10104;
		rsMain.Fields.Item("B1011").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10114;
		rsMain.Fields.Item("B1012").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10124<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10124,  "");
		rsMain.Fields.Item("B1015").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10154;
		rsMain.Fields.Item("B1016").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10164;
		rsMain.Fields.Item("B1017").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10174<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10174,  "");
		rsMain.Fields.Item("B1020").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10204;
		rsMain.Fields.Item("B1021").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10214;
		rsMain.Fields.Item("B1022").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10224<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10224,  "");
		rsMain.Fields.Item("B1030").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10304;
		rsMain.Fields.Item("B1035").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10354;
		rsMain.Fields.Item("B1040").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10404;
		rsMain.Fields.Item("B1045").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10454;
		rsMain.Fields.Item("B1050").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10504;
		rsMain.Fields.Item("B1060").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10604;
		rsMain.Fields.Item("B1065").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10654;
		rsMain.Fields.Item("B1090").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10904;
		rsMain.Fields.Item("B1095").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10954;
		rsMain.Fields.Item("B1100").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11004;
		rsMain.Fields.Item("B1101").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11014;
		rsMain.Fields.Item("B1102").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11024;
		rsMain.Fields.Item("B1103").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11034;
		rsMain.Fields.Item("B1104").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11044;
		rsMain.Fields.Item("B1110").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11104;
		rsMain.Fields.Item("B1115").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11154;
		rsMain.Fields.Item("B1120").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11204;
		rsMain.Fields.Item("B1125").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11254;
		rsMain.Fields.Item("B1130").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11304;
		rsMain.Fields.Item("B1135").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11354;
		rsMain.Fields.Item("B1136").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11364;
		rsMain.Fields.Item("B1140").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11404;
		rsMain.Fields.Item("B1145").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11454;
		rsMain.Fields.Item("B1155").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11554;
		rsMain.Fields.Item("B1160").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11604;
		rsMain.Fields.Item("B1165").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11654;
		rsMain.Fields.Item("B1166").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11664;
		rsMain.Fields.Item("B1167").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11674;
		rsMain.Fields.Item("B1170").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11704;
		rsMain.Fields.Item("B1180").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11804;
		rsMain.Fields.Item("B1181").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11814;
		rsMain.Fields.Item("B1182").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11824;
		rsMain.Fields.Item("B1183").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11834;
		rsMain.Fields.Item("B1184").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11844;
		rsMain.Fields.Item("B1190").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11904;
		rsMain.Fields.Item("B1195").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11954;
		rsMain.Fields.Item("B1200").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П12004;
		rsMain.Fields.Item("B1300").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П13004;
		rsMain.Fields.Item("B1400").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14004;
		//rsMain.Fields.Item("B1401").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14014;  
		rsMain.Fields.Item("B1405").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14054;
		rsMain.Fields.Item("B1410").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14104;
		rsMain.Fields.Item("B1411").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14114;
		rsMain.Fields.Item("B1412").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14124;
		rsMain.Fields.Item("B1415").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14154;
		rsMain.Fields.Item("B1420").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14204;
		rsMain.Fields.Item("B1415").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14254<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14254,  "");
		rsMain.Fields.Item("B1425").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14304<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14304,  "");
		rsMain.Fields.Item("B1430").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14354;
		rsMain.Fields.Item("B1435").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14954;
		rsMain.Fields.Item("B1495").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15004;
		rsMain.Fields.Item("B1500").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15054;
		rsMain.Fields.Item("B1505").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15104;
		rsMain.Fields.Item("B1510").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15154;
		rsMain.Fields.Item("B1515").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15204;
		rsMain.Fields.Item("B1520").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15214;
		rsMain.Fields.Item("B1521").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15254;
		rsMain.Fields.Item("B1525").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15254;
		rsMain.Fields.Item("B1526").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15264;
		rsMain.Fields.Item("B1530").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15304;
		rsMain.Fields.Item("B1531").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15314;
		rsMain.Fields.Item("B1532").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15324;
		rsMain.Fields.Item("B1533").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15334;
		rsMain.Fields.Item("B1534").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15344;
		rsMain.Fields.Item("B1535").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15354;
		rsMain.Fields.Item("B1540").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15404;
		rsMain.Fields.Item("B1545").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15454;
		rsMain.Fields.Item("B1595").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15954;
		rsMain.Fields.Item("B1600").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16004;
		rsMain.Fields.Item("B1605").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16054;
		rsMain.Fields.Item("B1610").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16104;
		rsMain.Fields.Item("B1615").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16154;
		rsMain.Fields.Item("B1620").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16204;
		rsMain.Fields.Item("B1621").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16214;
		rsMain.Fields.Item("B1625").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16254;
		rsMain.Fields.Item("B1630").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16304;
		rsMain.Fields.Item("B1635").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16354;
		rsMain.Fields.Item("B1640").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16404;
		rsMain.Fields.Item("B1645").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16454;
		rsMain.Fields.Item("B1650").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16504;
		rsMain.Fields.Item("B1660").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16604;
		rsMain.Fields.Item("B1665").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16654;
		rsMain.Fields.Item("B1670").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16704;
		rsMain.Fields.Item("B1690").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16904;
		rsMain.Fields.Item("B1695").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16954;
		rsMain.Fields.Item("B1700").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П17004;
		rsMain.Fields.Item("B1800").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П18004;
		rsMain.Fields.Item("B1900").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П19004;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргБухгалтер;
		
	КонецЕсли;
	Doc.Save(1); 
	Doc.Close();
	
КонецПроцедуры

Процедура Формирование_БалансМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД)
	
	Попытка
	Doc  =  App.OpenOrCreateByExDocID(БланкМДЗ,  ОпределитьКодПериода(Документ), PDate, ,  ИД, 0); 
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post();
	
	Если БланкМДЗ = "J0900107" Тогда
		rsMain.Fields.Item("N1").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ССЧ;
		rsMain.Fields.Item("N2").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоПСБУ = "v",  "1",  "");
		rsMain.Fields.Item("N3").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоМСФО = "v",  "1",  "");
		rsMain.Fields.Item("A1000").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10003,  -3) /1000;
		rsMain.Fields.Item("A1001").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10013,  -3) /1000;
		rsMain.Fields.Item("A1002").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10023,  -3) /1000;
		rsMain.Fields.Item("A1005").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10053,  -3) /1000;
		rsMain.Fields.Item("A1010").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10103,  -3) /1000;
		rsMain.Fields.Item("A1011").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10113,  -3) /1000;
		rsMain.Fields.Item("A1012").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10123,  -3) /1000;
		rsMain.Fields.Item("A1015").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10153,  -3) /1000;
		rsMain.Fields.Item("A1016").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10163,  -3) /1000;
		rsMain.Fields.Item("A1017").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10173,  -3) /1000;
		rsMain.Fields.Item("A1020").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10203,  -3) /1000;
		rsMain.Fields.Item("A1021").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10213,  -3) /1000;
		rsMain.Fields.Item("A1022").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10223,  -3) /1000;
		rsMain.Fields.Item("A1030").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10303,  -3) /1000;
		rsMain.Fields.Item("A1035").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10353,  -3) /1000;
		rsMain.Fields.Item("A1040").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10403,  -3) /1000;
		rsMain.Fields.Item("A1045").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10453,  -3) /1000;
		rsMain.Fields.Item("A1050").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10503,  -3) /1000;
		rsMain.Fields.Item("A1060").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10603,  -3) /1000;
		rsMain.Fields.Item("A1065").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10653,  -3) /1000;
		rsMain.Fields.Item("A1090").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10903,  -3) /1000;
		rsMain.Fields.Item("A1095").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10953,  -3) /1000;
		rsMain.Fields.Item("A1100").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11003,  -3) /1000;
		rsMain.Fields.Item("A1101").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11013,  -3) /1000;
		rsMain.Fields.Item("A1102").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11023,  -3) /1000;
		rsMain.Fields.Item("A1103").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11033,  -3) /1000;
		rsMain.Fields.Item("A1104").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11043,  -3) /1000;
		rsMain.Fields.Item("A1110").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11103,  -3) /1000;
		rsMain.Fields.Item("A1115").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11153,  -3) /1000;
		rsMain.Fields.Item("A1120").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11203,  -3) /1000;
		rsMain.Fields.Item("A1125").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11253,  -3) /1000;
		rsMain.Fields.Item("A1130").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11303,  -3) /1000;
		rsMain.Fields.Item("A1135").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11353,  -3) /1000;
		rsMain.Fields.Item("A1136").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11363,  -3) /1000;
		rsMain.Fields.Item("A1140").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11403,  -3) /1000;
		rsMain.Fields.Item("A1145").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11453,  -3) /1000;
		rsMain.Fields.Item("A1155").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11553,  -3) /1000;
		rsMain.Fields.Item("A1160").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11603,  -3) /1000;
		rsMain.Fields.Item("A1165").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11653,  -3) /1000;
		rsMain.Fields.Item("A1166").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11663,  -3) /1000;
		rsMain.Fields.Item("A1167").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11673,  -3) /1000;
		rsMain.Fields.Item("A1170").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11703,  -3) /1000;
		rsMain.Fields.Item("A1180").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11803,  -3) /1000;
		rsMain.Fields.Item("A1181").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11813,  -3) /1000;
		rsMain.Fields.Item("A1182").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11823,  -3) /1000;
		rsMain.Fields.Item("A1183").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11833,  -3) /1000;
		rsMain.Fields.Item("A1184").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11843,  -3) /1000;
		rsMain.Fields.Item("A1190").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11903,  -3) /1000;
		rsMain.Fields.Item("A1195").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11953,  -3) /1000;
		rsMain.Fields.Item("A1200").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П12003,  -3) /1000;
		rsMain.Fields.Item("A1300").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П13003,  -3) /1000;
		rsMain.Fields.Item("A1400").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14003,  -3) /1000;
		rsMain.Fields.Item("A1405").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14053,  -3) /1000;
		rsMain.Fields.Item("A1410").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14103,  -3) /1000;
		rsMain.Fields.Item("A1411").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14113,  -3) /1000;
		rsMain.Fields.Item("A1412").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14123,  -3) /1000;
		rsMain.Fields.Item("A1415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14153,  -3) /1000;
		rsMain.Fields.Item("A1420").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14203,  -3) /1000;
		rsMain.Fields.Item("A1415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14253,  -3) /1000;
		rsMain.Fields.Item("A1425").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14303,  -3) /1000;
		rsMain.Fields.Item("A1430").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14353,  -3) /1000;
		rsMain.Fields.Item("A1435").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14953,  -3) /1000;
		rsMain.Fields.Item("A1495").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15003,  -3) /1000;
		rsMain.Fields.Item("A1500").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15053,  -3) /1000;
		rsMain.Fields.Item("A1505").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15103,  -3) /1000;
		rsMain.Fields.Item("A1510").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15153,  -3) /1000;
		rsMain.Fields.Item("A1515").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15203,  -3) /1000;
		rsMain.Fields.Item("A1520").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15213,  -3) /1000;
		rsMain.Fields.Item("A1521").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15253,  -3) /1000;
		rsMain.Fields.Item("A1525").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15253,  -3) /1000;
		rsMain.Fields.Item("A1526").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15263,  -3) /1000;
		rsMain.Fields.Item("A1530").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15303,  -3) /1000;
		rsMain.Fields.Item("A1531").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15313,  -3) /1000;
		rsMain.Fields.Item("A1532").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15323,  -3) /1000;
		rsMain.Fields.Item("A1533").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15333,  -3) /1000;
		rsMain.Fields.Item("A1534").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15343,  -3) /1000;
		rsMain.Fields.Item("A1535").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15353,  -3) /1000;
		rsMain.Fields.Item("A1540").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15403,  -3) /1000;
		rsMain.Fields.Item("A1545").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15453,  -3) /1000;
		rsMain.Fields.Item("A1595").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15953,  -3) /1000;
		rsMain.Fields.Item("A1600").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16003,  -3) /1000;
		rsMain.Fields.Item("A1605").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16053,  -3) /1000;
		rsMain.Fields.Item("A1610").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16103,  -3) /1000;
		rsMain.Fields.Item("A1615").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16153,  -3) /1000;
		rsMain.Fields.Item("A1620").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16203,  -3) /1000;
		rsMain.Fields.Item("A1621").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16213,  -3) /1000;
		rsMain.Fields.Item("A1625").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16253,  -3) /1000;
		rsMain.Fields.Item("A1630").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16303,  -3) /1000;
		rsMain.Fields.Item("A1635").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16353,  -3) /1000;
		rsMain.Fields.Item("A1640").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16403,  -3) /1000;
		rsMain.Fields.Item("A1645").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16453,  -3) /1000;
		rsMain.Fields.Item("A1650").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16503,  -3) /1000;
		rsMain.Fields.Item("A1660").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16603,  -3) /1000;
		rsMain.Fields.Item("A1665").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16653,  -3) /1000;
		rsMain.Fields.Item("A1670").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16703,  -3) /1000;
		rsMain.Fields.Item("A1690").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16903,  -3) /1000;
		rsMain.Fields.Item("A1695").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16953,  -3) /1000;
		rsMain.Fields.Item("A1700").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П17003,  -3) /1000;
		rsMain.Fields.Item("A1800").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П18003,  -3) /1000;
		rsMain.Fields.Item("A1900").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П19003,  -3) /1000;
		
		rsMain.Fields.Item("B1000").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10004,  -3) /1000;
		rsMain.Fields.Item("B1001").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10014,  -3) /1000;
		rsMain.Fields.Item("B1002").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10024,  -3) /1000;
		rsMain.Fields.Item("B1005").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10054,  -3) /1000;
		rsMain.Fields.Item("B1010").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10104,  -3) /1000;
		rsMain.Fields.Item("B1011").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10114,  -3) /1000;
		rsMain.Fields.Item("B1012").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10124,  -3) /1000;
		rsMain.Fields.Item("B1015").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10154,  -3) /1000;
		rsMain.Fields.Item("B1016").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10164,  -3) /1000;
		rsMain.Fields.Item("B1017").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10174,  -3) /1000;
		rsMain.Fields.Item("B1020").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10204,  -3) /1000;
		rsMain.Fields.Item("B1021").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10214,  -3) /1000;
		rsMain.Fields.Item("B1022").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10224,  -3) /1000;
		rsMain.Fields.Item("B1030").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10304,  -3) /1000;
		rsMain.Fields.Item("B1035").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10354,  -3) /1000;
		rsMain.Fields.Item("B1040").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10404,  -3) /1000;
		rsMain.Fields.Item("B1045").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10454,  -3) /1000;
		rsMain.Fields.Item("B1050").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10504,  -3) /1000;
		rsMain.Fields.Item("B1060").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10604,  -3) /1000;
		rsMain.Fields.Item("B1065").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10654,  -3) /1000;
		rsMain.Fields.Item("B1090").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10904,  -3) /1000;
		rsMain.Fields.Item("B1095").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10954,  -3) /1000;
		rsMain.Fields.Item("B1100").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11004,  -3) /1000;
		rsMain.Fields.Item("B1101").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11014,  -3) /1000;
		rsMain.Fields.Item("B1102").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11024,  -3) /1000;
		rsMain.Fields.Item("B1103").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11034,  -3) /1000;
		rsMain.Fields.Item("B1104").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11044,  -3) /1000;
		rsMain.Fields.Item("B1110").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11104,  -3) /1000;
		rsMain.Fields.Item("B1115").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11154,  -3) /1000;
		rsMain.Fields.Item("B1120").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11204,  -3) /1000;
		rsMain.Fields.Item("B1125").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11254,  -3) /1000;
		rsMain.Fields.Item("B1130").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11304,  -3) /1000;
		rsMain.Fields.Item("B1135").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11354,  -3) /1000;
		rsMain.Fields.Item("B1136").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11364,  -3) /1000;
		rsMain.Fields.Item("B1140").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11404,  -3) /1000;
		rsMain.Fields.Item("B1145").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11454,  -3) /1000;
		rsMain.Fields.Item("B1155").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11554,  -3) /1000;
		rsMain.Fields.Item("B1160").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11604,  -3) /1000;
		rsMain.Fields.Item("B1165").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11654,  -3) /1000;
		rsMain.Fields.Item("B1166").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11664,  -3) /1000;
		rsMain.Fields.Item("B1167").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11674,  -3) /1000;
		rsMain.Fields.Item("B1170").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11704,  -3) /1000;
		rsMain.Fields.Item("B1180").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11804,  -3) /1000;
		rsMain.Fields.Item("B1181").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11814,  -3) /1000;
		rsMain.Fields.Item("B1182").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11824,  -3) /1000;
		rsMain.Fields.Item("B1183").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11834,  -3) /1000;
		rsMain.Fields.Item("B1184").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11844,  -3) /1000;
		rsMain.Fields.Item("B1190").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11904,  -3) /1000;
		rsMain.Fields.Item("B1195").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11954,  -3) /1000;
		rsMain.Fields.Item("B1200").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П12004,  -3) /1000;
		rsMain.Fields.Item("B1300").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П13004,  -3) /1000;
		rsMain.Fields.Item("B1400").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14004,  -3) /1000;
		rsMain.Fields.Item("B1405").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14054,  -3) /1000;
		rsMain.Fields.Item("B1410").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14104,  -3) /1000;
		rsMain.Fields.Item("B1411").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14114,  -3) /1000;
		rsMain.Fields.Item("B1412").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14124,  -3) /1000;
		rsMain.Fields.Item("B1415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14154,  -3) /1000;
		rsMain.Fields.Item("B1420").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14204,  -3) /1000;
		rsMain.Fields.Item("B1415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14254,  -3) /1000;
		rsMain.Fields.Item("B1425").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14304,  -3) /1000;
		rsMain.Fields.Item("B1430").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14354,  -3) /1000;
		rsMain.Fields.Item("B1435").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14954,  -3) /1000;
		rsMain.Fields.Item("B1495").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15004,  -3) /1000;
		rsMain.Fields.Item("B1500").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15054,  -3) /1000;
		rsMain.Fields.Item("B1505").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15104,  -3) /1000;
		rsMain.Fields.Item("B1510").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15154,  -3) /1000;
		rsMain.Fields.Item("B1515").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15204,  -3) /1000;
		rsMain.Fields.Item("B1520").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15214,  -3) /1000;
		rsMain.Fields.Item("B1521").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15254,  -3) /1000;
		rsMain.Fields.Item("B1525").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15254,  -3) /1000;
		rsMain.Fields.Item("B1526").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15264,  -3) /1000;
		rsMain.Fields.Item("B1530").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15304,  -3) /1000;
		rsMain.Fields.Item("B1531").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15314,  -3) /1000;
		rsMain.Fields.Item("B1532").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15324,  -3) /1000;
		rsMain.Fields.Item("B1533").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15334,  -3) /1000;
		rsMain.Fields.Item("B1534").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15344,  -3) /1000;
		rsMain.Fields.Item("B1535").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15354,  -3) /1000;
		rsMain.Fields.Item("B1540").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15404,  -3) /1000;
		rsMain.Fields.Item("B1545").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15454,  -3) /1000;
		rsMain.Fields.Item("B1595").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15954,  -3) /1000;
		rsMain.Fields.Item("B1600").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16004,  -3) /1000;
		rsMain.Fields.Item("B1605").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16054,  -3) /1000;
		rsMain.Fields.Item("B1610").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16104,  -3) /1000;
		rsMain.Fields.Item("B1615").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16154,  -3) /1000;
		rsMain.Fields.Item("B1620").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16204,  -3) /1000;
		rsMain.Fields.Item("B1621").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16214,  -3) /1000;
		rsMain.Fields.Item("B1625").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16254,  -3) /1000;
		rsMain.Fields.Item("B1630").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16304,  -3) /1000;
		rsMain.Fields.Item("B1635").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16354,  -3) /1000;
		rsMain.Fields.Item("B1640").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16404,  -3) /1000;
		rsMain.Fields.Item("B1645").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16454,  -3) /1000;
		rsMain.Fields.Item("B1650").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16504,  -3) /1000;
		rsMain.Fields.Item("B1660").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16604,  -3) /1000;
		rsMain.Fields.Item("B1665").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16654,  -3) /1000;
		rsMain.Fields.Item("B1670").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16704,  -3) /1000;
		rsMain.Fields.Item("B1690").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16904,  -3) /1000;
		rsMain.Fields.Item("B1695").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16954,  -3) /1000;
		rsMain.Fields.Item("B1700").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П17004,  -3) /1000;
		rsMain.Fields.Item("B1800").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П18004,  -3) /1000;
		rsMain.Fields.Item("B1900").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П19004,  -3) /1000;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргБухгалтер;
		
	ИначеЕсли БланкМДЗ = "J0900108" Тогда
		rsMain.Fields.Item("N1").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ССЧ;
		rsMain.Fields.Item("N2").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоПСБУ = "v",  "1",  "");
		rsMain.Fields.Item("N3").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоМСФО = "v",  "1",  "");
		rsMain.Fields.Item("A1000").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10003,  -3) /1000;
		rsMain.Fields.Item("A1001").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10013,  -3) /1000;
		rsMain.Fields.Item("A1002").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10023,  -3) /1000;
		rsMain.Fields.Item("A1005").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10053,  -3) /1000;
		rsMain.Fields.Item("A1010").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10103,  -3) /1000;
		rsMain.Fields.Item("A1011").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10113,  -3) /1000;
		rsMain.Fields.Item("A1012").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10123,  -3) /1000;
		rsMain.Fields.Item("A1015").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10153,  -3) /1000;
		rsMain.Fields.Item("A1016").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10163,  -3) /1000;
		rsMain.Fields.Item("A1017").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10173,  -3) /1000;
		rsMain.Fields.Item("A1020").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10203,  -3) /1000;
		rsMain.Fields.Item("A1021").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10213,  -3) /1000;
		rsMain.Fields.Item("A1022").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10223,  -3) /1000;
		rsMain.Fields.Item("A1030").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10303,  -3) /1000;
		rsMain.Fields.Item("A1035").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10353,  -3) /1000;
		rsMain.Fields.Item("A1040").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10403,  -3) /1000;
		rsMain.Fields.Item("A1045").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10453,  -3) /1000;
		rsMain.Fields.Item("A1050").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10503,  -3) /1000;
		rsMain.Fields.Item("A1060").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10603,  -3) /1000;
		rsMain.Fields.Item("A1065").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10653,  -3) /1000;
		rsMain.Fields.Item("A1090").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10903,  -3) /1000;
		rsMain.Fields.Item("A1095").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10953,  -3) /1000;
		rsMain.Fields.Item("A1100").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11003,  -3) /1000;
		rsMain.Fields.Item("A1101").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11013,  -3) /1000;
		rsMain.Fields.Item("A1102").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11023,  -3) /1000;
		rsMain.Fields.Item("A1103").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11033,  -3) /1000;
		rsMain.Fields.Item("A1104").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11043,  -3) /1000;
		rsMain.Fields.Item("A1110").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11103,  -3) /1000;
		rsMain.Fields.Item("A1115").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11153,  -3) /1000;
		rsMain.Fields.Item("A1120").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11203,  -3) /1000;
		rsMain.Fields.Item("A1125").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11253,  -3) /1000;
		rsMain.Fields.Item("A1130").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11303,  -3) /1000;
		rsMain.Fields.Item("A1135").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11353,  -3) /1000;
		rsMain.Fields.Item("A1136").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11363,  -3) /1000;
		rsMain.Fields.Item("A1140").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11403,  -3) /1000;
		rsMain.Fields.Item("A1145").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11453,  -3) /1000;
		rsMain.Fields.Item("A1155").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11553,  -3) /1000;
		rsMain.Fields.Item("A1160").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11603,  -3) /1000;
		rsMain.Fields.Item("A1165").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11653,  -3) /1000;
		rsMain.Fields.Item("A1166").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11663,  -3) /1000;
		rsMain.Fields.Item("A1167").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11673,  -3) /1000;
		rsMain.Fields.Item("A1170").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11703,  -3) /1000;
		rsMain.Fields.Item("A1180").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11803,  -3) /1000;
		rsMain.Fields.Item("A1181").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11813,  -3) /1000;
		rsMain.Fields.Item("A1182").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11823,  -3) /1000;
		rsMain.Fields.Item("A1183").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11833,  -3) /1000;
		rsMain.Fields.Item("A1184").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11843,  -3) /1000;
		rsMain.Fields.Item("A1190").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11903,  -3) /1000;
		rsMain.Fields.Item("A1195").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11953,  -3) /1000;
		rsMain.Fields.Item("A1200").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П12003,  -3) /1000;
		rsMain.Fields.Item("A1300").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П13003,  -3) /1000;
		rsMain.Fields.Item("A1400").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14003,  -3) /1000;
		//rsMain.Fields.Item("A1401").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14013,  -3) /1000;
		rsMain.Fields.Item("A1405").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14053,  -3) /1000;
		rsMain.Fields.Item("A1410").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14103,  -3) /1000;
		rsMain.Fields.Item("A1411").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14113,  -3) /1000;
		rsMain.Fields.Item("A1412").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14123,  -3) /1000;
		rsMain.Fields.Item("A1415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14153,  -3) /1000;
		rsMain.Fields.Item("A1420").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14203,  -3) /1000;
		rsMain.Fields.Item("A1415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14253,  -3) /1000;
		rsMain.Fields.Item("A1425").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14303,  -3) /1000;
		rsMain.Fields.Item("A1430").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14353,  -3) /1000;
		rsMain.Fields.Item("A1435").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14953,  -3) /1000;
		rsMain.Fields.Item("A1495").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15003,  -3) /1000;
		rsMain.Fields.Item("A1500").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15053,  -3) /1000;
		rsMain.Fields.Item("A1505").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15103,  -3) /1000;
		rsMain.Fields.Item("A1510").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15153,  -3) /1000;
		rsMain.Fields.Item("A1515").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15203,  -3) /1000;
		rsMain.Fields.Item("A1520").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15213,  -3) /1000;
		rsMain.Fields.Item("A1521").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15253,  -3) /1000;
		rsMain.Fields.Item("A1525").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15253,  -3) /1000;
		rsMain.Fields.Item("A1526").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15263,  -3) /1000;
		rsMain.Fields.Item("A1530").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15303,  -3) /1000;
		rsMain.Fields.Item("A1531").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15313,  -3) /1000;
		rsMain.Fields.Item("A1532").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15323,  -3) /1000;
		rsMain.Fields.Item("A1533").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15333,  -3) /1000;
		rsMain.Fields.Item("A1534").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15343,  -3) /1000;
		rsMain.Fields.Item("A1535").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15353,  -3) /1000;
		rsMain.Fields.Item("A1540").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15403,  -3) /1000;
		rsMain.Fields.Item("A1545").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15453,  -3) /1000;
		rsMain.Fields.Item("A1595").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15953,  -3) /1000;
		rsMain.Fields.Item("A1600").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16003,  -3) /1000;
		rsMain.Fields.Item("A1605").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16053,  -3) /1000;
		rsMain.Fields.Item("A1610").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16103,  -3) /1000;
		rsMain.Fields.Item("A1615").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16153,  -3) /1000;
		rsMain.Fields.Item("A1620").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16203,  -3) /1000;
		rsMain.Fields.Item("A1621").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16213,  -3) /1000;
		rsMain.Fields.Item("A1625").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16253,  -3) /1000;
		rsMain.Fields.Item("A1630").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16303,  -3) /1000;
		rsMain.Fields.Item("A1635").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16353,  -3) /1000;
		rsMain.Fields.Item("A1640").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16403,  -3) /1000;
		rsMain.Fields.Item("A1645").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16453,  -3) /1000;
		rsMain.Fields.Item("A1650").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16503,  -3) /1000;
		rsMain.Fields.Item("A1660").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16603,  -3) /1000;
		rsMain.Fields.Item("A1665").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16653,  -3) /1000;
		rsMain.Fields.Item("A1670").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16703,  -3) /1000;
		rsMain.Fields.Item("A1690").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16903,  -3) /1000;
		rsMain.Fields.Item("A1695").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16953,  -3) /1000;
		rsMain.Fields.Item("A1700").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П17003,  -3) /1000;
		rsMain.Fields.Item("A1800").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П18003,  -3) /1000;
		rsMain.Fields.Item("A1900").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П19003,  -3) /1000;
		
		rsMain.Fields.Item("B1000").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10004,  -3) /1000;
		rsMain.Fields.Item("B1001").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10014,  -3) /1000;
		rsMain.Fields.Item("B1002").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10024,  -3) /1000;
		rsMain.Fields.Item("B1005").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10054,  -3) /1000;
		rsMain.Fields.Item("B1010").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10104,  -3) /1000;
		rsMain.Fields.Item("B1011").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10114,  -3) /1000;
		rsMain.Fields.Item("B1012").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10124,  -3) /1000;
		rsMain.Fields.Item("B1015").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10154,  -3) /1000;
		rsMain.Fields.Item("B1016").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10164,  -3) /1000;
		rsMain.Fields.Item("B1017").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10174,  -3) /1000;
		rsMain.Fields.Item("B1020").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10204,  -3) /1000;
		rsMain.Fields.Item("B1021").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10214,  -3) /1000;
		rsMain.Fields.Item("B1022").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П10224,  -3) /1000;
		rsMain.Fields.Item("B1030").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10304,  -3) /1000;
		rsMain.Fields.Item("B1035").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10354,  -3) /1000;
		rsMain.Fields.Item("B1040").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10404,  -3) /1000;
		rsMain.Fields.Item("B1045").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10454,  -3) /1000;
		rsMain.Fields.Item("B1050").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10504,  -3) /1000;
		rsMain.Fields.Item("B1060").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10604,  -3) /1000;
		rsMain.Fields.Item("B1065").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10654,  -3) /1000;
		rsMain.Fields.Item("B1090").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10904,  -3) /1000;
		rsMain.Fields.Item("B1095").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П10954,  -3) /1000;
		rsMain.Fields.Item("B1100").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11004,  -3) /1000;
		rsMain.Fields.Item("B1101").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11014,  -3) /1000;
		rsMain.Fields.Item("B1102").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11024,  -3) /1000;
		rsMain.Fields.Item("B1103").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11034,  -3) /1000;
		rsMain.Fields.Item("B1104").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11044,  -3) /1000;
		rsMain.Fields.Item("B1110").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11104,  -3) /1000;
		rsMain.Fields.Item("B1115").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11154,  -3) /1000;
		rsMain.Fields.Item("B1120").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11204,  -3) /1000;
		rsMain.Fields.Item("B1125").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11254,  -3) /1000;
		rsMain.Fields.Item("B1130").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11304,  -3) /1000;
		rsMain.Fields.Item("B1135").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11354,  -3) /1000;
		rsMain.Fields.Item("B1136").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11364,  -3) /1000;
		rsMain.Fields.Item("B1140").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11404,  -3) /1000;
		rsMain.Fields.Item("B1145").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11454,  -3) /1000;
		rsMain.Fields.Item("B1155").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11554,  -3) /1000;
		rsMain.Fields.Item("B1160").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11604,  -3) /1000;
		rsMain.Fields.Item("B1165").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11654,  -3) /1000;
		rsMain.Fields.Item("B1166").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11664,  -3) /1000;
		rsMain.Fields.Item("B1167").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11674,  -3) /1000;
		rsMain.Fields.Item("B1170").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11704,  -3) /1000;
		rsMain.Fields.Item("B1180").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11804,  -3) /1000;
		rsMain.Fields.Item("B1181").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11814,  -3) /1000;
		rsMain.Fields.Item("B1182").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11824,  -3) /1000;
		rsMain.Fields.Item("B1183").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11834,  -3) /1000;
		rsMain.Fields.Item("B1184").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11844,  -3) /1000;
		rsMain.Fields.Item("B1190").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11904,  -3) /1000;
		rsMain.Fields.Item("B1195").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П11954,  -3) /1000;
		rsMain.Fields.Item("B1200").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П12004,  -3) /1000;
		rsMain.Fields.Item("B1300").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П13004,  -3) /1000;
		rsMain.Fields.Item("B1400").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14004,  -3) /1000;
		//rsMain.Fields.Item("B1401").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14014,  -3) /1000;
		rsMain.Fields.Item("B1405").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14054,  -3) /1000;
		rsMain.Fields.Item("B1410").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14104,  -3) /1000;
		rsMain.Fields.Item("B1411").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14114,  -3) /1000;
		rsMain.Fields.Item("B1412").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14124,  -3) /1000;
		rsMain.Fields.Item("B1415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14154,  -3) /1000;
		rsMain.Fields.Item("B1420").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14204,  -3) /1000;
		rsMain.Fields.Item("B1415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14254,  -3) /1000;
		rsMain.Fields.Item("B1425").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс._П14304,  -3) /1000;
		rsMain.Fields.Item("B1430").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14354,  -3) /1000;
		rsMain.Fields.Item("B1435").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П14954,  -3) /1000;
		rsMain.Fields.Item("B1495").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15004,  -3) /1000;
		rsMain.Fields.Item("B1500").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15054,  -3) /1000;
		rsMain.Fields.Item("B1505").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15104,  -3) /1000;
		rsMain.Fields.Item("B1510").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15154,  -3) /1000;
		rsMain.Fields.Item("B1515").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15204,  -3) /1000;
		rsMain.Fields.Item("B1520").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15214,  -3) /1000;
		rsMain.Fields.Item("B1521").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15254,  -3) /1000;
		rsMain.Fields.Item("B1525").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15254,  -3) /1000;
		rsMain.Fields.Item("B1526").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15264,  -3) /1000;
		rsMain.Fields.Item("B1530").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15304,  -3) /1000;
		rsMain.Fields.Item("B1531").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15314,  -3) /1000;
		rsMain.Fields.Item("B1532").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15324,  -3) /1000;
		rsMain.Fields.Item("B1533").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15334,  -3) /1000;
		rsMain.Fields.Item("B1534").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15344,  -3) /1000;
		rsMain.Fields.Item("B1535").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15354,  -3) /1000;
		rsMain.Fields.Item("B1540").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15404,  -3) /1000;
		rsMain.Fields.Item("B1545").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15454,  -3) /1000;
		rsMain.Fields.Item("B1595").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П15954,  -3) /1000;
		rsMain.Fields.Item("B1600").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16004,  -3) /1000;
		rsMain.Fields.Item("B1605").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16054,  -3) /1000;
		rsMain.Fields.Item("B1610").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16104,  -3) /1000;
		rsMain.Fields.Item("B1615").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16154,  -3) /1000;
		rsMain.Fields.Item("B1620").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16204,  -3) /1000;
		rsMain.Fields.Item("B1621").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16214,  -3) /1000;
		rsMain.Fields.Item("B1625").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16254,  -3) /1000;
		rsMain.Fields.Item("B1630").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16304,  -3) /1000;
		rsMain.Fields.Item("B1635").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16354,  -3) /1000;
		rsMain.Fields.Item("B1640").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16404,  -3) /1000;
		rsMain.Fields.Item("B1645").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16454,  -3) /1000;
		rsMain.Fields.Item("B1650").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16504,  -3) /1000;
		rsMain.Fields.Item("B1660").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16604,  -3) /1000;
		rsMain.Fields.Item("B1665").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16654,  -3) /1000;
		rsMain.Fields.Item("B1670").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16704,  -3) /1000;
		rsMain.Fields.Item("B1690").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16904,  -3) /1000;
		rsMain.Fields.Item("B1695").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П16954,  -3) /1000;
		rsMain.Fields.Item("B1700").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П17004,  -3) /1000;
		rsMain.Fields.Item("B1800").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П18004,  -3) /1000;
		rsMain.Fields.Item("B1900").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.П19004,  -3) /1000;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргБухгалтер;
	КонецЕсли;
	Doc.Save(1); 
	Doc.Close();
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;      
	
КонецПроцедуры

Процедура Формирование_ФинрезДСС(App,  Документ,  БланкДСС,  PDate,  ИД)
	
	Попытка
	Doc  =  App.OpenOrCreateByExDocID(БланкДСС,  ОпределитьКодПериода(Документ), PDate, ,  ИД, 0); 
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post();
	
	Если БланкДСС = "S0100211" Тогда 	
		rsMain.Fields.Item("A2000").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20003;
		rsMain.Fields.Item("A2010").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20103;
		rsMain.Fields.Item("A2011").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20113;
		rsMain.Fields.Item("A2012").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20123<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20123,  "");
		rsMain.Fields.Item("A2013").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20133;
		rsMain.Fields.Item("A2014").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20143;
		rsMain.Fields.Item("A2050").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20503<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20503,  "");
		rsMain.Fields.Item("A2070").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20703<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20703,  "");
		rsMain.Fields.Item("A2090").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20903;
		rsMain.Fields.Item("A2095").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20953<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20953,  "");
		rsMain.Fields.Item("A2105").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21053;
		rsMain.Fields.Item("A2110").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21103;
		rsMain.Fields.Item("A2111").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21113;
		rsMain.Fields.Item("A2112").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21123;
		rsMain.Fields.Item("A2120").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21203;
		rsMain.Fields.Item("A2121").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21213;
		rsMain.Fields.Item("A2122").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21223;
		rsMain.Fields.Item("A2130").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21303<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21303,  "");
		rsMain.Fields.Item("A2150").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21503<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21503,  "");
		rsMain.Fields.Item("A2180").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21803<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21803,  "");
		rsMain.Fields.Item("A2181").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21813<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21813,  "");
		rsMain.Fields.Item("A2182").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21823<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21823,  "");
		rsMain.Fields.Item("A2190").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21903;
		rsMain.Fields.Item("A2195").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21953<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21953,  "");
		rsMain.Fields.Item("A2220").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22003;
		rsMain.Fields.Item("A2220").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22203;
		rsMain.Fields.Item("A2240").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22403;
		rsMain.Fields.Item("A2241").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22413;
		rsMain.Fields.Item("A2250").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22503<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22503,  "");
		rsMain.Fields.Item("A2255").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22553<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22553,  "");
		rsMain.Fields.Item("A2270").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22703<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22703,  "");
		rsMain.Fields.Item("A2275").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22753;
		rsMain.Fields.Item("A2290").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22903;
		rsMain.Fields.Item("A2295").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22953<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22953,  "");
		rsMain.Fields.Item("A2300").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23003<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23003,  "");
		rsMain.Fields.Item("A2305").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П23053;
		rsMain.Fields.Item("A2350").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П23503;
		rsMain.Fields.Item("A2355").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23553<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23553,  "");
		rsMain.Fields.Item("A2400").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24003;
		rsMain.Fields.Item("A2405").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24053;
		rsMain.Fields.Item("A2410").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24103;
		rsMain.Fields.Item("A2415").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24153;
		rsMain.Fields.Item("A2445").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24453;
		rsMain.Fields.Item("A2450").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24503;
		rsMain.Fields.Item("A2455").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П24553<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П24553,  "");
		rsMain.Fields.Item("A2460").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24603;
		rsMain.Fields.Item("A2465").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24653;
		rsMain.Fields.Item("A2500").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25003;
		rsMain.Fields.Item("A2505").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25053;
		rsMain.Fields.Item("A2510").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25103;
		rsMain.Fields.Item("A2515").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25153;
		rsMain.Fields.Item("A2520").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25203;
		rsMain.Fields.Item("A2550").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25503;
		rsMain.Fields.Item("A2600").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26003;
		rsMain.Fields.Item("A2605").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26053;
		rsMain.Fields.Item("A2610").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26103;
		rsMain.Fields.Item("A2615").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26153;
		rsMain.Fields.Item("A2650").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26503;
		
		rsMain.Fields.Item("B2000").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20004;
		rsMain.Fields.Item("B2010").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20104;
		rsMain.Fields.Item("B2011").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20114;
		rsMain.Fields.Item("B2012").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20124<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20124,  "");
		rsMain.Fields.Item("B2013").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20134;
		rsMain.Fields.Item("B2014").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20144;
		rsMain.Fields.Item("B2050").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20504<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20504,  "");
		rsMain.Fields.Item("B2070").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20704<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20704,  "");
		rsMain.Fields.Item("B2090").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20904;
		rsMain.Fields.Item("B2095").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20954<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20954,  "");
		rsMain.Fields.Item("B2105").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21054;
		rsMain.Fields.Item("B2110").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21104;
		rsMain.Fields.Item("B2111").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21114;
		rsMain.Fields.Item("B2112").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21124;
		rsMain.Fields.Item("B2120").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21204;
		rsMain.Fields.Item("B2121").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21214;
		rsMain.Fields.Item("B2122").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21224;
		rsMain.Fields.Item("B2130").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21304<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21304,  "");
		rsMain.Fields.Item("B2150").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21504<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21504,  "");
		rsMain.Fields.Item("B2180").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21804<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21804,  "");
		rsMain.Fields.Item("B2181").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21814<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21814,  "");
		rsMain.Fields.Item("B2182").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21824<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21824,  "");
		rsMain.Fields.Item("B2190").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21904;
		rsMain.Fields.Item("B2195").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21954<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21954,  "");
		rsMain.Fields.Item("B2200").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22004;
		rsMain.Fields.Item("B2220").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22204;
		rsMain.Fields.Item("B2240").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22404;
		rsMain.Fields.Item("B2241").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22414;
		rsMain.Fields.Item("B2250").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22504<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22504,  "");
		rsMain.Fields.Item("B2255").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22554<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22554,  "");
		rsMain.Fields.Item("B2270").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22704<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22704,  "");
		rsMain.Fields.Item("B2275").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22754;
		rsMain.Fields.Item("B2290").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22904;
		rsMain.Fields.Item("B2295").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22954<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22954,  "");
		rsMain.Fields.Item("B2300").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23004<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23004,  "");
		rsMain.Fields.Item("B2305").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П23054;
		rsMain.Fields.Item("B2350").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П23504;
		rsMain.Fields.Item("B2355").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23554<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23554,  "");
		rsMain.Fields.Item("B2400").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24004;
		rsMain.Fields.Item("B2405").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24054;
		rsMain.Fields.Item("B2410").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24104;
		rsMain.Fields.Item("B2415").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24154;
		rsMain.Fields.Item("B2445").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24454;
		rsMain.Fields.Item("B2450").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24504;
		rsMain.Fields.Item("B2455").value = ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П24554<>"-",  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П24554,  "");
		rsMain.Fields.Item("B2460").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24604;
		rsMain.Fields.Item("B2465").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24654;
		rsMain.Fields.Item("B2500").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25004;
		rsMain.Fields.Item("B2505").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25054;
		rsMain.Fields.Item("B2510").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25104;
		rsMain.Fields.Item("B2515").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25154;
		rsMain.Fields.Item("B2520").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25204;
		rsMain.Fields.Item("B2550").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25504;
		rsMain.Fields.Item("B2600").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26004;
		rsMain.Fields.Item("B2605").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26054;
		rsMain.Fields.Item("B2610").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26104;
		rsMain.Fields.Item("B2615").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26154;
		rsMain.Fields.Item("B2650").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26504;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.ОргБухгалтер;
		
	КонецЕсли;
	
	Doc.Save(1); 
	Doc.Close();
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;    
	
КонецПроцедуры

Процедура Формирование_ФинрезМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД)
	
	Попытка
	Doc  =  App.OpenOrCreateByExDocID(БланкМДЗ,  ОпределитьКодПериода(Документ), PDate, ,  ИД, 0); 
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post();    
	
	rsMain.Fields.Item("A2000").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20003,  -3) /1000;
	rsMain.Fields.Item("A2010").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20103,  -3) /1000;
	rsMain.Fields.Item("A2011").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20113,  -3) /1000;
	rsMain.Fields.Item("A2012").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20123,  -3) /1000;
	rsMain.Fields.Item("A2013").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20133,  -3) /1000;
	rsMain.Fields.Item("A2014").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20143,  -3) /1000;
	rsMain.Fields.Item("A2050").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20503,  -3) /1000;
	rsMain.Fields.Item("A2070").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20703,  -3) /1000;
	rsMain.Fields.Item("A2090").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20903,  -3) /1000;
	rsMain.Fields.Item("A2095").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20953,  -3) /1000;
	rsMain.Fields.Item("A2105").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21053,  -3) /1000;
	rsMain.Fields.Item("A2110").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21103,  -3) /1000;
	rsMain.Fields.Item("A2111").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21113,  -3) /1000;
	rsMain.Fields.Item("A2112").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21123,  -3) /1000;
	rsMain.Fields.Item("A2120").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21203,  -3) /1000;
	rsMain.Fields.Item("A2121").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21213,  -3) /1000;
	rsMain.Fields.Item("A2122").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21223,  -3) /1000;
	rsMain.Fields.Item("A2130").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21303,  -3) /1000;
	rsMain.Fields.Item("A2150").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21503,  -3) /1000;
	rsMain.Fields.Item("A2180").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21803,  -3) /1000;
	rsMain.Fields.Item("A2181").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21813,  -3) /1000;
	rsMain.Fields.Item("A2182").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21823,  -3) /1000;
	rsMain.Fields.Item("A2190").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21903,  -3) /1000;
	rsMain.Fields.Item("A2195").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21953,  -3) /1000;
	rsMain.Fields.Item("A2220").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22003,  -3) /1000;
	rsMain.Fields.Item("A2220").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22203,  -3) /1000;
	rsMain.Fields.Item("A2240").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22403,  -3) /1000;
	rsMain.Fields.Item("A2241").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22413,  -3) /1000;
	rsMain.Fields.Item("A2250").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22503,  -3) /1000;
	rsMain.Fields.Item("A2255").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22553,  -3) /1000;
	rsMain.Fields.Item("A2270").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22703,  -3) /1000;
	rsMain.Fields.Item("A2275").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22753,  -3) /1000;
	rsMain.Fields.Item("A2290").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22903,  -3) /1000;
	rsMain.Fields.Item("A2295").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22953,  -3) /1000;
	rsMain.Fields.Item("A2300").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23003,  -3) /1000;
	rsMain.Fields.Item("A2305").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П23053,  -3) /1000;
	rsMain.Fields.Item("A2350").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П23503,  -3) /1000;
	rsMain.Fields.Item("A2355").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23553,  -3) /1000;
	rsMain.Fields.Item("A2400").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24003,  -3) /1000;
	rsMain.Fields.Item("A2405").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24053,  -3) /1000;
	rsMain.Fields.Item("A2410").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24103,  -3) /1000;
	rsMain.Fields.Item("A2415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24153,  -3) /1000;
	rsMain.Fields.Item("A2445").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24453,  -3) /1000;
	rsMain.Fields.Item("A2450").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24503,  -3) /1000;
	rsMain.Fields.Item("A2455").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П24553,  -3) /1000;
	rsMain.Fields.Item("A2460").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24603,  -3) /1000;
	rsMain.Fields.Item("A2465").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24653,  -3) /1000;
	rsMain.Fields.Item("A2500").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25003,  -3) /1000;
	rsMain.Fields.Item("A2505").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25053,  -3) /1000;
	rsMain.Fields.Item("A2510").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25103,  -3) /1000;
	rsMain.Fields.Item("A2515").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25153,  -3) /1000;
	rsMain.Fields.Item("A2520").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25203,  -3) /1000;
	rsMain.Fields.Item("A2550").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25503,  -3) /1000;
	rsMain.Fields.Item("A2600").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26003,  -3) /1000;
	rsMain.Fields.Item("A2605").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26053,  -3) /1000;
	rsMain.Fields.Item("A2610").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26103,  -3) /1000;
	rsMain.Fields.Item("A2615").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26153,  -3) /1000;
	rsMain.Fields.Item("A2650").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26503,  -3) /1000;
	
	rsMain.Fields.Item("B2000").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20004,  -3) /1000;
	rsMain.Fields.Item("B2010").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20104,  -3) /1000;
	rsMain.Fields.Item("B2011").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20114,  -3) /1000;
	rsMain.Fields.Item("B2012").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20124,  -3) /1000;
	rsMain.Fields.Item("B2013").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20134,  -3) /1000;
	rsMain.Fields.Item("B2014").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20144,  -3) /1000;
	rsMain.Fields.Item("B2050").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20504,  -3) /1000;
	rsMain.Fields.Item("B2070").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20704,  -3) /1000;
	rsMain.Fields.Item("B2090").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П20904,  -3) /1000;
	rsMain.Fields.Item("B2095").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П20954,  -3) /1000;
	rsMain.Fields.Item("B2105").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21054,  -3) /1000;
	rsMain.Fields.Item("B2110").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21104,  -3) /1000;
	rsMain.Fields.Item("B2111").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21114,  -3) /1000;
	rsMain.Fields.Item("B2112").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21124,  -3) /1000;
	rsMain.Fields.Item("B2120").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21204,  -3) /1000;
	rsMain.Fields.Item("B2121").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21214,  -3) /1000;
	rsMain.Fields.Item("B2122").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21224,  -3) /1000;
	rsMain.Fields.Item("B2130").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21304,  -3) /1000;
	rsMain.Fields.Item("B2150").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21504,  -3) /1000;
	rsMain.Fields.Item("B2180").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21804,  -3) /1000;
	rsMain.Fields.Item("B2181").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21814,  -3) /1000;
	rsMain.Fields.Item("B2182").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21824,  -3) /1000;
	rsMain.Fields.Item("B2190").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П21904,  -3) /1000;
	rsMain.Fields.Item("B2195").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П21954,  -3) /1000;
	rsMain.Fields.Item("B2200").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22004,  -3) /1000;
	rsMain.Fields.Item("B2220").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22204,  -3) /1000;
	rsMain.Fields.Item("B2240").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22404,  -3) /1000;
	rsMain.Fields.Item("B2241").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22414,  -3) /1000;
	rsMain.Fields.Item("B2250").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22504,  -3) /1000;
	rsMain.Fields.Item("B2255").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22554,  -3) /1000;
	rsMain.Fields.Item("B2270").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22704,  -3) /1000;
	rsMain.Fields.Item("B2275").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22754,  -3) /1000;
	rsMain.Fields.Item("B2290").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П22904,  -3) /1000;
	rsMain.Fields.Item("B2295").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П22954,  -3) /1000;
	rsMain.Fields.Item("B2300").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23004,  -3) /1000;
	rsMain.Fields.Item("B2305").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П23054,  -3) /1000;
	rsMain.Fields.Item("B2350").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П23504,  -3) /1000;
	rsMain.Fields.Item("B2355").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П23554,  -3) /1000;
	rsMain.Fields.Item("B2400").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24004,  -3) /1000;
	rsMain.Fields.Item("B2405").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24054,  -3) /1000;
	rsMain.Fields.Item("B2410").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24104,  -3) /1000;
	rsMain.Fields.Item("B2415").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24154,  -3) /1000;
	rsMain.Fields.Item("B2445").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24454,  -3) /1000;
	rsMain.Fields.Item("B2450").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24504,  -3) /1000;
	rsMain.Fields.Item("B2455").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез._П24554,  -3) /1000;
	rsMain.Fields.Item("B2460").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24604,  -3) /1000;
	rsMain.Fields.Item("B2465").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П24654,  -3) /1000;
	rsMain.Fields.Item("B2500").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25004,  -3) /1000;
	rsMain.Fields.Item("B2505").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25054,  -3) /1000;
	rsMain.Fields.Item("B2510").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25104,  -3) /1000;
	rsMain.Fields.Item("B2515").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25154,  -3) /1000;
	rsMain.Fields.Item("B2520").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25204,  -3) /1000;
	rsMain.Fields.Item("B2550").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П25504,  -3) /1000;
	rsMain.Fields.Item("B2600").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26004,  -3) /1000;
	rsMain.Fields.Item("B2605").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26054,  -3) /1000;
	rsMain.Fields.Item("B2610").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26104,  -3) /1000;
	rsMain.Fields.Item("B2615").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26154,  -3) /1000;
	rsMain.Fields.Item("B2650").value = Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.П26504,  -3) /1000;
	
	rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.ОргДиректор;
	rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез.ОргБухгалтер;
	
	Doc.Save(1); 
	Doc.Close();
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 
	
КонецПроцедуры

Процедура Формирование_БалансМПДСС(App,  Документ,  БланкДСС,  PDate,  ИД)
	
	//Попытка	
	Doc  =  App.OpenOrCreateByExDocID(БланкДСС,  ОпределитьКодПериода(Документ), PDate, ,  ИД, 0); 
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post(); 
	
	Если БланкДСС = "S0110008" Тогда
		rsMain.Fields.Item("S_CH").Value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.СреднеспКво,  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.СреднеспКво,  "");
		rsMain.Fields.Item("N16").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ЗаполненоПоПСБУ = "v",  "1",  "");
		rsMain.Fields.Item("N17").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ЗаполненоПоМСФО = "v",  "1",  "");
		
		rsMain.Fields.Item("A020_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0203;
		rsMain.Fields.Item("A030_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0303<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0303, "");
		rsMain.Fields.Item("A031_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0313;
		rsMain.Fields.Item("A032_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0323<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0323, "");
		rsMain.Fields.Item("A035_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0353;
		rsMain.Fields.Item("A036_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0363;
		rsMain.Fields.Item("A037_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0373<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0373, "");
		rsMain.Fields.Item("A040_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0403;
		rsMain.Fields.Item("A070_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0703;
		rsMain.Fields.Item("A080_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0803;
		rsMain.Fields.Item("A100_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1003;
		rsMain.Fields.Item("A110_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1103;
		rsMain.Fields.Item("A130_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1303;
		rsMain.Fields.Item("A160_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1603;
		rsMain.Fields.Item("A161_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1613;
		rsMain.Fields.Item("A162_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1623<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1623, "");
		rsMain.Fields.Item("A170_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1703;
		rsMain.Fields.Item("A210_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2103;
		rsMain.Fields.Item("A220_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2203;
		rsMain.Fields.Item("A230_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2303;
		rsMain.Fields.Item("A231_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2313;
		rsMain.Fields.Item("A240_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2403;
		rsMain.Fields.Item("A250_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2503;
		rsMain.Fields.Item("A260_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2603;
		rsMain.Fields.Item("A270_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2703;
		rsMain.Fields.Item("A275_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2753;
		rsMain.Fields.Item("A280_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2803;
		rsMain.Fields.Item("A300_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3003;
		rsMain.Fields.Item("A320_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3203;
		rsMain.Fields.Item("A340_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3403;
		rsMain.Fields.Item("A350_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3503;
		rsMain.Fields.Item("A360_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3603<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП3603, "");
		rsMain.Fields.Item("A380_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3803;
		rsMain.Fields.Item("A430_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4303;
		rsMain.Fields.Item("A480_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4803;
		rsMain.Fields.Item("A500_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5003;
		rsMain.Fields.Item("A510_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5103;
		rsMain.Fields.Item("A530_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5303;
		rsMain.Fields.Item("A550_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5503;
		rsMain.Fields.Item("A570_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5703;
		rsMain.Fields.Item("A580_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5803;
		rsMain.Fields.Item("A605_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6053;
		rsMain.Fields.Item("A610_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6103;
		rsMain.Fields.Item("A620_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6203;
		rsMain.Fields.Item("A630_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6303;
		rsMain.Fields.Item("A640_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6403;
		rsMain.Fields.Item("B010_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0103;
		rsMain.Fields.Item("B020_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0203<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0203, "");
		rsMain.Fields.Item("B030_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0303;
		rsMain.Fields.Item("B040_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0403;
		rsMain.Fields.Item("B050_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0503;
		rsMain.Fields.Item("B070_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0703;
		rsMain.Fields.Item("B080_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0803<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0803, "");
		rsMain.Fields.Item("B090_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0903<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0903, "");
		rsMain.Fields.Item("B091_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0913<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0913, "");
		rsMain.Fields.Item("B092_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0923;
		rsMain.Fields.Item("B100_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1003<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1003, "");
		//rsMain.Fields.Item("B120_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1203<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1203, "");
		rsMain.Fields.Item("B130_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1303;
		rsMain.Fields.Item("B140_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1403<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1403, "");
		rsMain.Fields.Item("B150_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1503;
		rsMain.Fields.Item("B160_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1603;
		rsMain.Fields.Item("B041_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2013;
		rsMain.Fields.Item("B132_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2023;
		
		rsMain.Fields.Item("A020_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0204;
		rsMain.Fields.Item("A030_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0304;
		rsMain.Fields.Item("A031_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0314;
		rsMain.Fields.Item("A032_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0324<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0324, "");
		rsMain.Fields.Item("A035_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0354;
		rsMain.Fields.Item("A036_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0364;
		rsMain.Fields.Item("A037_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0374<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0374, "");
		rsMain.Fields.Item("A040_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0404;
		rsMain.Fields.Item("A070_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0704;
		rsMain.Fields.Item("A080_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0804;
		rsMain.Fields.Item("A100_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1004;
		rsMain.Fields.Item("A110_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1104;
		rsMain.Fields.Item("A130_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1304;
		rsMain.Fields.Item("A160_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1604;
		rsMain.Fields.Item("A161_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1614;
		rsMain.Fields.Item("A162_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1624<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1624, "");
		rsMain.Fields.Item("A170_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1704;
		rsMain.Fields.Item("A210_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2104;
		rsMain.Fields.Item("A220_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2204;
		rsMain.Fields.Item("A230_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2304;
		rsMain.Fields.Item("A231_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2314;
		rsMain.Fields.Item("A240_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2404;
		rsMain.Fields.Item("A250_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2504;
		rsMain.Fields.Item("A260_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2604;
		rsMain.Fields.Item("A270_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2704;
		rsMain.Fields.Item("A275_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2754;
		rsMain.Fields.Item("A280_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2804;
		rsMain.Fields.Item("A300_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3004;
		rsMain.Fields.Item("A320_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3204;
		rsMain.Fields.Item("A340_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3404;
		rsMain.Fields.Item("A350_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3504;
		rsMain.Fields.Item("A360_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3604<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП3604, "");
		rsMain.Fields.Item("A380_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3804;
		rsMain.Fields.Item("A430_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4304;
		rsMain.Fields.Item("A480_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4804;
		rsMain.Fields.Item("A500_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5004;
		rsMain.Fields.Item("A510_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5104;
		rsMain.Fields.Item("A530_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5304;
		rsMain.Fields.Item("A550_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5504;
		rsMain.Fields.Item("A570_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5704;
		rsMain.Fields.Item("A580_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5804;
		rsMain.Fields.Item("A605_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6054;
		rsMain.Fields.Item("A610_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6104;
		rsMain.Fields.Item("A620_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6204;
		rsMain.Fields.Item("A630_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6304;
		rsMain.Fields.Item("A640_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6404;
		rsMain.Fields.Item("B010_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0104;
		rsMain.Fields.Item("B020_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0204<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0204, "");
		rsMain.Fields.Item("B030_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0304;
		rsMain.Fields.Item("B040_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0404;
		//rsMain.Fields.Item("B060_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0504;
		rsMain.Fields.Item("B070_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0704;
		rsMain.Fields.Item("B080_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0804<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0804, "");
		rsMain.Fields.Item("B090_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0904<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0904, "");
		rsMain.Fields.Item("B091_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0914<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0914, "");
		rsMain.Fields.Item("B092_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0924;
		rsMain.Fields.Item("B100_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1004<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1404, "");
		rsMain.Fields.Item("B120_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1204<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1204, "");
		rsMain.Fields.Item("B130_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1304;
		rsMain.Fields.Item("B140_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1404<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1404, "");
		rsMain.Fields.Item("B150_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1504;
		rsMain.Fields.Item("B160_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1604;
		rsMain.Fields.Item("B041_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2014;
		rsMain.Fields.Item("B132_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2024;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ОргБухгалтер;
		
	ИначеЕсли БланкДСС = "S0110009" Тогда
		//rsMain.Fields.Item("S_CH").Value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ССЧ,  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ССЧ,  "");
		//rsMain.Fields.Item("S_CH").Value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ССЧ,  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ССЧ,  "");
		//rsMain.Fields.Item("N16").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоПСБУ = "v",  "1",  "");
		//rsMain.Fields.Item("N17").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ЗаполненоПоМСФО = "v",  "1",  "");
		rsMain.Fields.Item("A020_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0203;
		rsMain.Fields.Item("A030_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0303;
		rsMain.Fields.Item("A031_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0313;
		rsMain.Fields.Item("A032_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0323<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0323, "");
		rsMain.Fields.Item("A035_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0353;
		rsMain.Fields.Item("A036_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0363;
		rsMain.Fields.Item("A037_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0373<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0373, "");
		rsMain.Fields.Item("A040_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0403;
		rsMain.Fields.Item("A070_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0703;
		rsMain.Fields.Item("A080_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0803;
		rsMain.Fields.Item("A100_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1003;
		rsMain.Fields.Item("A110_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1103;
		rsMain.Fields.Item("A130_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1303;
		rsMain.Fields.Item("A160_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1603;
		rsMain.Fields.Item("A161_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1613;
		rsMain.Fields.Item("A162_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1623<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1623, "");
		rsMain.Fields.Item("A170_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1703;
		rsMain.Fields.Item("A210_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2103;
		rsMain.Fields.Item("A220_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2203;
		rsMain.Fields.Item("A230_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2303;
		rsMain.Fields.Item("A231_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2313;
		rsMain.Fields.Item("A240_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2403;
		rsMain.Fields.Item("A250_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2503;
		rsMain.Fields.Item("A260_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2603;
		rsMain.Fields.Item("A270_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2703;
		rsMain.Fields.Item("A275_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2753;
		rsMain.Fields.Item("A280_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2803;
		rsMain.Fields.Item("A300_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3003;
		rsMain.Fields.Item("A320_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3203;
		rsMain.Fields.Item("A340_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3403;
		rsMain.Fields.Item("A350_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3503;
		rsMain.Fields.Item("A360_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3603<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП3603, "");
		rsMain.Fields.Item("A380_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3803;
		rsMain.Fields.Item("A430_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4303;
		rsMain.Fields.Item("A480_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4803;
		rsMain.Fields.Item("A500_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5003;
		rsMain.Fields.Item("A510_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5103;
		rsMain.Fields.Item("A530_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5303;
		rsMain.Fields.Item("A550_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5503;
		rsMain.Fields.Item("A570_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5703;
		rsMain.Fields.Item("A580_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5803;
		rsMain.Fields.Item("A605_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6053;
		rsMain.Fields.Item("A610_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6103;
		rsMain.Fields.Item("A620_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6203;
		rsMain.Fields.Item("A630_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6303;
		rsMain.Fields.Item("A640_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6403;
		rsMain.Fields.Item("B010_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0103;
		rsMain.Fields.Item("B020_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0203<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0203, "");
		rsMain.Fields.Item("B030_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0303;
		rsMain.Fields.Item("B040_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0403;
		rsMain.Fields.Item("B050_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0503;
		rsMain.Fields.Item("B070_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0703;
		rsMain.Fields.Item("B080_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0803<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0803, "");
		rsMain.Fields.Item("B090_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0903<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0903, "");
		rsMain.Fields.Item("B091_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0913<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0913, "");
		rsMain.Fields.Item("B092_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0923;
		rsMain.Fields.Item("B100_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1003<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП103, "");
		rsMain.Fields.Item("B120_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1203<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1203, "");
		rsMain.Fields.Item("B130_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1303;
		rsMain.Fields.Item("B140_3").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1403<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1403, "");
		rsMain.Fields.Item("B150_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1503;
		rsMain.Fields.Item("B160_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1603;
		rsMain.Fields.Item("B041_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2013;
		rsMain.Fields.Item("B132_3").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2023;
		
		rsMain.Fields.Item("A020_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0204;
		rsMain.Fields.Item("A030_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0304;
		rsMain.Fields.Item("A031_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0314;
		rsMain.Fields.Item("A032_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0324<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0324, "");
		rsMain.Fields.Item("A035_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0354;
		rsMain.Fields.Item("A036_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0364;
		rsMain.Fields.Item("A037_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0374<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0374, "");
		rsMain.Fields.Item("A040_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0404;
		rsMain.Fields.Item("A070_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0704;
		rsMain.Fields.Item("A080_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0804;
		rsMain.Fields.Item("A100_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1004;
		rsMain.Fields.Item("A110_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1104;
		rsMain.Fields.Item("A130_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1304;
		rsMain.Fields.Item("A160_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1604;
		rsMain.Fields.Item("A161_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1614;
		rsMain.Fields.Item("A162_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1624<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1624, "");
		rsMain.Fields.Item("A170_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1704;
		rsMain.Fields.Item("A210_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2104;
		rsMain.Fields.Item("A220_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2204;
		rsMain.Fields.Item("A230_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2304;
		rsMain.Fields.Item("A231_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2314;
		rsMain.Fields.Item("A240_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2404;
		rsMain.Fields.Item("A250_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2504;
		rsMain.Fields.Item("A260_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2604;
		rsMain.Fields.Item("A270_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2704;
		rsMain.Fields.Item("A275_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2754;
		rsMain.Fields.Item("A280_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2804;
		rsMain.Fields.Item("A300_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3004;
		rsMain.Fields.Item("A320_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3204;
		rsMain.Fields.Item("A340_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3404;
		rsMain.Fields.Item("A350_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3504;
		rsMain.Fields.Item("A360_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3604<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3604, "");
		rsMain.Fields.Item("A380_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3804;
		rsMain.Fields.Item("A430_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4304;
		rsMain.Fields.Item("A480_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4804;
		rsMain.Fields.Item("A500_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5004;
		rsMain.Fields.Item("A510_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5104;
		rsMain.Fields.Item("A530_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5304;
		rsMain.Fields.Item("A550_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5504;
		rsMain.Fields.Item("A570_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5704;
		rsMain.Fields.Item("A580_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5804;
		rsMain.Fields.Item("A605_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6054;
		rsMain.Fields.Item("A610_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6104;
		rsMain.Fields.Item("A620_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6204;
		rsMain.Fields.Item("A630_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6304;
		rsMain.Fields.Item("A640_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6404;
		rsMain.Fields.Item("B010_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0104;
		rsMain.Fields.Item("B020_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0204<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0204, "");
		rsMain.Fields.Item("B030_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0304;
		rsMain.Fields.Item("B040_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0404;
		//rsMain.Fields.Item("B060_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0504;
		rsMain.Fields.Item("B070_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0704;
		rsMain.Fields.Item("B080_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0804<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0804, "");
		rsMain.Fields.Item("B090_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0904<>"-",Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0904, "");
		rsMain.Fields.Item("B091_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0914<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0914, "");
		rsMain.Fields.Item("B092_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0924;
		rsMain.Fields.Item("B100_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1004<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1004, "");
		rsMain.Fields.Item("B120_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1204<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1204, "");
		rsMain.Fields.Item("B130_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1304;
		rsMain.Fields.Item("B140_4").value =?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1404<>"-", Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1404, "");
		rsMain.Fields.Item("B150_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1504;
		rsMain.Fields.Item("B160_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1604;
		rsMain.Fields.Item("B041_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2014;
		rsMain.Fields.Item("B132_4").value =Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2024;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ОргБухгалтер;
	КонецЕсли;
	
	Doc.Save(1); 
	Doc.Close();   
	
КонецПроцедуры

Процедура Формирование_БалансМПМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД)
	
	//Попытка
	Doc  =  App.OpenOrCreateByExDocID(БланкМДЗ,  ОпределитьКодПериода(Документ), PDate, ,  ИД, 0); 
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post(); 
	
	Если БланкМДЗ="J0901104" Тогда
		rsMain.Fields.Item("S_CH").Value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.СреднеспКво,  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.СреднеспКво,  "");
		rsMain.Fields.Item("N1").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ЗаполненоПоПСБУ = "v",  "1",  "");
		rsMain.Fields.Item("N2").value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ЗаполненоПоМСФО = "v",  "1",  "");
		
		rsMain.Fields.Item("A020_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0203, -3) /1000;
		rsMain.Fields.Item("A030_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0303, -3) /1000;
		rsMain.Fields.Item("A031_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0313, -3) /1000;
		rsMain.Fields.Item("A032_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0323, -3) /1000;
		rsMain.Fields.Item("A035_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0353, -3) /1000;
		rsMain.Fields.Item("A036_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0363, -3) /1000;
		rsMain.Fields.Item("A037_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0373, -3) /1000;
		rsMain.Fields.Item("A040_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0403, -3) /1000;
		rsMain.Fields.Item("A070_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0703, -3) /1000;
		rsMain.Fields.Item("A080_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0803, -3) /1000;
		rsMain.Fields.Item("A100_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1003, -3) /1000;
		rsMain.Fields.Item("A110_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1103, -3) /1000;
		rsMain.Fields.Item("A130_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1303, -3) /1000;
		rsMain.Fields.Item("A160_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1603, -3) /1000;
		rsMain.Fields.Item("A161_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1613, -3) /1000;
		rsMain.Fields.Item("A162_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1623, -3) /1000;
		rsMain.Fields.Item("A170_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1703, -3) /1000;
		rsMain.Fields.Item("A210_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2103, -3) /1000;
		rsMain.Fields.Item("A220_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2203, -3) /1000;
		rsMain.Fields.Item("A230_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2303, -3) /1000;
		rsMain.Fields.Item("A231_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2313, -3) /1000;
		rsMain.Fields.Item("A240_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2403, -3) /1000;
		rsMain.Fields.Item("A250_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2503, -3) /1000;
		rsMain.Fields.Item("A260_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2603, -3) /1000;
		rsMain.Fields.Item("A270_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2703, -3) /1000;
		rsMain.Fields.Item("A275_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2753, -3) /1000;
		rsMain.Fields.Item("A280_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2803, -3) /1000;
		rsMain.Fields.Item("A300_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3003, -3) /1000;
		rsMain.Fields.Item("A320_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3203, -3) /1000;
		rsMain.Fields.Item("A340_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3403, -3) /1000;
		rsMain.Fields.Item("A350_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3503, -3) /1000;
		rsMain.Fields.Item("A360_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3603, -3) /1000;
		rsMain.Fields.Item("A380_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3803, -3) /1000;
		rsMain.Fields.Item("A430_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4303, -3) /1000;
		rsMain.Fields.Item("A480_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4803, -3) /1000;
		rsMain.Fields.Item("A500_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5003, -3) /1000;
		rsMain.Fields.Item("A510_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5103, -3) /1000;
		rsMain.Fields.Item("A530_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5303, -3) /1000;
		rsMain.Fields.Item("A550_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5503, -3) /1000;
		rsMain.Fields.Item("A570_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5703, -3) /1000;
		rsMain.Fields.Item("A580_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5803, -3) /1000;
		rsMain.Fields.Item("A605_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6053, -3) /1000;
		rsMain.Fields.Item("A610_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6103, -3) /1000;
		rsMain.Fields.Item("A620_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6203, -3) /1000;
		rsMain.Fields.Item("A630_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6303, -3) /1000;
		rsMain.Fields.Item("A640_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6403, -3) /1000;
		rsMain.Fields.Item("B010_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0103, -3) /1000;
		rsMain.Fields.Item("B020_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0203, -3) /1000;
		//тип - строка
		rsMain.Fields.Item("B030_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0303, -3) /1000;
		rsMain.Fields.Item("B040_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0403, -3) /1000;
		rsMain.Fields.Item("B050_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0503, -3) /1000;
		rsMain.Fields.Item("B070_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0703, -3) /1000;
		rsMain.Fields.Item("B080_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0803, -3) /1000;
		rsMain.Fields.Item("B090_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0903, -3) /1000;
		rsMain.Fields.Item("B091_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0913, -3) /1000;
		rsMain.Fields.Item("B092_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0923, -3) /1000;
		rsMain.Fields.Item("B100_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1003, -3) /1000;
		rsMain.Fields.Item("B120_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1203, -3) /1000;
		rsMain.Fields.Item("B130_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1303, -3) /1000;
		rsMain.Fields.Item("B140_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1403, -3) /1000;
		rsMain.Fields.Item("B150_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1503, -3) /1000;
		rsMain.Fields.Item("B160_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1603, -3) /1000;
		rsMain.Fields.Item("B041_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2013, -3) /1000;
		rsMain.Fields.Item("B132_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2023, -3) /1000;
		
		rsMain.Fields.Item("A020_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0204, -3) /1000;
		rsMain.Fields.Item("A030_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0304, -3) /1000;
		rsMain.Fields.Item("A031_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0314, -3) /1000;
		rsMain.Fields.Item("A032_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0324, -3) /1000;
		rsMain.Fields.Item("A035_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0354, -3) /1000;
		rsMain.Fields.Item("A036_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0364, -3) /1000;
		rsMain.Fields.Item("A037_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0374, -3) /1000;
		rsMain.Fields.Item("A040_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0404, -3) /1000;
		rsMain.Fields.Item("A070_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0704, -3) /1000;
		rsMain.Fields.Item("A080_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0804, -3) /1000;
		rsMain.Fields.Item("A100_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1004, -3) /1000;
		rsMain.Fields.Item("A110_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1104, -3) /1000;
		rsMain.Fields.Item("A130_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1304, -3) /1000;
		rsMain.Fields.Item("A160_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1604, -3) /1000;
		rsMain.Fields.Item("A161_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1614, -3) /1000;
		rsMain.Fields.Item("A162_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1624, -3) /1000;
		rsMain.Fields.Item("A170_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1704, -3) /1000;
		rsMain.Fields.Item("A210_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2104, -3) /1000;
		rsMain.Fields.Item("A220_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2204, -3) /1000;
		rsMain.Fields.Item("A230_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2304, -3) /1000;
		rsMain.Fields.Item("A231_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2314, -3) /1000;
		rsMain.Fields.Item("A240_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2404, -3) /1000;
		rsMain.Fields.Item("A250_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2504, -3) /1000;
		rsMain.Fields.Item("A260_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2604, -3) /1000;
		rsMain.Fields.Item("A270_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2704, -3) /1000;
		rsMain.Fields.Item("A275_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2754, -3) /1000;
		rsMain.Fields.Item("A280_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2804, -3) /1000;
		rsMain.Fields.Item("A300_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3004, -3) /1000;
		rsMain.Fields.Item("A320_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3204, -3) /1000;
		rsMain.Fields.Item("A340_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3404, -3) /1000;
		rsMain.Fields.Item("A350_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3504, -3) /1000;
		rsMain.Fields.Item("A360_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3604, -3) /1000;
		rsMain.Fields.Item("A380_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3804, -3) /1000;
		rsMain.Fields.Item("A343_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4304, -3) /1000;
		rsMain.Fields.Item("A480_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4804, -3) /1000;
		rsMain.Fields.Item("A500_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5004, -3) /1000;
		rsMain.Fields.Item("A510_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5104, -3) /1000;
		rsMain.Fields.Item("A530_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5304, -3) /1000;
		rsMain.Fields.Item("A550_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5504, -3) /1000;
		rsMain.Fields.Item("A570_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5704, -3) /1000;
		rsMain.Fields.Item("A580_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5804, -3) /1000;
		rsMain.Fields.Item("A605_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6054, -3) /1000;
		rsMain.Fields.Item("A610_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6104, -3) /1000;
		rsMain.Fields.Item("A620_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6204, -3) /1000;
		rsMain.Fields.Item("A630_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6304, -3) /1000;
		rsMain.Fields.Item("A640_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6404, -3) /1000;
		rsMain.Fields.Item("B010_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0104, -3) /1000;
		rsMain.Fields.Item("B020_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0204, -3) /1000;
		rsMain.Fields.Item("B030_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0304, -3) /1000;
		rsMain.Fields.Item("B040_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0404, -3) /1000;
		rsMain.Fields.Item("B060_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0504, -3) /1000;
		rsMain.Fields.Item("B070_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0704, -3) /1000;
		rsMain.Fields.Item("B080_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0804, -3) /1000;
		rsMain.Fields.Item("B090_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0904, -3) /1000;
		rsMain.Fields.Item("B091_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0914, -3) /1000;
		rsMain.Fields.Item("B092_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0924, -3) /1000;
		rsMain.Fields.Item("B100_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1004, -3) /1000;
		rsMain.Fields.Item("B120_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1204, -3) /1000;
		rsMain.Fields.Item("B130_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1304, -3) /1000;
		rsMain.Fields.Item("B140_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1404, -3) /1000;
		rsMain.Fields.Item("B150_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1504, -3) /1000;
		rsMain.Fields.Item("B160_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1604, -3) /1000;
		rsMain.Fields.Item("B041_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2014, -3) /1000;
		rsMain.Fields.Item("B132_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2024, -3) /1000;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ОргБухгалтер;
		
	ИначеЕсли БланкМДЗ="J0901105" Тогда
		rsMain.Fields.Item("S_CH").Value  =  ?(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.СреднеспКво,  Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.СреднеспКво,  "");
		rsMain.Fields.Item("A020_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0203, -3) /1000;
		rsMain.Fields.Item("A030_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0303, -3) /1000;
		rsMain.Fields.Item("A031_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0313, -3) /1000;
		rsMain.Fields.Item("A032_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0323, -3) /1000;
		rsMain.Fields.Item("A035_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0353, -3) /1000;
		rsMain.Fields.Item("A036_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0363, -3) /1000;
		rsMain.Fields.Item("A037_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0373, -3) /1000;
		rsMain.Fields.Item("A040_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0403, -3) /1000;
		rsMain.Fields.Item("A070_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0703, -3) /1000;
		rsMain.Fields.Item("A080_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0803, -3) /1000;
		rsMain.Fields.Item("A100_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1003, -3) /1000;
		rsMain.Fields.Item("A110_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1103, -3) /1000;
		rsMain.Fields.Item("A130_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1303, -3) /1000;
		rsMain.Fields.Item("A160_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1603, -3) /1000;
		rsMain.Fields.Item("A161_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1613, -3) /1000;
		rsMain.Fields.Item("A162_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1623, -3) /1000;
		rsMain.Fields.Item("A170_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1703, -3) /1000;
		rsMain.Fields.Item("A210_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2103, -3) /1000;
		rsMain.Fields.Item("A220_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2203, -3) /1000;
		rsMain.Fields.Item("A230_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2303, -3) /1000;
		rsMain.Fields.Item("A231_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2313, -3) /1000;
		rsMain.Fields.Item("A240_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2403, -3) /1000;
		rsMain.Fields.Item("A250_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2503, -3) /1000;
		rsMain.Fields.Item("A260_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2603, -3) /1000;
		rsMain.Fields.Item("A270_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2703, -3) /1000;
		rsMain.Fields.Item("A275_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2753, -3) /1000;
		rsMain.Fields.Item("A280_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2803, -3) /1000;
		rsMain.Fields.Item("A300_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3003, -3) /1000;
		rsMain.Fields.Item("A320_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3203, -3) /1000;
		rsMain.Fields.Item("A340_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3403, -3) /1000;
		rsMain.Fields.Item("A350_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3503, -3) /1000;
		rsMain.Fields.Item("A360_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3603, -3) /1000;
		rsMain.Fields.Item("A380_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3803, -3) /1000;
		rsMain.Fields.Item("A430_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4303, -3) /1000;
		rsMain.Fields.Item("A480_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4803, -3) /1000;
		rsMain.Fields.Item("A500_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5003, -3) /1000;
		rsMain.Fields.Item("A510_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5103, -3) /1000;
		rsMain.Fields.Item("A530_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5303, -3) /1000;
		rsMain.Fields.Item("A550_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5503, -3) /1000;
		rsMain.Fields.Item("A570_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5703, -3) /1000;
		rsMain.Fields.Item("A580_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5803, -3) /1000;
		rsMain.Fields.Item("A605_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6053, -3) /1000;
		rsMain.Fields.Item("A610_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6103, -3) /1000;
		rsMain.Fields.Item("A620_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6203, -3) /1000;
		rsMain.Fields.Item("A630_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6303, -3) /1000;
		rsMain.Fields.Item("A640_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6403, -3) /1000;
		rsMain.Fields.Item("B010_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0103, -3) /1000;
		rsMain.Fields.Item("B020_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0203, -3) /1000;
		rsMain.Fields.Item("B030_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0303, -3) /1000;
		rsMain.Fields.Item("B040_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0403, -3) /1000;
		rsMain.Fields.Item("B050_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0503, -3) /1000;
		rsMain.Fields.Item("B070_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0703, -3) /1000;
		rsMain.Fields.Item("B080_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0803, -3) /1000;
		rsMain.Fields.Item("B090_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0903, -3) /1000;
		rsMain.Fields.Item("B091_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0913, -3) /1000;
		rsMain.Fields.Item("B092_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0923, -3) /1000;
		rsMain.Fields.Item("B100_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1003, -3) /1000;
		rsMain.Fields.Item("B120_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1203, -3) /1000;
		rsMain.Fields.Item("B130_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1303, -3) /1000;
		rsMain.Fields.Item("B140_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1403, -3) /1000;
		rsMain.Fields.Item("B150_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1503, -3) /1000;
		rsMain.Fields.Item("B160_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1603, -3) /1000;
		rsMain.Fields.Item("B041_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2013, -3) /1000;
		rsMain.Fields.Item("B132_3").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2023, -3) /1000;
		
		rsMain.Fields.Item("A020_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0204, -3) /1000;
		rsMain.Fields.Item("A030_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0304, -3) /1000;
		rsMain.Fields.Item("A031_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0314, -3) /1000;
		rsMain.Fields.Item("A032_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0324, -3) /1000;
		rsMain.Fields.Item("A035_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0354, -3) /1000;
		rsMain.Fields.Item("A036_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0364, -3) /1000;
		rsMain.Fields.Item("A037_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П0374, -3) /1000;
		rsMain.Fields.Item("A040_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0404, -3) /1000;
		rsMain.Fields.Item("A070_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0704, -3) /1000;
		rsMain.Fields.Item("A080_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П0804, -3) /1000;
		rsMain.Fields.Item("A100_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1004, -3) /1000;
		rsMain.Fields.Item("A110_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1104, -3) /1000;
		rsMain.Fields.Item("A130_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1304, -3) /1000;
		rsMain.Fields.Item("A160_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1604, -3) /1000;
		rsMain.Fields.Item("A161_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1614, -3) /1000;
		rsMain.Fields.Item("A162_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П1624, -3) /1000;
		rsMain.Fields.Item("A170_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П1704, -3) /1000;
		rsMain.Fields.Item("A210_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2104, -3) /1000;
		rsMain.Fields.Item("A220_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2204, -3) /1000;
		rsMain.Fields.Item("A230_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2304, -3) /1000;
		rsMain.Fields.Item("A231_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2314, -3) /1000;
		rsMain.Fields.Item("A240_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2404, -3) /1000;
		rsMain.Fields.Item("A250_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2504, -3) /1000;
		rsMain.Fields.Item("A260_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2604, -3) /1000;
		rsMain.Fields.Item("A270_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2704, -3) /1000;
		rsMain.Fields.Item("A275_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2754, -3) /1000;
		rsMain.Fields.Item("A280_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П2804, -3) /1000;
		rsMain.Fields.Item("A300_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3004, -3) /1000;
		rsMain.Fields.Item("A320_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3204, -3) /1000;
		rsMain.Fields.Item("A340_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3404, -3) /1000;
		rsMain.Fields.Item("A350_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3504, -3) /1000;
		rsMain.Fields.Item("A360_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._П3604, -3) /1000;
		rsMain.Fields.Item("A380_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П3804, -3) /1000;
		rsMain.Fields.Item("A430_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4304, -3) /1000;
		rsMain.Fields.Item("A480_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П4804, -3) /1000;
		rsMain.Fields.Item("A500_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5004, -3) /1000;
		rsMain.Fields.Item("A510_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5104, -3) /1000;
		rsMain.Fields.Item("A530_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5304, -3) /1000;
		rsMain.Fields.Item("A550_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5504, -3) /1000;
		rsMain.Fields.Item("A570_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5704, -3) /1000;
		rsMain.Fields.Item("A580_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П5804, -3) /1000;
		rsMain.Fields.Item("A605_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6054, -3) /1000;
		rsMain.Fields.Item("A610_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6104, -3) /1000;
		rsMain.Fields.Item("A620_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6204, -3) /1000;
		rsMain.Fields.Item("A630_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6304, -3) /1000;
		rsMain.Fields.Item("A640_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.П6404, -3) /1000;
		rsMain.Fields.Item("B010_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0104, -3) /1000;
		rsMain.Fields.Item("B020_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0204, -3) /1000;
		rsMain.Fields.Item("B030_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0304, -3) /1000;
		rsMain.Fields.Item("B040_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0404, -3) /1000;
		//rsMain.Fields.Item("B060_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0504, -3) /1000;
		rsMain.Fields.Item("B070_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0704, -3) /1000;
		rsMain.Fields.Item("B080_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0804, -3) /1000;
		rsMain.Fields.Item("B090_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0904, -3) /1000;
		rsMain.Fields.Item("B091_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП0914, -3) /1000;
		rsMain.Fields.Item("B092_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП0924, -3) /1000;
		rsMain.Fields.Item("B100_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1004, -3) /1000;
		rsMain.Fields.Item("B120_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1204, -3) /1000;
		rsMain.Fields.Item("B130_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1304, -3) /1000;
		rsMain.Fields.Item("B140_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП._ПП1404, -3) /1000;
		rsMain.Fields.Item("B150_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1504, -3) /1000;
		rsMain.Fields.Item("B160_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП1604, -3) /1000;
		rsMain.Fields.Item("B041_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2014, -3) /1000;
		rsMain.Fields.Item("B132_4").value =Окр(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ПП2024, -3) /1000;
		
		rsMain.Fields.Item("FIRM_RUK").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ОргДиректор;
		rsMain.Fields.Item("FIRM_BUH").value = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП.ОргБухгалтер;
	КонецЕсли;
	
	Doc.Save(1); 
	Doc.Close();     	

КонецПроцедуры 
//-----------------------------------------------------------------------------------------------
Процедура НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС)
	
	Попытка
		НоваяСтрока.Номенклатура  =  НоменклатураДока;
		НоваяСтрока.Количество  =  НомКоличество;
		НоваяСтрока.Цена =  НомЦена;
		НоваяСтрока.Сумма = НомСумма;
		НоваяСтрока.СтавкаНДС = НомСтавкаНДС;
		НоваяСтрока.СуммаНДС=СуммаНДС;
		
		Если ИмяБазы="УТ" или ИмяБазы="УТП" или ИмяБазы="УПП"    Тогда
			НоваяСтрока.Содержание = НоменклатураДока;
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, ВидНоменклатуры)	
	
	ГруппаМедка = Справочники.Номенклатура.НайтиПоКоду("MED");
	Если НЕ ЗначениеЗаполнено(ГруппаМедка) тогда
		ГруппаОбъект  =  Справочники.Номенклатура.СоздатьГруппу();
		ГруппаОбъект.Наименование  =  "Auto_MEDoc";  
		ГруппаОбъект.Код = "MED";
		ГруппаОбъект.Записать();
	КонецЕсли;
	НоменклатураМедка = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураМедка.Родитель = Справочники.Номенклатура.НайтиПоКоду("MED");
	НоменклатураМедка.Наименование =  НоменклатураОригинал;
	НоменклатураМедка.НаименованиеПолное =  НоменклатураОригинал;
	НоменклатураМедка.Комментарий =  Строка(НСтр("ru = 'Создана M.E.Doc IS на основании ';uk = 'Створена M.E.Doc IS на підставі '") +
	НаОсновании + Строка(НомерДокаВх) + НСтр("ru = 'от ';uk = 'від '") + ДатаДокаВх);
	Если ВидНоменклатуры = "Услуг" Тогда
	НоменклатураМедка.Услуга = Истина;
	КонецЕсли;
	ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);
	Если ЗначениеЗаполнено(ЕдИзмНоменклатуры) Тогда
		НоменклатураМедка.БазоваяЕдиницаИзмерения =  ЕдИзмНоменклатуры;
	КонецЕсли;
	НоменклатураМедка.СтавкаНДС = НомСтавкаНДС;
	
	Если ИмяБазы="УТ" или ИмяБазы="УТП" или ИмяБазы="УПП" Тогда
		НоменклатураМедка.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ВидНоменклатуры);
	КонецЕсли;
    НоменклатураМедка.Записать();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСформировать(Кнопка)
	
	Попытка 
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение 
		Предупреждение(НСтр("ru = 'Передача документов отложена. Возможные причины:';uk = 'Передача документів відкладено. Можливі причини:'") + Символы.ПС + 
		НСтр("ru = '- M.E.Doc IS не запущен.';uk = '- M.E.Doc IS не запущений.'") + символы.ПС + 
		НСтр("ru = '- не выполнен вход в предприятие из списка.';uk = '- не виконаний вхід у підприємство зі списку.'"));
		Возврат; 
	КонецПопытки;    
	//-----------------------------------------------------------------------------------------	
	Попытка 
		Если НЕ ПроверкаВерсииМедка(App.GetPrgVersion()) Тогда
			возврат;
		Конецесли;
	Исключение 
		Предупреждение(НСтр("ru = 'Ошибка при определении версии.';uk = 'Помилка при визначенні версії.'"));
	КонецПопытки;
	//-----------------------------------------------------------------------------------------	
	Попытка 	
		orgId  =  App.SeekOrg(СокрЛП(КодПоЕДРПОУ), СокрЛП(пФил)); 
		Если orgId = 0 Тогда 
			ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность = Ложь;
			Предупреждение(НСтр("ru = 'Предприятия не существует в M.E.DOC IS :';uk = 'Підприємства не існує в M.E.DOC IS :'") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ'") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Провірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да,  создайте в M.E.DOC IS новое предприятие.';uk = 'Якщо Так,  створіть в M.E.DOC IS нове підприємство.'")); 
			//ИзменениеОсновныхПараметровБезОчисткиТаблицы();
			Возврат; 
		КонецЕсли;   
	Исключение
		Предупреждение(НСтр("ru = 'Ошибка при определении наличия предприятия.';uk = 'Помилка прии визначенні версії підприємства.'"));
	КонецПопытки;           	
	//-----------------------------------------------------------------------------------------
	КоличествоДокументов  =  0;
	КоличествоДокументовСчет  =  0;
	КоличествоДокументовАкт  =  0; 
	КоличествоДокументовНН  =  0;
	КоличествоДокументовДод2  = 0;  
	КоличествоДокументовЗапит  =  0;
	КоличествоДокументовВидНакл  =  0;
	КоличествоДокументовВозвратТоваровОтПокупателя = 0;
	КоличествоДокументовВозвратТоваровПоставщику = 0;
	КоличествоДокументовАктСверки  =  0;
	КоличествоОтправленных =  0;
	КоличествоСуществующих =  0;
	ЭлементыФормы.ТаблицаДокументов.Колонки.Статус = "";
	СписокДляОткрытия = Новый Массив();
	//------------------------------------------------------------------------------------
	Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл
		Документ  =  СтрокаДокумент.Документ; 
		ИД  =  Строка(Документ.УникальныйИдентификатор());  
		НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ,  "Документ");
		Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
			КоличествоСуществующих = КоличествоСуществующих + 1;
		КонецЕсли;     		
	КонецЦикла;		
	
	Если КоличествоСуществующих>0 тогда   
		Ответ = Вопрос(НСтр("ru = 'Документы существуют в M.E.Doc IS:';uk = 'Документи існують в M.E.Doc IS:'") + Символы.ПС + 
		+ Число(КоличествоСуществующих) +  НСтр("ru = ' из ';uk = ' з '") + ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки.Количество() +  НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
		НСтр("ru = 'Переместить существующие в Корзину,  и передать новые документы?';uk = 'Перемістити існуючі до Корзини,  та передати нові документи?'"),  РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда 
			ПерезаписьДокументов = "Да";
		ИначеЕсли Ответ  =  КодВозвратаДиалога.Нет Тогда 
			ПерезаписьДокументов = "Нет";
		ИначеЕсли Ответ  =  КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;     	
	
	ОтменаПередачиНН = Ложь;
	pd =  App.GetPrimaryDocs();
	Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл
		Если ОтменаПередачиНН Тогда
			Прервать;
		КонецЕсли;
		Документ  =  СтрокаДокумент.Документ; 
		НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ,  "Документ");
		ИД  =  Строка(Документ.УникальныйИдентификатор());
		PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
		Если ПерезаписьДокументов = "Да" Тогда   
			Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
				App.MoveToTrash(ИД);
			КонецЕсли;			
		ИначеЕсли ПерезаписьДокументов = "Нет" Тогда 
			Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;			

		//------------------------------------------------------------------------------------
		Если ТипДок = "ОказаниеУслуг" Тогда
			Если (Документ.УчитыватьНДС) = Ложь Тогда
				Бланк  =  "1С82АВРБ"
			Иначе 
				Если (Документ.СуммаВключаетНДС) = Ложь Тогда
					Бланк  =  "1С82АВР0"
				Иначе
					Бланк  =  "1С82АВР"
				КонецЕсли;
			КонецЕсли;
			
			ПередаемАкт(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, НайденнаяСтрока);
		КонецЕсли;
		///--------------------------------------------------------------------------
		Если ТипДок = "Счет" Тогда 			
			
			Если (Документ.УчитыватьНДС) = Ложь Тогда 
				Бланк  =  "1С82РАХБ"
			Иначе
				Если (Документ.СуммаВключаетНДС) = Ложь Тогда
					Бланк  =  "1С82РАХ0"
				Иначе
					Бланк  =  "1С82РАХ"
				КонецЕсли;
			КонецЕсли;   
			
			ПередаемСчет(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, НайденнаяСтрока);
		КонецЕсли; 
		///--------------------------------------------------------------------------

		Если ТипДок = "ВозвратТоваровОтПокупателя" Тогда 			
			
			Бланк  =  "101";
						
			ПередаемВозвратТоваровОтПокупателя(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровОтПокупателя, НайденнаяСтрока);
		КонецЕсли;  

	    ///--------------------------------------------------------------------------

		Если ТипДок = "ВозвратТоваровПоставщику" Тогда 			
			
			Бланк  =  "102";
						
			ПередаемВозвратТоваровПоставщику(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровПоставщику, НайденнаяСтрока);
		КонецЕсли;  

		///--------------------------------------------------------------------------
		Если ТипДок = "ВидНакладна" Тогда 						
			
			Если (Документ.УчитыватьНДС) = Ложь Тогда 
				Бланк  =  "1С82ВНБ"
			Иначе
				Если (Документ.СуммаВключаетНДС) = Ложь Тогда
					Бланк  =  "1С82ВН0"
				Иначе
					Бланк  =  "1С82ВН"
				КонецЕсли;
			КонецЕсли;   
			
			ПередаемРасхНакл(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, НайденнаяСтрока); 
		КонецЕсли;      
		///--------------------------------------------------------------------------
		Если ТипДок="АктСверки" Тогда Бланк = "1С82АЗ";
			ПередаемАЗ(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАктСверки, НайденнаяСтрока); 
		КонецЕсли;    
		//---------------------------------------------------------------------------------
		Если ТипДок = "НалоговаяНакладная" Тогда
			Если ЮрикФизик = "Юрик" Тогда
				Бланк  =  "J1201008";  		
			Иначе 
				Бланк  =  "F1201008";    
		КонецЕсли;
			
			ПередаемНН(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовНН, НайденнаяСтрока);   
		КонецЕсли;  	
		//------------------------------------------------------------------------------------
		Если ТипДок = "Приложение2" Тогда 			
			
			Если ЮрикФизик = "Юрик" Тогда
				Бланк  =  "J1201208";  		
			Иначе 
				Бланк  =  "F1201208";    
		КонецЕсли;
			
			ПередаемДод2(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовДод2, НайденнаяСтрока);			
		КонецЕсли;
	КонецЦикла;
	//--------------------------------------------------------------------------
	КоличествоДокументов =  КоличествоДокументовВидНакл + КоличествоДокументовАктСверки + КоличествоДокументовСчет + КоличествоДокументовАкт +
	КоличествоДокументовНН + КоличествоДокументовДод2 + КоличествоДокументовЗапит + КоличествоДокументовВозвратТоваровОтПокупателя + КоличествоДокументовВозвратТоваровПоставщику;  	
	
	Если КоличествоДокументов>0 Тогда
		Предупреждение(НСтр("ru = 'Передано в M.E.Doc IS:';uk = 'Передано в M.E.Doc IS:'") + Символы.ПС +   
		"  - " + КоличествоДокументов + " шт.");
		//--------------------------------------------------------------------------
		Если ОтпрНет  =  2 и App.GetDocStatus(ИД)<>3 Тогда 
			Sender  =  App.GetDocSender();
			Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
				ИД  =  Строка(Документ.УникальныйИдентификатор());
				Sender.Add(ИД);    
			КонецЦикла;    
			
			Предупреждение(НСтр("ru = 'Отправляем в налоговую. Перейдите в M.E.Doc IS';uk = 'Відправляємо до податкової. Перейдіть в M.E.Doc IS'"));
			cnt  =  Sender.Send(1);    
			ОтправленоЧисло = cnt;
			
			Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
				Документ  =  СтрокаДокумент.Документ; 
				ИД  =  Строка(Документ.УникальныйИдентификатор());
                ПроверкаСтатусов(App, Документ, ИД);
			КонецЦикла;   
			
		ИначеЕсли 
			ОтпрНет  =  2 и App.GetDocStatus(ИД) = 3 Тогда 
			Сообщить(Нстр("ru = 'Документ ошибочный,  поэтому в налоговую не отправляется.';uk = 'Документ помилковий,  тому в податкову не відправляється.'"));
		КонецЕсли; 
		
		Если ОтпрНет  =  3  Тогда
			Sender  =  App.GetDocSender(); 
			Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
				Документ  =  СтрокаДокумент.Документ;   
				Если Документ.Контрагент.КодПоЕДРПОУ = "" Тогда
					Сообщить(Строка(Документ) + НСтр("ru = ' не будет отправлен контрагенту,  т.к. у него не указан ЕДРПОУ.';uk = ' не буде відправлено контрагенту,  оскліьки в нього не вказаний ЄДРПОУ.'"));
				Иначе 
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);    
				КонецЕсли;
			КонецЦикла;    
			
			Предупреждение(Нстр("ru = 'Отправляем контрагенту. Перейдите в M.E.Doc IS';uk = 'Відправляємо контрагентові. Перейдіть в M.E.Doc IS'"));	
			cnt  =  Sender.Send(0); 
			ОтправленоЧисло = cnt;
			
			Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
				Документ  =  СтрокаДокумент.Документ; 
				ИД  =  Строка(Документ.УникальныйИдентификатор());
                ПроверкаСтатусов(App, Документ, ИД);
			КонецЦикла;   

		КонецЕсли;     
		//---------------------------------------------------------------  		
		Если ФР = Истина Тогда 
			Попытка
				Если ТипДок="НалоговаяНакладная" Тогда
					ТипДокФильтр="10100"
				ИначеЕсли ТипДок="Приложение2" Тогда
					ТипДокФильтр="10101"
				ИначеЕсли ТипДок="Счет" Тогда
					ТипДокФильтр="10103" 
				ИначеЕсли ТипДок="ОказаниеУслуг" Тогда
					ТипДокФильтр="10104" 
				ИначеЕсли ТипДок="ВидНакладна" Тогда
					ТипДокФильтр="10105" 
				ИначеЕсли ТипДок="АктСверки" Тогда
					ТипДокФильтр="10106"   
				ИначеЕсли ТипДок="ВозвратТоваровОтПокупателя" Тогда
					ТипДокФильтр="10107"  
					ИначеЕсли ТипДок="ВозвратТоваровПоставщику" Тогда
					ТипДокФильтр="10108"  
				КонецЕсли;
				
				reestrFil  = App.RunModule("PrimaryDocsRstNew");  
				filterTbl  =  reestrFil.GetFilter(); 
				filterTbl.Fields.Item("DOCTYPE").Value  =  ТипДокФильтр; 
				filterTbl.Fields.Item("PERFROM").Value  =  Дата(НачПериода);  
				filterTbl.Fields.Item("PERTO").Value  =  Дата(КонПериода);   			
				Если ЗначениеЗаполнено(Контрагент.КодПоЕДРПОУ) Тогда
					filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  Контрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
					filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
				КонецЕсли;   				
				filterTbl.Fields.Item("STAN").Value  =  2; //1 - входящие 2 - исходящие 
				//filterTbl.Fields.Item("ROUTE").Value  =  2;
				//filterTbl.Fields.Item("SUBROUTE").Value  =  -3; 
				reestrFil.ApplyFilter(); 
			Исключение
			КонецПопытки;
		КонецЕсли;  		 
		
		Если ОД = Истина Тогда
			Для Каждого ИД Из СписокДляОткрытия Цикл
				App.ShowDocument(ИД);
			КонецЦикла;        		
		КонецЕсли;     
		//---------------------------------------------------------------
	Иначе 
		Предупреждение(НСтр("ru = 'Не передано ни одного документа.';uk = 'Не передано жодного документа.'"));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИД(Объект)
	Перем Стр;
	Стр  =  Объект.УникальныйИдентификатор();
	Возврат Стр;
КонецФункции

Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация,  Контрагент,  Договор,  ВалютаРегламентированногоУчета  =  Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) тогда
		ВалютаРегламентированногоУчета  =  Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Результат  =  Новый Структура("
	|СчетРасчетов,  СчетАвансов, 
	|СчетРасчетовПокупателя,  СчетАвансовПокупателя, 
	|СчетУчетаТары,  СчетУчетаТарыПокупателя, 
	|СчетАвансовПоТаре,  СчетАвансовПоТареПокупателя, 
	|СчетРасчетовПриБартере,  СчетАвансовПриБартере, 
	|СчетРасчетовПокупателяПриБартере,  СчетАвансовПокупателяПриБартере, 
	|СчетУчетаНДСПриобретений, СчетУчетаНДСПриобретенийПодтвержденный, 
	|СчетУчетаНДСПродаж, СчетУчетаНДСПродажПодтвержденный, 
	|НалоговоеНазначениеПриобретений, НалоговоеНазначениеПриобретенийПоТаре, 
	|НалоговоеНазначениеПродаж,  НалоговоеНазначениеПродажПоТаре, 
	|СтавкаНДСПриобретений, СтавкаНДСПродаж, 
	|Организация,  Контрагент,  Договор,  ВидРасчетовПоДоговору,  Амортизируется");
	
	ВидРасчетовПоДоговору  =  ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);
	
	СписокГруппКонтрагентов  =  ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Контрагент);
	
	СписокГруппДоговоров  =  ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Договор);
	
	Запрос     =  Новый Запрос();
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("Договор",            Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",        ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация",  Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",      Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов",  Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	ШаблонЗапросаБезГде  = ", 
	|	СчетУчетаРасчетовСПоставщиком, 
	|	СчетУчетаАвансовВыданных, 
	|	СчетУчетаРасчетовСПокупателем, 
	|	СчетУчетаАвансовПолученных, 
	|	СчетУчетаРасчетовПоТареСПоставщиком, 
	|	СчетУчетаАвансовПоТареВыданных, 
	|	СчетУчетаРасчетовПоТареСПокупателем, 
	|	СчетУчетаАвансовПоТареПолученных, 
	|	СчетУчетаРасчетовСПоставщикомПриБартере, 
	|	СчетУчетаРасчетовСПокупателемПриБартере, 
	|	СчетУчетаНДСПриобретений, 
	|	СчетУчетаНДСПриобретенийПодтвержденный, 
	|	СчетУчетаНДСПродаж, 
	|	СчетУчетаНДСПродажПодтвержденный, 
	|	НалоговоеНазначениеПриобретений, 
	|	НалоговоеНазначениеПриобретенийПоТаре, 
	|	НалоговоеНазначениеПродаж, 
	|   НалоговоеНазначениеПродажПоТаре, 
	|	СтавкаНДСПриобретений, 
	|	СтавкаНДСПродаж, 
	|	Организация, 
	|	Контрагент, 
	|	Договор, 
	|	Амортизируется, 
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|";
	
	Индекс  =  1;
	
	ТекстЗапроса  =  "
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") + " КАК Приоритет" +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	
	|	Организация  =  &Организация И
	|	Контрагент   =  &Контрагент И
	|	Договор      =  &Договор И НЕ &Договор  =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс,  ГруппаДоговоров);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ	
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 		   =  &Организация И
		|	Контрагент  		   =  &Контрагент И
		|	Договор     		   =  &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ	
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &Организация И
	|	Контрагент  		   =  &Контрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс,  ГруппаКонтрагентов);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 		   =  &Организация И
		|	Контрагент             =  &ГруппаКонтрагентов" + Индекс + " И
		|	Договор     		   =  &ПустойДоговор
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &Организация И
	|	Контрагент  		   =  &ПустойКонтрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс,  ГруппаДоговоров);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 	 	   =  &ПустаяОрганизация И
		|	Контрагент             =  &Контрагент И
		|	Договор                =  &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &ПустаяОрганизация И
	|	Контрагент 			   =  &Контрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс,  ГруппаКонтрагентов);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация            =  &ПустаяОрганизация И
		|	Контрагент             =  &ГруппаКонтрагентов" + Индекс + " И
		|	Договор                =  &ПустойДоговор
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация            =  &ПустаяОрганизация И
	|	Контрагент             =  &ПустойКонтрагент И
	|	Договор                =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ПустойВидРасчетов И
	|	Организация            =  &ПустаяОрганизация И
	|	Контрагент             =  &ПустойКонтрагент И
	|	Договор                =  &ПустойДоговор
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.Текст  =  ТекстЗапроса;
	
	Выборка  =  Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.СчетРасчетов                      =  Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов                       =  Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя            =  Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя             =  Выборка.СчетУчетаАвансовПолученных;
		
		Результат.СчетУчетаТары                     =  Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетАвансовПоТаре                 =  Выборка.СчетУчетаАвансовПоТареВыданных;
		Результат.СчетУчетаТарыПокупателя           =  Выборка.СчетУчетаРасчетовПоТареСПокупателем;
		Результат.СчетАвансовПоТареПокупателя       =  Выборка.СчетУчетаАвансовПоТареПолученных;
		
		Результат.СчетРасчетовПриБартере            =  Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		Результат.СчетАвансовПриБартере             =  Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетРасчетовПокупателяПриБартере  =  Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетАвансовПокупателяПриБартере   =  Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		
		Результат.СчетУчетаНДСПриобретений            		 =  Выборка.СчетУчетаНДСПриобретений;
		Результат.СчетУчетаНДСПриобретенийПодтвержденный 	 =  Выборка.СчетУчетаНДСПриобретенийПодтвержденный;
		Результат.СчетУчетаНДСПродаж             			 =  Выборка.СчетУчетаНДСПродаж;
		Результат.СчетУчетаНДСПродажПодтвержденный           =  Выборка.СчетУчетаНДСПродажПодтвержденный;
		
		Результат.НалоговоеНазначениеПриобретений    		 =  Выборка.НалоговоеНазначениеПриобретений;
		Результат.НалоговоеНазначениеПриобретенийПоТаре      =  Выборка.НалоговоеНазначениеПриобретенийПоТаре;
		Результат.НалоговоеНазначениеПродаж    			     =  Выборка.НалоговоеНазначениеПродаж;
		Результат.НалоговоеНазначениеПродажПоТаре            =  Выборка.НалоговоеНазначениеПродажПоТаре;
		
		Результат.СтавкаНДСПриобретений	                 =  Выборка.СтавкаНДСПриобретений;
		Результат.СтавкаНДСПродаж            			 =  Выборка.СтавкаНДСПродаж;
		
		Результат.Амортизируется            			 =  Выборка.Амортизируется;
		
		Результат.Организация						 =  Выборка.Организация;
		Результат.Контрагент            			 =  Выборка.Контрагент;
		Результат.Договор            				 =  Выборка.Договор;
		Результат.ВидРасчетовПоДоговору            	 =  Выборка.ВидРасчетовПоДоговору;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ВалютаРегламентированногоУчета) Экспорт
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов  =  ВалютаРегламентированногоУчета 
		ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору  =  Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
		
	Иначе
		ВидРасчетовПоДоговору  =  Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
		
	Конецесли;
	
	Возврат ВидРасчетовПоДоговору;
	
КонецФункции              
//-----------------------------------------------------------------------------------------------

Процедура КаталогДанныхНачалоВыбора(Элемент,  СтандартнаяОбработка)
	
	Диалог  =  Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок  =  НСтр("ru = 'Выберите каталог сохранения xml файлов';uk = 'Виберіть каталог збереження xml файлів'");
	
	Диалог  =  Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок  =  НСтр("ru = 'Выберите каталог сохранения xml файлов';uk = 'Виберіть каталог збереження xml файлів'");
	
	Если Диалог.Выбрать() Тогда
		КаталогДанных  =  Диалог.Каталог;
		КаталогДанныхЭкспорта  =  Диалог.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Организация.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЮрикФизик = "Юрик";
		Если Локализация.КодЯзыкаИнтерфейса()="ru" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУ.Значение = "ЕДРПОУ";
		ИначеЕсли Локализация.КодЯзыкаИнтерфейса()="uk" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУ.Значение = "ЄДРПОУ";
		КонецЕсли;
	Иначе 
		ЮрикФизик = "Физик";
		ЭлементыФормы.НадписьКодПоЕДРПОУ.Значение = "ДРФО";
	КонецЕсли;
	//-----------------------------------------------------------------
	КодОргДоИзменений = Строка(КодПоЕДРПОУ);  
	
	Если (ЗначениеЗаполнено(ДоговорКонтрагента))
		И (ДоговорКонтрагента.Организация <> Организация) Тогда
		ДоговорКонтрагента  =  Неопределено;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ОбособленноеПодразделение)) 
		И (ОбособленноеПодразделение.Владелец <> Организация) Тогда
		ОбособленноеПодразделение  =  Неопределено;
	КонецЕсли;
	//-----------------------------------------------------------------
	
	Если НЕ Организация.Пустая() Тогда
		КодЯзыкаПечать  =  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация,  ТекущаяДата(), , , КодЯзыкаПечать);
		Если Организация.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				КодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ!';uk = 'У Вас не вказаний код ЄДРПОУ'"));
				КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;    
		ИначеЕсли Организация.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				КодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ДРФО!';uk = 'У Вас не вказаний код ДРФО!'"));
				КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;  
		КонецЕсли;	
	КонецЕсли;    
	//-----------------------------------------------------------
	
	Если КодОргДоИзменений<>Строка(КодПоЕДРПОУ)   тогда
		ИзменениеОсновныхПараметров();
	КонецЕсли;                      
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент,  КонтрагентДоИзменений)
	
	Если (ЗначениеЗаполнено(ДоговорКонтрагента)) 
		И (ДоговорКонтрагента.Владелец <> Контрагент) Тогда
		ДоговорКонтрагента  =  Неопределено;
	КонецЕсли;   
	
	Если КонтрагентДоИзменений<>Строка(Контрагент) Тогда
		ИзменениеОсновныхПараметров();
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементыФормы.ДоговорКонтрагента.Доступность = Истина;
	Иначе
		ЭлементыФормы.ДоговорКонтрагента.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент,  СтандартнаяОбработка)
	
	СтандартнаяОбработка  =  Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение(НСтр("ru  =  'Не указан контрагент!'; uk  =  'Не вказаний контрагент'"));
		Возврат;
	КонецЕсли;
	
	ФормаВыбора  =  Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(, Элемент,  ЭтаФорма);
	
	ФормаВыбора.ПараметрОтборПоВладельцу  =  Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность  =  Ложь;
	
	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                             =  Организация;
	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                        =  Истина;
	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                         =  ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность  =  Ложь;
	
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока  =  ДоговорКонтрагента;
	ФормаВыбора.ПараметрВыборГруппИЭлементов  =  ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовНН(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления,      
	|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную, 
	|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 	
	|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных	
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		НалоговаяНакладная.Ссылка КАК Ссылка, 
	|		НалоговаяНакладная.Номер КАК Номер, 
	|		НалоговаяНакладная.Дата КАК Дата, 
	|		НалоговаяНакладная.Контрагент КАК Контрагент, 
	|		НалоговаяНакладная.ВалютаДокумента КАК ВалютаДокумента, 
	|		НалоговаяНакладная.СуммаДокумента КАК СуммаДокумента, 
	|		НалоговаяНакладная.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		НалоговаяНакладная.Ответственный КАК Ответственный, 
	|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную, 
	|		НалоговаяНакладная.Проведен как Проведен, 
	|		НалоговаяНакладная.ПометкаУдаления как ПометкаУдаления,   
	|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных как ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
	|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных как ВключенаВЕдиныйРеестрНалоговыхНакладных
	|	ИЗ
	|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
	|	ГДЕ
	|		НалоговаяНакладная.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		
		НомерБезПрефикса  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		КодСпецРежима = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", РеквизитыДокумента.Документ.Метаданные()))
			И (РеквизитыДокумента.Документ.СпецРежимНалогообложения > 0) Тогда
			КодСпецРежима = "/" + РеквизитыДокумента.Документ.СпецРежимНалогообложения + "/";
		КонецЕсли;

		Если (ЕстьРеквизитДокумента("ОбособленноеПодразделение", РеквизитыДокумента.Документ.Метаданные()))
			И (ЗначениеЗаполнено(РеквизитыДокумента.Документ.ОбособленноеПодразделение.Префикс)) Тогда
			НомерБезПрефикса = НомерБезПрефикса + ?(ЗначениеЗаполнено(КодСпецРежима),КодСпецРежима,"//") + РеквизитыДокумента.Документ.ОбособленноеПодразделение.Префикс;
		Иначе
			Если ЗначениеЗаполнено(КодСпецРежима) Тогда
				НомерБезПрефикса = НомерБезПрефикса + КодСпецРежима;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыДокументов.Номер  = НомерБезПрефикса;
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		// КИТ-2005
		СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		
		ФИО = РегистрыСведений.ФИОФизЛиц.СрезПоследних(СтрокаТаблицыДокументов.Документ.Дата, Новый Структура("ФизЛицо", СтрокаТаблицыДокументов.Документ.КтоВыписалНалоговуюНакладную));
		Если ФИО.Количество() > 0 Тогда
			СтрокаТаблицыДокументов.КтоВыписалНалоговуюНакладную = ВРег(Лев(СокрЛ(ФИО[0].Имя), 1))
										 + ". "
										 + ВРег(Лев(СокрЛ(ФИО[0].Отчество), 1))
										 + ". "
										 + СокрЛП(ФИО[0].Фамилия); 
			
		Иначе
			СтрокаТаблицыДокументов.КтоВыписалНалоговуюНакладную = "" + СокрЛП(СтрокаТаблицыДокументов.Документ.КтоВыписалНалоговуюНакладную);									 
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовДод2(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления, 
	|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную, 
	|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
	|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных
	|ИЗ
	|	(ВЫБРАТЬ
	|		Приложение2КНалоговойНакладной.Ссылка, 
	|		Приложение2КНалоговойНакладной.Номер, 
	|		Приложение2КНалоговойНакладной.Дата, 
	|		Приложение2КНалоговойНакладной.Контрагент, 
	|		Приложение2КНалоговойНакладной.ВалютаДокумента, 
	|		Приложение2КНалоговойНакладной.СуммаДокумента, 
	|		Приложение2КНалоговойНакладной.СуммаНДСДокумента, 
	|		Приложение2КНалоговойНакладной.Ответственный, 
	|		Приложение2КНалоговойНакладной.Проведен, 
	|		Приложение2КНалоговойНакладной.ПометкаУдаления, 
	|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную, 
	|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
	|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных как ВключенаВЕдиныйРеестрНалоговыхНакладных   
	|	ИЗ
	|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
	|	ГДЕ
	|		Приложение2КНалоговойНакладной.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента);		
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		ФилиалПрефикс  =  "";
		СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		Если (ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения))
			И (НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0") Тогда
			КодСпецРежима  =  "" + СпецРежим;
		Иначе
			КодСпецРежима  =  " ";//как и в реестре
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
			НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		Иначе
			НомерФилиала  =  "";	
		КонецЕсли;
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		КонецЕсли;		
		
		НомерБезПрефикса = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		КодСпецРежима = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", РеквизитыДокумента.Документ.Метаданные()))
			И (РеквизитыДокумента.Документ.СпецРежимНалогообложения > 0) Тогда
			КодСпецРежима = "/" + РеквизитыДокумента.Документ.СпецРежимНалогообложения + "/";
		КонецЕсли;

		Если (ЕстьРеквизитДокумента("НалоговаяНакладная", РеквизитыДокумента.Документ.Метаданные()))
			И (ЗначениеЗаполнено(РеквизитыДокумента.Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс)) Тогда
			НомерБезПрефикса = НомерБезПрефикса + ?(ЗначениеЗаполнено(КодСпецРежима),КодСпецРежима,"//") + РеквизитыДокумента.Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс;
		Иначе
			Если ЗначениеЗаполнено(КодСпецРежима) Тогда
				НомерБезПрефикса = НомерБезПрефикса + КодСпецРежима;
			КонецЕсли;
		КонецЕсли;

		СтрокаТаблицыДокументов.Номер = НомерБезПрефикса;
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовАкт(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмяБазы="УТ" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	//|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.ПометкаУдаления,    
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
	|		АктОбОказанииПроизводственныхУслуг.Номер КАК Номер, 
	|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
	|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
	|		АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК ВалютаДокумента, 
	//|		АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК СуммаДокумента, 
	|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен, 
	|		АктОбОказанииПроизводственныхУслуг.ПометкаУдаления КАК ПометкаУдаления, 
	|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|	ГДЕ
	|		АктОбОказанииПроизводственныхУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2, 
	|	РеализацияТоваровУслуг.Ссылка, 
	|	РеализацияТоваровУслуг.Номер, 
	|	РеализацияТоваровУслуг.Дата, 
	|	РеализацияТоваровУслуг.Контрагент, 
	|	РеализацияТоваровУслуг.ВалютаДокумента, 
	//|	РеализацияТоваровУслуг.СуммаДокумента, 
	|	РеализацияТоваровУслуг.ПометкаУдаления, 
	|	РеализацияТоваровУслуг.Проведен,    
	|	РеализацияТоваровУслуг.Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)";
Иначе
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	//|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.ПометкаУдаления,    
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	//|		1 КАК ВидДокумента, 
	//|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
	//|		АктОбОказанииПроизводственныхУслуг.Номер КАК Номер, 
	//|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
	//|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
	//|		АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК ВалютаДокумента, 
	////|		АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК СуммаДокумента, 
	//|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен, 
	//|		АктОбОказанииПроизводственныхУслуг.ПометкаУдаления КАК ПометкаУдаления, 
	//|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный
	//|	ИЗ
	//|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	//|	ГДЕ
	//|		АктОбОказанииПроизводственныхУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	2, 
	|	РеализацияТоваровУслуг.Ссылка, 
	|	РеализацияТоваровУслуг.Номер, 
	|	РеализацияТоваровУслуг.Дата, 
	|	РеализацияТоваровУслуг.Контрагент, 
	|	РеализацияТоваровУслуг.ВалютаДокумента, 
	//|	РеализацияТоваровУслуг.СуммаДокумента, 
	|	РеализацияТоваровУслуг.ПометкаУдаления, 
	|	РеализацияТоваровУслуг.Проведен,    
	|	РеализацияТоваровУслуг.Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовСчет(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка, 
	|		СчетНаОплатуПокупателю.Номер КАК Номер, 
	|		СчетНаОплатуПокупателю.Дата КАК Дата, 
	|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент, 
	|		СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента, 
	|		СчетНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента, 
	|		СчетНаОплатуПокупателю.ПометкаУдаления КАК ПометкаУдаления, 
	|		СчетНаОплатуПокупателю.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|	ГДЕ
	|		СчетНаОплатуПокупателю.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВозвратТоваровОтПокупателя(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка, 
	|		ВозвратТоваровОтПокупателя.Номер КАК Номер, 
	|		ВозвратТоваровОтПокупателя.Дата КАК Дата, 
	|		ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент, 
	|		ВозвратТоваровОтПокупателя.ВалютаДокумента КАК ВалютаДокумента, 
	|		ВозвратТоваровОтПокупателя.СуммаДокумента КАК СуммаДокумента, 
	|		ВозвратТоваровОтПокупателя.ПометкаУдаления КАК ПометкаУдаления, 
	|		ВозвратТоваровОтПокупателя.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|	ГДЕ
	|		ВозвратТоваровОтПокупателя.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВозвратТоваровПоставщику(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ВозвратТоваровПоставщику.Ссылка КАК Ссылка, 
	|		ВозвратТоваровПоставщику.Номер КАК Номер, 
	|		ВозвратТоваровПоставщику.Дата КАК Дата, 
	|		ВозвратТоваровПоставщику.Контрагент КАК Контрагент, 
	|		ВозвратТоваровПоставщику.ВалютаДокумента КАК ВалютаДокумента, 
	|		ВозвратТоваровПоставщику.СуммаДокумента КАК СуммаДокумента, 
	|		ВозвратТоваровПоставщику.ПометкаУдаления КАК ПометкаУдаления, 
	|		ВозвратТоваровПоставщику.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВидНакл(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления,   
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка, 
	|		РеализацияТоваровУслуг.Номер КАК Номер, 
	|		РеализацияТоваровУслуг.Дата КАК Дата, 
	|		РеализацияТоваровУслуг.Контрагент КАК Контрагент, 
	|		РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента, 
	|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
	|		РеализацияТоваровУслуг.Проведен КАК Проведен, 
	|		РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления, 
	|		РеализацияТоваровУслуг.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовАктСверки(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		АктСверкиВзаиморасчетов.Ссылка КАК Ссылка, 
	|		АктСверкиВзаиморасчетов.Номер КАК Номер, 
	|		АктСверкиВзаиморасчетов.Дата КАК Дата, 
	|		АктСверкиВзаиморасчетов.Контрагент КАК Контрагент, 
	|		АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента, 
	|		АктСверкиВзаиморасчетов.Проведен КАК Проведен, 
	|		АктСверкиВзаиморасчетов.ПометкаУдаления КАК ПометкаУдаления, 
	|		АктСверкиВзаиморасчетов.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|	ГДЕ
	|		АктСверкиВзаиморасчетов.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 		
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовЗапит(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления, 
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
	|		РегистрацияВходящегоНалоговогоДокумента.Номер КАК Номер, 
	|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
	|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаДокумента КАК СуммаДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления КАК ПометкаУдаления, 
	|		РегистрацияВходящегоНалоговогоДокумента.Проведен КАК Проведен, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
	|	ГДЕ
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		ФилиалПрефикс  =  "";
		Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
			НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		Иначе
			НомерФилиала  =  "";	
		КонецЕсли;
		СтрокаТаблицыДокументов.Номер  =  ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхНН(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяБазы="БУ" или ИмяБазы="УТП" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
	|		РегистрацияВходящегоНалоговогоДокумента.Номер КАК Номер, 
	|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
	|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаДокумента КАК СуммаДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
	|		РегистрацияВходящегоНалоговогоДокумента.Проведен как Проведен, 
	|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
	|	ГДЕ
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
ИначеЕсли ИмяБазы="УПП" или ИмяБазы="УТ" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ЗаписьКнигиПриобретения.Ссылка КАК Ссылка, 
	|		ЗаписьКнигиПриобретения.Номер КАК Номер, 
	|		ЗаписьКнигиПриобретения.Дата КАК Дата, 
	|		ЗаписьКнигиПриобретения.Контрагент КАК Контрагент, 
	|		ЗаписьКнигиПриобретения.СуммаДокумента КАК СуммаДокумента, 
	|		ЗаписьКнигиПриобретения.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		ЗаписьКнигиПриобретения.Ответственный КАК Ответственный, 
	|		ЗаписьКнигиПриобретения.Проведен как Проведен, 
	|		ЗаписьКнигиПриобретения.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.ЗаписьКнигиПриобретения КАК ЗаписьКнигиПриобретения
	|	ГДЕ
	|		ЗаписьКнигиПриобретения.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
КонецЕсли;
	
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			

		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхПТУ(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
	|		ПоступлениеТоваровУслуг.Номер КАК Номер, 
	|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
	|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
	|		ПоступлениеТоваровУслуг.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
	|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
	|		ПоступлениеТоваровУслуг.Проведен как Проведен, 
	|		ПоступлениеТоваровУслуг.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда	
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	//|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
	|		ПоступлениеТоваровУслуг.Номер КАК Номер, 
	|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
	|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
	//|		ПоступлениеТоваровУслуг.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
	|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
	|		ПоступлениеТоваровУслуг.Проведен как Проведен, 
	|		ПоступлениеТоваровУслуг.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
КонецЕсли;
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			
		
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхСчет(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	//|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
	|		СчетНаОплатуПоставщика.Номер КАК Номер, 
	|		СчетНаОплатуПоставщика.Дата КАК Дата, 
	|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
	|		СчетНаОплатуПоставщика.СуммаДокумента КАК СуммаДокумента, 
	//|		СчетНаОплатуПоставщика.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
	|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
	|		СчетНаОплатуПоставщика.Проведен как Проведен, 
	|		СчетНаОплатуПоставщика.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|	ГДЕ
	|		СчетНаОплатуПоставщика.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			
		
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ТекСпецРежим  =  мСписокВыбораСпецРежимНалогообложения.НайтиПоЗначению(СпецРежимНалогообложения);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаДокументовЗаполнить(Кнопка)
	
	  ВыбратьПервичку();
	
КонецПроцедуры

Процедура ВыбратьПервичку()

	Если Не ЗначениеЗаполнено(НачПериода) ИЛИ 
		Не ЗначениеЗаполнено(КонПериода) ИЛИ
		Не ЗначениеЗаполнено(Организация) ИЛИ 
		Не ЗначениеЗаполнено(ТипДок)  
		Тогда
		ТекстСообщения  =  НСтр("ru  =  'Не указаны все обязательные поля!'; uk  =  'Не вказано всі обовязкові поля!'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;  
	
	Если Дата(НачПериода)>Дата(КонПериода) Тогда
		ТекстСообщения  =  НСтр("ru  =  'Начальная дата должна быть меньше конечной!'; uk  =  'Початкова дата повинна бути менше кінцевої!'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Очистить();
	ВсегоЧисло = "0";
	ИзНихЧисло = "0";    	
	//----------------------------------------------------------------------------------
	Если ТипДок = "ОказаниеУслуг" Тогда
		
		Попытка
			Если Метаданные.Имя = "УТ" Тогда
				х = 1/0;
			КонецЕсли;
		Исключение
			Предупреждение((НСтр("ru = 'Документ не предусмотрен конфигурацией ';uk = 'Документ не передбачено конфігурацією '")) + Символы.пс + Метаданные.КраткаяИнформация);
			Возврат;
		КонецПопытки;
		
		Если НЕ ИмяБазы="УТ" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
		|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
		|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
		|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный, 
		|		АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен
		|	ИЗ
		|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
		|	ГДЕ
		|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И АктОбОказанииПроизводственныхУслуг.Организация  =  &Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Дата, 
		|		РеализацияТоваровУслуг.Ссылка, 
		|		РеализацияТоваровУслуг.Контрагент, 
		|		РеализацияТоваровУслуг.Ответственный, 
		|		РеализацияТоваровУслуг.ДоговорКонтрагента, 
		|		РеализацияТоваровУслуг.Проведен
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РеализацияТоваровУслуг.Организация  =  &Организация
		|		И РеализацияТоваровУслуг.Услуги.Количество>0
		|		И (НЕ РеализацияТоваровУслуг.Товары.Количество > 0)) КАК ВложенныйЗапрос     
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.Проведен, 
		|	ВложенныйЗапрос.ДоговорКонтрагента}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ"; 
	Иначе
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		//|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
		//|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
		//|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
		//|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный, 
		//|		АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		//|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен
		//|	ИЗ
		//|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
		//|	ГДЕ
		//|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		//|		И АктОбОказанииПроизводственныхУслуг.Организация  =  &Организация
		//|	
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	
		//|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Дата, 
		|		РеализацияТоваровУслуг.Ссылка, 
		|		РеализацияТоваровУслуг.Контрагент, 
		|		РеализацияТоваровУслуг.Ответственный, 
		|		РеализацияТоваровУслуг.ДоговорКонтрагента, 
		|		РеализацияТоваровУслуг.Проведен
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РеализацияТоваровУслуг.Организация  =  &Организация
		|		И РеализацияТоваровУслуг.Услуги.Количество>0
		|		И (НЕ РеализацияТоваровУслуг.Товары.Количество > 0)) КАК ВложенныйЗапрос     
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.Проведен, 
		|	ВложенныйЗапрос.ДоговорКонтрагента}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";  
		КонецЕсли;
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда 
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если НЕ ИмяБазы="УТ" Тогда
			Если ТипЗнч(Док)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
				НоваяСтрока.СуммаНДСДокумента =  Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
				НоваяСтрока.СуммаДокумента  =  Док.СуммаДокумента;
			Иначе
				НоваяСтрока.СуммаДокумента  =  Док.Услуги.Итог("Сумма"); 
				НоваяСтрока.СуммаНДСДокумента = Док.Услуги.Итог("СуммаНДС");
                НоваяСтрока.СуммаБезНДС  =  Док.Услуги.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС"); 
			КонецЕсли;
		Иначе
			  НоваяСтрока.СуммаДокумента  =  Док.Услуги.Итог("Сумма"); 
				НоваяСтрока.СуммаНДСДокумента = Док.Услуги.Итог("СуммаНДС");
                НоваяСтрока.СуммаБезНДС  =  Док.Услуги.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС");
				КонецЕсли;
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовАкт();
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовАкт();		
	КонецЕсли;
	//-----------------------------------------------
	Если ТипДок = "ВозвратТоваровОтПокупателя" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВозвратТоваровОтПокупателя.Дата КАК Дата, 
		|		ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка, 
		|		ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент, 
		|		ВозвратТоваровОтПокупателя.Ответственный КАК Ответственный, 
		|		ВозвратТоваровОтПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ВозвратТоваровОтПокупателя.Проведен КАК Проведен
		|	ИЗ
		|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|	ГДЕ
		|		ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ВозвратТоваровОтПокупателя.Организация  =  &Организация
		|		И ВозвратТоваровОтПокупателя.Товары.Количество>0) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      	
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;   
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			//Если ИмяБазы = "УТ" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//Иначе 				
			//	Если ТипЗнч(Док)  =  Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
			//	Иначе
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//	КонецЕсли;
			//КонецЕсли;
			НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС;
			
		КонецЦикла;		
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВозвратТоваровОтПокупателя(); 
		Иначе ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли;    	
		//-----------------------------------------------
		Если ТипДок = "ВозвратТоваровПоставщику" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВозвратТоваровПоставщику.Дата КАК Дата, 
		|		ВозвратТоваровПоставщику.Ссылка КАК Ссылка, 
		|		ВозвратТоваровПоставщику.Контрагент КАК Контрагент, 
		|		ВозвратТоваровПоставщику.Ответственный КАК Ответственный, 
		|		ВозвратТоваровПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ВозвратТоваровПоставщику.Проведен КАК Проведен
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|	ГДЕ
		|		ВозвратТоваровПоставщику.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ВозвратТоваровПоставщику.Организация  =  &Организация
		|		И ВозвратТоваровПоставщику.Товары.Количество>0) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      	
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;   
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			//Если ИмяБазы = "УТ" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//Иначе 				
			//	Если ТипЗнч(Док)  =  Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
			//	Иначе
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//	КонецЕсли;
			//КонецЕсли;
			НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС;
			
		КонецЦикла;		
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВозвратТоваровПоставщику(); 
		Иначе ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли;    	
		//-----------------------------------------------

	Если ТипДок = "ВидНакладна" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Дата КАК Дата, 
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка, 
		|		РеализацияТоваровУслуг.Контрагент КАК Контрагент, 
		|		РеализацияТоваровУслуг.Ответственный КАК Ответственный, 
		|		РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РеализацияТоваровУслуг.Проведен КАК Проведен
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РеализацияТоваровУслуг.Организация  =  &Организация
		|		И РеализацияТоваровУслуг.Товары.Количество>0) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      	
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;   
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			Иначе 				
				Если ТипЗнч(Док)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
					НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
				Иначе
					НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС;
			
		КонецЦикла;		
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВидНакл(); 
		Иначе ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли;   
	//-----------------------------------------------
	Если ТипДок = "АктСверки" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		АктСверкиВзаиморасчетов.Дата КАК Дата, 
		|		АктСверкиВзаиморасчетов.Ссылка КАК Ссылка, 
		|		АктСверкиВзаиморасчетов.Контрагент КАК Контрагент, 
		|		АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		АктСверкиВзаиморасчетов.Ответственный КАК Ответственный, 
		|		АктСверкиВзаиморасчетов.Проведен КАК Проведен
		|	ИЗ
		|		Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|	ГДЕ
		|		АктСверкиВзаиморасчетов.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И АктСверкиВзаиморасчетов.Организация  =  &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента,  
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.СуммаДокумента  =  Док.ОстатокНаНачало + Док.ПоДаннымОрганизации.Итог("Дебет") -  Док.ПоДаннымОрганизации.Итог("Кредит");
			
		КонецЦикла;		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовАктСверки(); 
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовАктСверки(); 		
	КонецЕсли;       
	//------------------------------------------------------------------------
	Если ТипДок = "Счет" Тогда
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетНаОплатуПокупателю.Дата КАК Дата, 
		|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка, 
		|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент, 
		|		СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		СчетНаОплатуПокупателю.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|	ГДЕ
		|		СчетНаОплатуПокупателю.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И СчетНаОплатуПокупателю.Организация  =  &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Ответственный}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);   		
		ПостроительЗапроса.ЗаполнитьНастройки();      		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС;     
			
		КонецЦикла;		
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовСчет(); 
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовСчет(); 		
	КонецЕсли;         
	//-----------------------------------------------
	Если ТипДок = "НалоговаяНакладная" Тогда  
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		НалоговаяНакладная.Дата КАК Дата, 
		|		НалоговаяНакладная.Ссылка КАК Ссылка, 
		|		НалоговаяНакладная.Контрагент КАК Контрагент, 
		|		НалоговаяНакладная.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		НалоговаяНакладная.Ответственный КАК Ответственный, 
		|		НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
		|		НалоговаяНакладная.ПометкаУдаления КАК ПометкаУдаления,   
		|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|		НалоговаяНакладная.Проведен КАК Проведен,
		|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную,
		|		НалоговаяНакладная.Контрагент.ИНН КАК ИНН
		|	ИЗ
		|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
		|	ГДЕ
		|		НалоговаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И НалоговаяНакладная.Организация = &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.СпецРежимНалогообложения, 
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
		|	ВложенныйЗапрос.ИНН,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);      		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗарегистрированныеПоДанным1С Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗарегистрированныеПоДанным1СПлан Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если СпецРежимНалогообложения <> Неопределено Тогда
			ЭлементОтбора  =  Отбор.Добавить("СпецРежимНалогообложения");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  СпецРежимНалогообложения;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыписалНН) Тогда
			ЭлементОтбора  =  Отбор.Добавить("КтоВыписалНалоговуюНакладную");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ВыписалНН;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если БезНеплательщиков Тогда
			ЭлементОтбора  =  Отбор.Добавить("ИНН");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  "";
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно; 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			ИначеЕсли ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
			НоваяСтрока.Комментарий		  = Док.Комментарий;//***160406
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовНН(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовНН(); 		
	КонецЕсли;
	//-----------------------------------------------
	Если ТипДок = "Приложение2" Тогда
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Приложение2КНалоговойНакладной.Дата КАК Дата,
		|		Приложение2КНалоговойНакладной.Ссылка КАК Ссылка,
		|		Приложение2КНалоговойНакладной.Контрагент КАК Контрагент,
		|		Приложение2КНалоговойНакладной.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		Приложение2КНалоговойНакладной.Ответственный КАК Ответственный,
		|		Приложение2КНалоговойНакладной.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
		|		Приложение2КНалоговойНакладной.Проведен КАК Проведен,
		|		Приложение2КНалоговойНакладной.ПометкаУдаления КАК ПометкаУдаления,
		|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,
		|		Приложение2КНалоговойНакладной.Контрагент.ИНН КАК ИНН,
		|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
		|	ИЗ
		|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|	ГДЕ
		|		Приложение2КНалоговойНакладной.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И Приложение2КНалоговойНакладной.Организация = &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.СпецРежимНалогообложения, 
		|	ВложенныйЗапрос.Проведен, 
		|	ВложенныйЗапрос.ПометкаУдаления, 
		|	ВложенныйЗапрос.ИНН,
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.Проведен} 
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";  
		
		//Если УчетПоОбособленнымПодразделениям Тогда  	
		//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "&ОбособленноеПодразделениеП2",   "Приложение2КНалоговойНакладной.НалоговаяНакладная.ОбособленноеПодразделение");
		//Иначе
		//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "&ОбособленноеПодразделениеП2",   "NULL");
		//КонецЕсли;		
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);  		
		ПостроительЗапроса.ЗаполнитьНастройки();           		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);    		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗарегистрированныеПоДанным1С Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ОбособленноеПодразделение");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  ОбособленноеПодразделение;
		//	ЭлементОтбора.ВидСравнения   =  ?(ОбособленноеПодразделение.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		//КонецЕсли;
		
		//Если СпецРежимНалогообложения <> Неопределено Тогда
		Если ЗначениеЗаполнено(СпецРежимНалогообложения) Тогда
			ЭлементОтбора  =  Отбор.Добавить("СпецРежимНалогообложения");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  СпецРежимНалогообложения;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыписалНН) Тогда
			ЭлементОтбора  =  Отбор.Добавить("КтоВыписалНалоговуюНакладную");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ВыписалНН;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если БезНеплательщиков Тогда
			ЭлементОтбора  =  Отбор.Добавить("ИНН");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  "";
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно; 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ   =  ПодобранныйДокумент.Документ;
			НоваяСтрока.Комментарий = ПодобранныйДокумент.Документ.Комментарий;//***160406
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовДод2(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовДод2();  		
	КонецЕсли;
	//-----------------------------------------------  	
	Если ТипДок = "ЗаписьКнигиПриобретения" Тогда  	
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
		|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
		|		РегистрацияВходящегоНалоговогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
		//|		&ОбособленноеПодразделениеЗапит КАК ОбособленноеПодразделениеЗапит
		|	ИЗ
		|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
		|	ГДЕ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Ответственный}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      
		
		//Если УчетПоОбособленнымПодразделениям Тогда			
		//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "&ОбособленноеПодразделениеЗапит",   "РегистрацияВходящегоНалоговогоДокумента.ОбособленноеПодразделение");
		//	Иначе
		//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "&ОбособленноеПодразделениеЗапит",   "NULL");
		//КонецЕсли;		

		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);   		
		ПостроительЗапроса.ЗаполнитьНастройки(); 		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);	
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ОбособленноеПодразделение");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  ОбособленноеПодразделение;
		//	ЭлементОтбора.ВидСравнения   =  ?(ОбособленноеПодразделение.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		//КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС;
			
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовЗапит(); 
		Иначе
			ИзменениеОсновныхПараметров();			
		КонецЕсли;    		
		//ЗаполнитьРеквизитыДокументовЗапит();  		
	КонецЕсли; 
	//---------------------------------------------------------------
	Если ТипДок = "ВхНалоговыйДокумент" Тогда  
		Если ИмяБазы="БУ" или ИмяБазы="УТП" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
		|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
		|		РегистрацияВходящегоНалоговогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
		|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления КАК ПометкаУдаления, 
		|		РегистрацияВходящегоНалоговогоДокумента.ВидОперации КАК ВидОперации,  
		|		РегистрацияВходящегоНалоговогоДокумента.Проведен КАК Проведен,
		|		РегистрацияВходящегоНалоговогоДокумента.Комментарий КАК Комментарий 
		|	ИЗ
		|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
		|	ГДЕ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация 
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.Проведен,
		|	ВложенныйЗапрос.Комментарий} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";
	ИначеЕсли ИмяБазы="УПП" или ИмяБазы="УТ" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаписьКнигиПриобретения.Дата КАК Дата, 
		|		ЗаписьКнигиПриобретения.Ссылка КАК Ссылка, 
		|		ЗаписьКнигиПриобретения.Контрагент КАК Контрагент, 
		|		ЗаписьКнигиПриобретения.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ЗаписьКнигиПриобретения.Ответственный КАК Ответственный, 
		|		ЗаписьКнигиПриобретения.ПометкаУдаления КАК ПометкаУдаления, 
		|		ЗаписьКнигиПриобретения.ВидОперации КАК ВидОперации,  
		|		ЗаписьКнигиПриобретения.Проведен КАК Проведен,
		|		ЗаписьКнигиПриобретения.Комментарий КАК Комментарий 
		|	ИЗ
		|		Документ.ЗаписьКнигиПриобретения КАК ЗаписьКнигиПриобретения
		|	ГДЕ
		|		ЗаписьКнигиПриобретения.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ЗаписьКнигиПриобретения.Организация  =  &Организация 
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.Проведен,
		|	ВложенныйЗапрос.Комментарий} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";  
	КонецЕсли;
	
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация);		
		Отбор  =  ПостроительЗапроса.Отбор;
			
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ВидОперацииВхНН) Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ВидОперации");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  ВидОперацииВхНН;
		//	ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		//КонецЕсли;   
			
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
		
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc IS" тогда
				Иначе 
				Продолжить;
				КонецЕсли; 
			КонецЕсли;     		
					
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС")- Док.ВозвратнаяТара.Итог("Сумма");
			ИначеЕсли ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВхНН(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовВхНН(); 
	КонецЕсли;
	//---------------------------------------------------------------
	Если ТипДок = "ВхПостТовУслуг" Тогда
		
		Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
		|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
		|		ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
		|		ПоступлениеТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
		|		ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
		|		ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации, 
		|		ПоступлениеТоваровУслуг.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ПоступлениеТоваровУслуг.Организация  =  &Организация
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ВидОперации, 
		|	ВложенныйЗапрос.Комментарий, 
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";  
		
		ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
		|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
		|		ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
		|		ПоступлениеТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
		|		ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
		|		ПоступлениеТоваровУслуг.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ПоступлениеТоваровУслуг.Организация  =  &Организация
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Комментарий, 
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
КонецЕсли;
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация); 	
		Отбор  =  ПостроительЗапроса.Отбор;
			
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ВидОперацииПТУ) Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ВидОперации");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  ВидОперацииПТУ;
		//	ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		//КонецЕсли;   

		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc IS" тогда
				Иначе 
				Продолжить;
				КонецЕсли; 
			КонецЕсли;   
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС") - Док.Оборудование.Итог("СуммаНДС") - Док.ОбъектыСтроительства.Итог("Сумма") - Док.БланкиСтрогогоУчета.Итог("Сумма") ; 
			ИначеЕсли ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС")- Док.Оборудование.Итог("СуммаНДС")- Док.ОбъектыСтроительства.Итог("СуммаНДС") - Док.БланкиСтрогогоУчета.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВхПТУ();
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовВхПТУ();
	КонецЕсли;
    //---------------------------------------------------------------
	Если ТипДок = "ВхСчет" Тогда 

		Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетНаОплатуПоставщика.Дата КАК Дата, 
		|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
		|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
		|		СчетНаОплатуПоставщика.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
		|		СчетНаОплатуПоставщика.ПометкаУдаления КАК ПометкаУдаления,
		|		СчетНаОплатуПоставщика.Комментарий КАК Комментарий,
		|		СчетНаОплатуПоставщика.ВидОперации КАК ВидОперации, 
		|		СчетНаОплатуПоставщика.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|	ГДЕ
		|		СчетНаОплатуПоставщика.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И СчетНаОплатуПоставщика.Организация  =  &Организация
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Комментарий,
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";
	ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда 
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетНаОплатуПоставщика.Дата КАК Дата, 
		|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
		|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
		|		СчетНаОплатуПоставщика.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
		|		СчетНаОплатуПоставщика.ПометкаУдаления КАК ПометкаУдаления,
		|		СчетНаОплатуПоставщика.Комментарий КАК Комментарий,
		|		СчетНаОплатуПоставщика.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|	ГДЕ
		|		СчетНаОплатуПоставщика.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И СчетНаОплатуПоставщика.Организация  =  &Организация
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Комментарий,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ"; 
		КонецЕсли;
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  Организация); 	
		Отбор  =  ПостроительЗапроса.Отбор;
			
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если НЕ ИмяБазы="УПП" Тогда
		//	Если ЗначениеЗаполнено(ВидОперацииВхСчет) Тогда
		//		ЭлементОтбора  =  Отбор.Добавить("ВидОперации");
		//		ЭлементОтбора.Использование  =  Истина;
		//		ЭлементОтбора.Значение       =  ВидОперацииВхСчет;
		//		ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		//	КонецЕсли; 
		//КонецЕсли;
				
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc IS" тогда
				Иначе 
				Продолжить;
				КонецЕсли; 
			КонецЕсли;   
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС") - Док.Оборудование.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") ;
			ИначеЕсли ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС")- Док.Оборудование.Итог("СуммаНДС")- Док.ОбъектыСтроительства.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности(); 
			ЗаполнитьРеквизитыДокументовВхСчет(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовВхСчет();
	КонецЕсли;
    //---------------------------------------------------------------
	ПроверитьНаличиеПервички();
	ПроверитьНаличиеОтчетов(СуффиксДСС,  СуффиксМДЗ);
	
КонецПроцедуры

Процедура ПроверитьНаличиеПервички()
	
	Попытка 
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
		Для Каждого СтрокаДокумент из ТаблицаДокументов Цикл
			Документ  =  СтрокаДокумент.Документ;
			ИД  =  Строка(Документ.УникальныйИдентификатор());
			
			Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
				СтатусТекст  =  СокрЛП(ПроверитьПоИД(Строка(App.GetSendSTTByExDocID(ИД)))); 	
				СтатусТекст2  =  СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
				НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ, "Документ");    				
				НайденнаяСтрока.Статус = Формат(Строка(СтатусТекст + ",  " + СтатусТекст2)); 
			ИначеЕсли (НЕ ТипДок="ВхНалоговыйДокумент") 
				И (НЕ ТипДок="ВхПостТовУслуг") 
				И (НЕ ТипДок="ВхСчет") Тогда 
				НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ, "Документ");    				
				НайденнаяСтрока.Статус = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc IS';uk = 'Документ не передавався в M.E.Doc IS'")); 					
			Иначе
				НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ, "Документ");    				
				НайденнаяСтрока.Статус = Формат(НСтр("ru = '';uk = ''")); 
			КонецЕсли;     		
		КонецЦикла;	
		ЭлементыФормы.ЭДОВозможен.Видимость = Истина;
		ЭлементыФормы.ЭДОНевозможен.Видимость = ложь;
	Исключение
		ЭлементыФормы.ЭДОВозможен.Видимость = ложь;
		ЭлементыФормы.ЭДОНевозможен.Видимость = истина;			
		Возврат; 
	КонецПопытки;     
	
КонецПроцедуры

Процедура ПриОткрытии() 
	
	ЭлементыФормы.НадписьПараметры.Значение       	 =  ВосстановитьЗначение("НадписьПараметры");   	
	ПроверитьПараметры();
	ЭлементыФормы.ПараметрыПредприятияПоле.Значение  =  ВосстановитьЗначение("ПараметрыПредприятияПоле"); 
	ЭлементыФормы.ПараметрыФилиалПоле.Значение       =  ВосстановитьЗначение("ПараметрыФилиалПоле"); 
	ЭлементыФормы.ПараметрыЛогинПоле.Значение        =  ВосстановитьЗначение("ПараметрыЛогинПоле"); 
	ЭлементыФормы.ПараметрыПарольПоле.Значение       =  ВосстановитьЗначение("ПараметрыПарольПоле");   
	
	ЭлементыФормы.НастройкаКонтрольВерсииМедка.Значение  =  1000188;
	ИмяБазы=ПолучитьИмяБазы();
	ЭлементыФормы.ОтпрНет.Значение  =  1;
	ЭлементыФормы.ОтпрНетОтч.значение  =  1; 
	ЭлементыФормы.ПСпрКонтрагентов.Значение = 4;
	ОбратитесьКРазработчику=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
	
	ЭлементыФормы.ПерСохраненнный.Значение = ?(ЭлементыФормы.ПерСохраненнный.Значение <> Неопределено,  ВосстановитьЗначение("ПерСохраненнный"),  1);
	ЭлементыФормы.ПерНачГода.Значение       =  ВосстановитьЗначение("ПерНачГода"); 
	ЭлементыФормы.ПерНачМесяца.Значение     =  ВосстановитьЗначение("ПерНачМесяца"); 
	ЭлементыФормы.ПерНачНедели.Значение     =  ВосстановитьЗначение("ПерНачНедели"); 
	ЭлементыФормы.ПерТекДата.Значение       =  ВосстановитьЗначение("ПерТекДата");   
	ЭлементыФормы.СпрУдалять.Значение       =  ВосстановитьЗначение("СпрУдалять"); 
	
	ЭлементыФормы.ЗапЛок.Значение = ?(ЭлементыФормы.ЗапЛок.Значение <> Неопределено,  ВосстановитьЗначение("ЗапЛок"),  1);
	ЭлементыФормы.ЗапЛок.Значение  =  ВосстановитьЗначение("ЗапЛок");
	ЭлементыФормы.ЗапТерм.Значение  =  ВосстановитьЗначение("ЗапТерм");
	ЭлементыФормы.ЗапКлиент.Значение  =  ВосстановитьЗначение("ЗапКлиент");
		
	ЭлементыФормы.ФР.Значение  =  ВосстановитьЗначение("ФР"); 
	ЭлементыФормы.ОД.Значение  =  ВосстановитьЗначение("ОД"); 
	
	ЭлементыФормы.ФР1.Значение  =  ВосстановитьЗначение("ФР1"); 
	ЭлементыФормы.ОД1.Значение  =  ВосстановитьЗначение("ОД1");
	
	ВыборЯрлыка();
	ЭлементыФормы.ТипДокОтчета.СписокВыбора  =  СписокРеглОтчетов;   	
	
	ПутьКФайлуМедка  =  ВосстановитьЗначение("ПутьКФайлуМедка");	 	
	Если Не ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда 
		ПутьКФайлуМедкаНачалоВыбораИзСписка(Неопределено,  Ложь);
	КонецЕсли; 
	
	Если  Не ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда 
		Предупреждение(НСтр("ru = 'Настройки программы не выполнены!';uk = 'Налаштування програми не вказано!'"));
		ЭтаФорма.ТекущийЭлемент  =  ЭлементыФормы.ПутьКФайлуМедка;
		ЭтаФорма.ЭлементыФормы.ЭДОВозможен.Видимость =  Ложь;
		ЭтаФорма.ЭлементыФормы.ЭДОНЕвозможен.Видимость =  Истина;
	КонецЕсли;   
	
	Организация   	 =  ВосстановитьЗначение("Организация"); 
	Если Не ЗначениеЗаполнено(Организация) Тогда 		
		СпрОрг   =  Справочники.Организации.Выбрать(); 		
		Если СпрОрг.Следующий() тогда 			 
			Организация  =  СпрОрг; 		 
		КонецЕсли; 	
	КонецЕсли; 
	
	ОрганизацияСправочники   	 =  ВосстановитьЗначение("ОрганизацияСправочники"); 
	Если Не ЗначениеЗаполнено(ОрганизацияСправочники) Тогда 		
		ОрганизацияСправочникиСпр   =  Справочники.Организации.Выбрать(); 		
		Если ОрганизацияСправочникиСпр.Следующий() тогда 			 
			ОрганизацияСправочники  =  ОрганизацияСправочникиСпр; 		 
		КонецЕсли; 	
	КонецЕсли;     
	
	КодПоЕДРПОУ 	 =  ВосстановитьЗначение("КодПоЕДРПОУ");
	КодПоЕДРПОУСпр 	 =  ВосстановитьЗначение("КодПоЕДРПОУСпр");
	
	пФил   	 =  ВосстановитьЗначение("пФил");
	
	КодДок 	 =  ВосстановитьЗначение("КодДок");
	Ответственный  =  ВосстановитьЗначение("Ответственный");
	ЗарегистрированныеПоДанным1С  =  ВосстановитьЗначение("ЗарегистрированныеПоДанным1С");
	ЗарегистрированныеПоДанным1СПлан  =  ВосстановитьЗначение("ЗарегистрированныеПоДанным1СПлан"); 
	//----------------------------------------------------------	
	Контрагент  =  ВосстановитьЗначение("Контрагент");
	ДоговорКонтрагента  =  ВосстановитьЗначение("ДоговорКонтрагента");		
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементыФормы.ДоговорКонтрагента.Доступность = Истина;
	Иначе
		ЭлементыФормы.ДоговорКонтрагента.Доступность = Ложь;
	КонецЕсли;        
	//-----------------------------------------------------------
	НачПериодаОтч  =  ВосстановитьЗначение("НачПериодаОтч");   
	КонПериодаОтч  =  ВосстановитьЗначение("КонПериодаОтч"); 
	ОрганизацияОтчета  =  ВосстановитьЗначение("ОрганизацияОтчета"); 
	ТипДокОтчета  =  ВосстановитьЗначение("ТипДокОтчета");
	
	БезНДССтатья  =  ВосстановитьЗначение("БезНДССтатья");
	УчетПоОбособленнымПодразделениям  =  Ложь;
	
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность  =  Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ВывестиСписок.Доступность  =  Ложь;
	ЭлементыФормы.х2.Доступность  =  Ложь;
	ЭлементыФормы.х3.Доступность  =  Ложь;
	
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УпорядочитьАЗ.Доступность  =  Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УпорядочитьЗА.Доступность  =  Ложь; 
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьАЗОтчеты.Доступность  =  Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьЗАОтчеты.Доступность  =  Ложь; 
	ЭлементыФормы.КПТаблПредпр.Кнопки.УпорядочитьАЗПредприятия.Доступность  =  Ложь;
	ЭлементыФормы.КПТаблПредпр.Кнопки.УпорядочитьЗАПредприятия.Доступность  =  Ложь; 
	
	ЭлементыФормы.КПТаблПредпр.Кнопки.ПредпрХМЛ.Доступность  =  Ложь;
	ЭлементыФормы.КПТаблПредпр.кнопки.ПредпрВыгр.Доступность  =  Ложь;
	ЭлементыФормы.КПТаблПредпр.кнопки.НайтиВсеПредприятия.Доступность = Истина;
	
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ВывестиСписокОтчетов.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Ложь;	       	
	
	СепараторВПервичке();
	СепараторВОтчетах();
	ДобавитьСписокПервички();
	Элементыформы.ТипДок.СписокВыбора= СписокПервички;
	ТипДок 	 =  ВосстановитьЗначение("ТипДок");
	ДоступностьКнопокПервички();
	ЭлементыФормы.СпецРежимНалогообложения.СписокВыбора  =  мСписокВыбораСпецРежимНалогообложения;
	СпецРежимНалогообложения  =  ВосстановитьЗначение("СпецРежимНалогообложения");  
	
	ОрганизацияПриИзменении(ЭлементыФормы.Организация);
	ОрганизацияОтчетаПриИзменении(ЭлементыФормы.Организация);  
	
	Если ЭлементыФормы.НачПериода.Значение = Дата('00010101') и ЭлементыФормы.КонПериода.Значение = Дата('00010101') Тогда
		ЭлементыФормы.НачПериода.Значение = Дата(Год(Текущаядата()), 01, 01);
		ЭлементыФормы.КонПериода.Значение = КонецДня(Дата(Год(Текущаядата()), 12, 31));	
	КонецЕСли;
	
	ВыборПериодаОтбораПервичкиДефолтные(); 		
	
	Если ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Ложь;
	Иначе
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Истина; 
	КонецЕсли;   
	//----------------------------------------------------------------------------
	Доступнось_ДСС_НАЛ();
	ВыборСправочникаКлюч();      
	Подключение1СМедок(); 
	//ПутьКФайлуМедкаПриИзменении(Истина);	
	//----------------------------------------------------------------------------
	СписокДокуменов  =  Новый СписокЗначений(); 	
	Для каждого Док из Метаданные.Документы Цикл
		Если НЕ Лев(Док.Синоним, 1) = "("  Тогда
			СписокДокуменов.Добавить(Док.Имя,  Док.Синоним);
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ВыборДокаУС1С.СписокВыбора  = СписокДокуменов; 
	СписокДокуменов.СортироватьПоЗначению();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	
	СохранитьЗначение("НадписьПараметры",       ЭлементыФормы.НадписьПараметры.Значение);
	СохранитьЗначение("ПараметрыПредприятияПоле",       ПараметрыПредприятияПоле);
	СохранитьЗначение("ПараметрыФилиалПоле",       ЭлементыФормы.ПараметрыФилиалПоле.Значение);
	СохранитьЗначение("ПараметрыЛогинПоле",       ПараметрыЛогинПоле);
	СохранитьЗначение("ПараметрыПарольПоле",       ЭлементыФормы.ПараметрыПарольПоле.Значение);
	
	СохранитьЗначение("НачПериода",       ЭлементыФормы.НачПериода.Значение); 
	СохранитьЗначение("КонПериода",       ЭлементыФормы.КонПериода.Значение);
	СохранитьЗначение("ПутьКФайлуМедка",  ПутьКФайлуМедка);	
	СохранитьЗначение("Организация",      Организация);  
	СохранитьЗначение("ОрганизацияСправочники",      ОрганизацияСправочники); 
	СохранитьЗначение("КодПоЕДРПОУ",      КодПоЕДРПОУ);
	СохранитьЗначение("КодПоЕДРПОУСпр",      КодПоЕДРПОУСпр);
	СохранитьЗначение("пФил",     		 пФил);
	СохранитьЗначение("ТипДок",     		 ТипДок);  
	СохранитьЗначение("КодДок",     		 КодДок);
	СохранитьЗначение("СпецРежимНалогообложения",  СпецРежимНалогообложения); 	
	СохранитьЗначение("Контрагент",  Контрагент);   
	СохранитьЗначение("Ответственный",  Ответственный);
	СохранитьЗначение("ДоговорКонтрагента",  ДоговорКонтрагента);
	СохранитьЗначение("ЗарегистрированныеПоДанным1С",   ЗарегистрированныеПоДанным1С);
	СохранитьЗначение("ЗарегистрированныеПоДанным1СПлан",   ЗарегистрированныеПоДанным1СПлан);
	СохранитьЗначение("ПерСохраненнный",   ЭлементыФормы.ПерСохраненнный.Значение); 
	СохранитьЗначение("ПерНачГода",   ЭлементыФормы.ПерНачГода.Значение); 
	СохранитьЗначение("ПерНачМесяца",   ЭлементыФормы.ПерНачМесяца.Значение); 
	СохранитьЗначение("ПерНачНедели",   ЭлементыФормы.ПерНачНедели.Значение); 
	СохранитьЗначение("ПерТекДата",   ЭлементыФормы.ПерТекДата.Значение); 
		
	СохранитьЗначение("ЗапЛок",   ЭлементыФормы.ЗапЛок.Значение); 
	СохранитьЗначение("ЗапТерм",   ЭлементыФормы.ЗапТерм.Значение); 
	СохранитьЗначение("ЗапКлиент",   ЭлементыФормы.ЗапКлиент.Значение); 
	
	СохранитьЗначение("НачПериодаОтч",   ЭлементыФормы.НачПериодаОтч.Значение);
	СохранитьЗначение("КонПериодаОтч",   ЭлементыФормы.КонПериодаОтч.Значение);
	СохранитьЗначение("ОрганизацияОтчета",   ЭлементыФормы.ОрганизацияОтчета.Значение);
	СохранитьЗначение("ТипДокОтчета",   ЭлементыФормы.ТипДокОтчета.Значение); 
	
	СохранитьЗначение("СпрУдалять",   ЭлементыФормы.СпрУдалять.Значение);
	
	СохранитьЗначение("ФР",       ЭлементыФормы.ФР.Значение);
	СохранитьЗначение("ОД",       ЭлементыФормы.ОД.Значение);
	
	СохранитьЗначение("ФР1",       ЭлементыФормы.ФР1.Значение);
	СохранитьЗначение("ОД1",       ЭлементыФормы.ОД1.Значение);

	
	//------------------------------------------------------------------------------
	Если НЕ МедКомпонент  =  Неопределено Тогда
		МедКомпонент.CloseAddin();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаДокументовПриПолученииДанных(Элемент,  ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки  =  ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Строка(ТаблицаДокументов.Индекс(ДанныеСтроки)+1));
		
		Если (НЕ ТипДок="НалоговаяНакладная") 
			И (НЕ ТипДок="Приложение2") Тогда
			ОформлениеСтроки.Ячейки.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.ЦветФона  =  ЦветаСтиля.ЦветФонаКнопки; 
			ОформлениеСтроки.Ячейки.ВключенаВЕдиныйРеестрНалоговыхНакладных.ЦветФона  =  ЦветаСтиля.ЦветФонаКнопки;
		КонецЕсли;

		Если (ТипДок="ВхНалоговыйДокумент") ИЛИ (ТипДок="ВхПостТовУслуг") ИЛИ (ТипДок="ВхСчет") Тогда 
              ОформлениеСтроки.Ячейки.Статус.ЦветФона  =  ЦветаСтиля.ЦветФонаКнопки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриНажатииНажатие(Элемент) 	
	
	Если (ЭлементыФормы.ПутьКФайлуМедка.Значение <> "" и ЭлементыФормы.НадписьЯрлык.Значение<>"") Тогда
		Попытка 
			Путь  = Строка(ЭлементыФормы.ПутьКФайлуМедка.Значение) + Строка(ЭлементыФормы.НадписьЯрлык.Заголовок);
			Если НадписьПараметры Тогда
				Параметры  =  ?(ЗначениеЗаполнено(СокрЛП(ПараметрыПредприятияПоле)),  " -org "+СокрЛП(ПараметрыПредприятияПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыФилиалПоле)),  " -dept "+СокрЛП(ПараметрыФилиалПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыЛогинПоле)),  " -user "+СокрЛП(ПараметрыЛогинПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыПарольПоле)),  " -pass "+СокрЛП(ПараметрыПарольПоле),  "");
			Иначе
				Параметры = "";
			КонецЕсли;
			ЗапуститьПриложение(Путь + Параметры);      
			Возврат;
		Исключение
			Предупреждение(НСтр("ru = 'Не удалось запустить M.E.Doc IS. Проверьте путь к ехе-файлу программы!';uk = 'Не вдалось запустити  M.E.Doc IS. Перевірте шлях до ехе-файлу програми!'"));
		КонецПопытки;
	Иначе 
		Предупреждение(НСтр("ru = 'Не указан путь к М.E.Doc на вкладке Настройки !';uk = 'Не вказаний шлях до М.E.Doc на вкладці Налаштування!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипДокПриИзменении(Элемент)
	
	ДоступностьКнопокПервички();
	
КонецПроцедуры

Процедура ДоступностьКнопокПервички()
	
	КодДокДоИзменений = Строка(КодДок);	
	//------------------------------------------------------------------
	Если Не ЗначениеЗаполнено(ТипДок) Тогда 		
		ТипДок  =  "НалоговаяНакладная";  	
	КонецЕсли; 
	//------------------------------------------------------------------	
	Если ТипДок  =  "ОказаниеУслуг" Тогда 			КодДок = "А";
		Если ИмяБазы = "УТП" Тогда
			ЭлементыФормы.Проведен.Доступность = Ложь;
			ЭлементыФормы.Проведен.Значение = Ложь;
		Иначе
			ЭлементыФормы.Проведен.Доступность = Истина; 
		КонецЕсли;
	ИначеЕсли ТипДок  =  "Счет"  Тогда				 КодДок = "С";
		ЭлементыФормы.Проведен.Значение = Ложь;
		ЭлементыФормы.Проведен.Доступность = Ложь;
	ИначеЕсли ТипДок  =  "ВозвратТоваровОтПокупателя" Тогда 		КодДок = "ВОП";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ВозвратТоваровПоставщику" Тогда 		КодДок = "ВТП";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ВидНакладна" Тогда 		КодДок = "ВН";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "АктСверки"  Тогда 		КодДок = "АС";
		Если ИмяБазы = "УПП" или ИмяБазы = "УТ"  Тогда
			ЭлементыФормы.Проведен.Доступность = Ложь;
			ЭлементыФормы.Проведен.Значение = Ложь;
		Иначе
			ЭлементыФормы.Проведен.Доступность = Истина; 
		КонецЕсли;
	ИначеЕсли ТипДок  =  "Приложение2"  Тогда 		КодДок = "П2";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ВхНалоговыйДокумент" Тогда КодДок = "ВхНД";
	ИначеЕсли ТипДок  =  "ВхПостТовУслуг" Тогда 	КодДок = "ВхПТУ"; 
	ИначеЕсли ТипДок  =  "ВхСчет" Тогда 			КодДок = "ВхС";
	КонецЕсли;
	
	Если ТипДок  =  "НалоговаяНакладная" или ТипДок  =  "Приложение2" Тогда КодДок = "НН";
		Элементыформы.ЗарегистрированныеПоДанным1СПлан.Видимость = Истина;
		Элементыформы.ЗарегистрированныеПоДанным1С.Видимость = Истина;
		ЭлементыФормы.СпецРежимНалогообложения.Видимость = Истина;
		//ЭлементыФормы.ВидОперацииВхНН.Видимость=Ложь;
		//ЭлементыФормы.ВидОперацииПТУ.Видимость=Ложь;
		//ЭлементыФормы.ВидОперацииВхСчет.Видимость=Ложь; 
		ЭлементыФормы.НадписьСпецрежим.Видимость = Истина;
		ЭлементыФормы.НадписьСпецрежим.Значение = "Спецрежим"; 
		ЭлементыФормы.Проведен.Доступность = Истина;
		
		Иначе 
		Элементыформы.ЗарегистрированныеПоДанным1СПлан.Видимость = Ложь;
		Элементыформы.ЗарегистрированныеПоДанным1СПлан.Значение = Ложь;
		Элементыформы.ЗарегистрированныеПоДанным1С.Видимость = Ложь;
		Элементыформы.ЗарегистрированныеПоДанным1С.Значение = Ложь;
		//ЭлементыФормы.СпецРежимНалогообложения.Значение = Неопределено;
		ЭлементыФормы.СпецРежимНалогообложения.Видимость = Ложь;
		ЭлементыФормы.НадписьСпецрежим.Видимость = Ложь;
		//ЭлементыФормы.ВидОперацииВхНН.Видимость=Ложь;
		//ЭлементыФормы.ВидОперацииПТУ.Видимость=Ложь;
		//ЭлементыФормы.ВидОперацииВхСчет.Видимость=Ложь;
	КонецЕсли;     	    	
	
	Если ТипДок="ВхНалоговыйДокумент" Тогда
		//ЭлементыФормы.ВидОперацииВхНН.Видимость = Истина;
		//ЭлементыФормы.ВидОперацииПТУ.Видимость = Ложь;
		//ЭлементыФормы.ВидОперацииВхСчет.Видимость = Ложь;
		//ЭлементыФормы.НадписьСпецрежим.Видимость = Истина; 
		//ЭлементыФормы.НадписьСпецрежим.Значение="Операция";
		//ПеречислениеСсылка.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента
		//ЭлементыФормы.ПолеВыбора1.Значение = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента;
		//ЭлементыФормы.СпецРежимНалогообложения.Видимость=истина;
	ИначеЕсли ТипДок="ВхПостТовУслуг" Тогда
		//ЭлементыФормы.ВидОперацииВхНН.Видимость = Ложь; 
		//ЭлементыФормы.ВидОперацииПТУ.Видимость = Истина;
		//ЭлементыФормы.ВидОперацииВхСчет.Видимость = Ложь;    
		//ЭлементыФормы.НадписьСпецрежим.Видимость = Истина; 
		//ЭлементыФормы.НадписьСпецрежим.Значение="Операция";
	ИначеЕсли ТипДок="ВхСчет" Тогда
		//ЭлементыФормы.ВидОперацииВхНН.Видимость = Ложь;
		//ЭлементыФормы.ВидОперацииПТУ.Видимость = Ложь;
		//ЭлементыФормы.ВидОперацииВхСчет.Видимость = Истина;
		//ЭлементыФормы.НадписьСпецрежим.Видимость = Истина; 
		//ЭлементыФормы.НадписьСпецрежим.Значение="Операция";
		Если ИмяБазы="БУ" Тогда
			ЭлементыФормы.Проведен.Значение=Ложь;
		КонецЕсли;
    КонецЕсли;     
	
	Если ТипДок="ВхНалоговыйДокумент" ИЛИ ТипДок="ВхПостТовУслуг" ИЛИ ТипДок="ВхСчет" Тогда
		ЭлементыФормы.ВхДокМедок.Видимость=Истина;
		ЭлементыФормы.НадписьОтправлять.Видимость=Ложь;
		ЭлементыФормы.ОтпрНет.Видимость=Ложь;
		ЭлементыФормы.х2.Видимость=Ложь;
		ЭлементыФормы.х3.Видимость=Ложь;
		ЭлементыФормы.ФР.Видимость=Ложь;
		ЭлементыФормы.ОД.Видимость=Ложь;
	Иначе
		ЭлементыФормы.ВхДокМедок.Видимость=Ложь;
		ЭлементыФормы.НадписьОтправлять.Видимость=Истина;
		ЭлементыФормы.ОтпрНет.Видимость=Истина;
		ЭлементыФормы.х2.Видимость=Истина;
		ЭлементыФормы.х3.Видимость=Истина;
		ЭлементыФормы.ФР.Видимость=Истина;
		ЭлементыФормы.ОД.Видимость=Истина;  
	КонецЕсли;
	
	СепараторВПервичке();
	
	Если КодДокДоИзменений<> Строка(КодДок) Тогда
		ИзменениеОсновныхПараметров();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИзменениеОсновныхПараметров()
	
	ТаблицаДокументов.Очистить();
	ВсегоЧисло = "0";
	ИзНихЧисло = "0";
	ОтправленоЧисло = "0";
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность  =  Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ВывестиСписок.Доступность = Ложь;  
	ЭлементыФормы.ОтпрНет.Доступность = Ложь; 	
	ЭлементыФормы.х2.Доступность = Ложь;	
	ЭлементыФормы.х3.Доступность = Ложь;
		
КонецПроцедуры

Процедура ИзменениеОсновныхПараметровОтчетов()
	
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьАЗОтчеты.Доступность = Ложь; 
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьЗАОтчеты.Доступность = Ложь; 
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ВывестиСписокОтчетов.Доступность = Ложь;  
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Ложь;
	ТаблицаОтчетов.Очистить();
	
КонецПроцедуры

Процедура ИзменениеОсновныхПараметровБезОчисткиТаблицы()
	
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность  =  Ложь;
	ЭлементыФормы.ОтпрНет.Доступность = Ложь; 	
	ЭлементыФормы.х2.Доступность = Ложь;	
	ЭлементыФормы.х3.Доступность = Ложь; 
	
КонецПроцедуры

Процедура ОтобразитьВозможности()
	
	ВсегоЧисло = ТаблицаДокументов.Количество();
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ВывестиСписок.Доступность = Истина;  			
	
	Если ТипДок = "ОказаниеУслуг" или ТипДок = "Счет" или ТипДок = "АктСверки" или ТипДок = "ВидНакладна" или ТипДок = "ВозвратТоваровОтПокупателя"
		или ТипДок = "ВозвратТоваровПоставщику" Тогда
		ЭлементыФормы.х2.Доступность = Ложь;
		ЭлементыФормы.х3.Доступность = Истина;
	Иначе                    
		ЭлементыФормы.х2.Доступность = Истина;
		ЭлементыФормы.х3.Доступность = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОтпрНет.Доступность = Истина;  
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УпорядочитьАЗ.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УпорядочитьЗА.Доступность = Истина;
	ОтпрНет  =  1;
	
КонецПроцедуры

Процедура ОтобразитьВозможностиОтчетов()
	
	ВсегоЧислоОтч = ТаблицаОтчетов.Количество();
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ВывестиСписокОтчетов.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьАЗОтчеты.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьЗАОтчеты.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Истина;
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеНачалоВыбора(Элемент,  СтандартнаяОбработка)		
	Если Не ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка  =  Ложь;
		Предупреждение(НСтр("ru  =  'Не указана организация'; uk  =  'Не вказана організація'"));
		Возврат;
	КонецЕсли;     
КонецПроцедуры

Процедура ТаблицаПредприятийПриПолученииДанных(Элемент,  ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки  =  ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.Номер.УстановитьТекст(Строка(ТаблицаПредприятий.Индекс(ДанныеСтроки)+1));
	КонецЦикла;
	
	Если ТаблицаПредприятий.Количество()>0 Тогда
		ЭлементыФормы.КПТаблПредпр.Кнопки.ПредпрВыгр.Доступность  =  Истина;
		ЭлементыФормы.КПТаблПредпр.Кнопки.ПредпрУд.Доступность  =  Истина;
		ЭлементыФормы.КПТаблПредпр.Кнопки.ПредпрХМЛ.Доступность  =  Истина;
		ЭлементыФормы.КПТаблПредпр.Кнопки.УпорядочитьАЗПредприятия.Доступность  =  Истина;
		ЭлементыФормы.КПТаблПредпр.Кнопки.УпорядочитьЗАПредприятия.Доступность  =  Истина;  
		ЭлементыФормы.ВсегоЧислоПредприятий.Значение = ТаблицаПредприятий.Количество();
	КонецЕсли; 		
	
КонецПроцедуры

Процедура ПутьКФайлуМедкаОкончаниеВводаТекста(Элемент,  Текст,  Значение,  СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ЭлементыФормы.ПутьКФайлуМедка.Значение) Тогда
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Истина;    
	Иначе 
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Ложь;		
	КонецЕсли;   
	
КонецПроцедуры

Процедура КПТаблПредпрПредпрХМЛ(Кнопка)
	
	ОтборПредпр  =  Новый Структура;   	
	Для Каждого СтрокаПредприятия из ТаблицаПредприятий Цикл
		Предприятие  =  СтрокаПредприятия.Предприятие; 
		НайденнаяСтрока  =  ТаблицаПредприятий.Найти(Предприятие, "Предприятие"); 
		Если ЗначениеЗаполнено(НайденнаяСтрока.ЕДРПОУИНН) Тогда
			ОтборПредпр.Вставить(НайденнаяСтрока); 
		Иначе
			Предупреждение(Нстр("ru = 'В таблице существуют предприятия с незаполненным ЕДРПОУ (ДРФО)!';uk = 'В таблиці існують підприємства з незаповненим ЄДРПОУ (ДРФО)!'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;                
	
	Если ОтборПредпр.Количество()>0 Тогда
		СохрФайлаХМЛ  =  Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		СохрФайлаХМЛ.Фильтр = НСтр("ru = 'XML-файлы';uk = 'XML-файли'") + "|*.xml";
		СохрФайлаХМЛ.Заголовок = НСтр("ru = 'Сохранить';uk = 'Зберегти'");
		
		Если СохрФайлаХМЛ.Выбрать() Тогда
			ИмяФайла =  Строка(СохрФайлаХМЛ.ПолноеИмяФайла);
		Иначе 
			Возврат;
		КонецЕсли;   	
		
		ОбъектXML  =  Новый ЗаписьXML;   	
		ОбъектXML.ОткрытьФайл(ИмяФайла,  "windows-1251");
		ОбъектXML.ЗаписатьОбъявлениеXML();  
		
		ОбъектXML.ЗаписатьНачалоЭлемента("ZVIT");
		ОбъектXML.ЗаписатьНачалоЭлемента("TRANSPORT");
		//ЗаписатьЭлемент(ОбъектXML,  "CREATEDATE",  СокрЛП("22.08.2013"));
		ЗаписатьЭлемент(ОбъектXML,  "CREATEDATE",  Формат(ТекущаяДата(),  "ДФ = dd.MM.yyyy"));
		ЗаписатьЭлемент(ОбъектXML,  "VERSION",  СокрЛП("3.0"));
		ЗаписатьЭлемент(ОбъектXML,  "TYPE",  СокрЛП("ORG"));
		ОбъектXML.ЗаписатьКонецЭлемента();
		
		Для каждого НайденнаяСтрока из ТаблицаПредприятий Цикл 
			
			Запрос =  новый Запрос();
			Запрос.Текст  =  
			"ВЫБРАТЬ
			|КодыОрганизацииСрезПоследних.*
			|ИЗ
			| Справочник.Организации КАК Организации
			| ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&НаДату,  
			|Организация  =  &ПараметрОрганизиция) КАК КодыОрганизацииСрезПоследних
			| ПО Организации.Ссылка  =  КодыОрганизацииСрезПоследних.Организация
			|ГДЕ
			| Организации.Ссылка  =  &ПараметрОрганизиция"; 
			
			Запрос.УстановитьПараметр("НаДату",  ТекущаяДата()); // Дата отримання актуальних даних кодів на поточну дату
			//Запрос.УстановитьПараметр("ПараметрОрганизиция",  ТекущаяДата()); 
			Запрос.УстановитьПараметр("ПараметрОрганизиция",  НайденнаяСтрока.Предприятие); 
			Выборка  =  Запрос.Выполнить().Выбрать(); 
			//----------------------------------------------------------------------------------------
			//"ВЫБРАТЬ
			//Организации.*, 
			//КодыОрганизацииСрезПоследних.*, 
			//КонтактнаяИнформация.*, 
			//КонтактнаяИнформация.ЗначениеПоУмолчанию, 
			//ОтветственныеЛицаОрганизацийСрезПоследних.*
			//ИЗ
			//Справочник.Организации КАК Организации
			//ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
			//ПО Организации.Ссылка  =  ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
			//ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			//ПО Организации.Ссылка  =  КонтактнаяИнформация.Объект
			//ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних КАК КодыОрганизацииСрезПоследних
			//ПО Организации.Ссылка  =  КодыОрганизацииСрезПоследних.Организация"}, 
			
			
			//-----------------------------------------Выбор банковских счетов------------------
			//ЗапросБанковскиеСчета =  новый Запрос();
			//ЗапросБанковскиеСчета.Текст  =  
			//"ВЫБРАТЬ
			//|БанковскиеСчета.НомерСчета как НомерСчета, 
			//|БанковскиеСчета.ВидСчета как ВидСчета, 
			//|БанковскиеСчета.ВалютаДенежныхСредств, 
			//|БанковскиеСчета.Банк.Наименование
			//|ИЗ
			//| Справочник.БанковскиеСчета КАК БанковскиеСчета, 
			//| Справочники.Банки
			//|ГДЕ
			//| Организации.Ссылка  =  &ПараметрОрганизиция";  
			//ЗапросБанковскиеСчета.УстановитьПараметр("ПараметрОрганизиция",  НайденнаяСтрока.Предприятие); 
			//ВыборкаБанковскиеСчета  =  ЗапросБанковскиеСчета.Выполнить().Выбрать(); 
			////-----------------------------------Выбор адресов------------------------
			//ЗапросАдрес =  новый Запрос();
			//ЗапросАдрес.Текст  =  
			//"ВЫБРАТЬ
			////|Адрес.
			//|ИЗ
			//| КонтактнаяИнформация.РегистрыСведений КАК Адрес
			//|ГДЕ
			//| Организации.Ссылка  =  &ПараметрОрганизиция"; 
			//ЗапросАдрес.УстановитьПараметр("Адрес",  Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации ИЛИ Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации); 
			//ЗапросАдрес.УстановитьПараметр("ПараметрОрганизиция",  НайденнаяСтрока.Предприятие); 
			//ВыборкаАдрес  =  ЗапросАдрес.Выполнить().Выбрать(); 
			////-----------------------------------Выбор ответственных лиц-------------------------
			
			Если Выборка.Следующий() Тогда      				
				ОбъектXML.ЗаписатьНачалоЭлемента("ORG");
				ОбъектXML.ЗаписатьНачалоЭлемента("FIELDS");    
				Предприятие  =  НайденнаяСтрока.Предприятие; 	
				НайденнаяСтрока  =  ТаблицаПредприятий.Найти(Предприятие, "Предприятие"); 
				СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(НайденнаяСтрока.Предприятие,  ТекущаяДата(), , , КодЯзыкаПечать);
				
				Если НайденнаяСтрока.Предприятие.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда	
					ЗаписатьЭлемент(ОбъектXML,  "EDRPOU",  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ));    
				ИначеЕсли НайденнаяСтрока.Предприятие.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					ЗаписатьЭлемент(ОбъектXML,  "EDRPOU",  СокрЛП(СведенияОПоставщике.КодПоДРФО));
				КонецЕсли;
				
				ЗаписатьЭлемент(ОбъектXML,  "DEPT",  СокрЛП(НайденнаяСтрока.Филиал));
				
				Если НайденнаяСтрока.Предприятие.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
					ЗаписатьЭлемент(ОбъектXML,  "JUR",  СокрЛП("true"));
				Иначе 
					ЗаписатьЭлемент(ОбъектXML,  "JUR",  СокрЛП("false"));
				КонецЕсли; 
				
				ЗаписатьЭлемент(ОбъектXML,  "DPACD",  XMLСтрока(СокрЛП(Выборка.НалоговаяИнспекция)));
				ЗаписатьЭлемент(ОбъектXML,  "NAME",  XMLСтрока(СокрЛП(НайденнаяСтрока.Предприятие.НаименованиеПолное)));
				ЗаписатьЭлемент(ОбъектXML,  "SHORTNAME",  XMLСтрока(СокрЛП(НайденнаяСтрока.Предприятие.Наименование)));  
				
				ЗаписатьЭлемент(ОбъектXML,  "PROPERTY",  "10");
				ЗаписатьЭлемент(ОбъектXML,  "ACTIVITY",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "FINANC",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "STATFUND",  СокрЛП(""));  			
				ЗаписатьЭлемент(ОбъектXML,  "ENTQTY",  СокрЛП(""));   				
				ЗаписатьЭлемент(ОбъектXML,  "KOATYY",  СокрЛП(Выборка.КодКОАТУУ));
				//ИНН,  ФИО,  должность - директора и бухгалтера----------
				ЗаписатьЭлемент(ОбъектXML,  "LEADINDTAX",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "LEADFIO",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "LEADPOS",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "CHIEFACCINDTAX",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "CHIEFACCFIO",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "CHIEFACCPOS",  СокрЛП(""));
				
				ЗаписатьЭлемент(ОбъектXML,  "OKONX",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "KVK",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "CODENDS",  СокрЛП(Выборка.НомерСвидетельства));
				ЗаписатьЭлемент(ОбъектXML,  "INDTAXNUM",  СокрЛП(Выборка.НомерРегистрации));
				ЗаписатьЭлемент(ОбъектXML,  "PFUOTVFIO",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "PFURESP",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "PFUPILG",  СокрЛП(""));
				
				ЗаписатьЭлемент(ОбъектXML,  "PFUDEPT",  СокрЛП(Выборка.КодОрганаПФУ));
				ЗаписатьЭлемент(ОбъектXML,  "PFUNUM",  СокрЛП(Выборка.НомерРегистрацииПФ));
				
				ЗаписатьЭлемент(ОбъектXML,  "KVED",  СокрЛП(Выборка.КодКВЕД));
				ЗаписатьЭлемент(ОбъектXML,  "INSURFNDACCNUM",  СокрЛП(Выборка.НомерФСС));
				
				ЗаписатьЭлемент(ОбъектXML,  "BANKFINID",  СокрЛП(""));
				ЗаписатьЭлемент(ОбъектXML,  "BANKFINTYPE",  СокрЛП(""));  
				
				ЗаписатьЭлемент(ОбъектXML,  "PROF_RISK",  СокрЛП(Выборка.КлассПрофессиональногоРиска)); 	
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("ORGADR");
			ОбъектXML.ЗаписатьНачалоЭлемента("FIELDS"); 
			ЗаписатьЭлемент(ОбъектXML,  "COUNTRY",  СокрЛП("804"));
			ЗаписатьЭлемент(ОбъектXML,  "JUR",  СокрЛП("1"));
			ЗаписатьЭлемент(ОбъектXML,  "REGION",  СокрЛП(""));
			ЗаписатьЭлемент(ОбъектXML,  "AREA",  СокрЛП(""));
			ЗаписатьЭлемент(ОбъектXML,  "STREET",  СокрЛП(""));
			ЗаписатьЭлемент(ОбъектXML,  "ZIP",  СокрЛП(""));
			ЗаписатьЭлемент(ОбъектXML,  "LOCALITY",  СокрЛП(""));
			ЗаписатьЭлемент(ОбъектXML,  "BUILDNUM",  СокрЛП(""));
			ЗаписатьЭлемент(ОбъектXML,  "BUILDLETTER",  СокрЛП(""));
			ЗаписатьЭлемент(ОбъектXML,  "CORPSNUM",  СокрЛП(""));
			ЗаписатьЭлемент(ОбъектXML,  "APARTNUM",  СокрЛП(""));   
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			//	ОбъектXML.ЗаписатьНачалоЭлемента("FIELDS"); 
			//	ЗаписатьЭлемент(ОбъектXML,  "COUNTRY",  СокрЛП("804"));
			//	ЗаписатьЭлемент(ОбъектXML,  "JUR",  СокрЛП("0"));
			//	ЗаписатьЭлемент(ОбъектXML,  "REGION",  СокрЛП(""));
			//	ЗаписатьЭлемент(ОбъектXML,  "AREA",  СокрЛП(""));
			//	ЗаписатьЭлемент(ОбъектXML,  "STREET",  СокрЛП(""));
			//	ЗаписатьЭлемент(ОбъектXML,  "ZIP",  СокрЛП(""));
			//	ЗаписатьЭлемент(ОбъектXML,  "LOCALITY",  СокрЛП(""));
			//	ЗаписатьЭлемент(ОбъектXML,  "BUILDNUM",  СокрЛП(""));
			//	ЗаписатьЭлемент(ОбъектXML,  "BUILDLETTER",  СокрЛП(""));
			//	ЗаписатьЭлемент(ОбъектXML,  "CORPSNUM",  СокрЛП(""));
			//	ЗаписатьЭлемент(ОбъектXML,  "APARTNUM",  СокрЛП(""));   
			//ОбъектXML.ЗаписатьКонецЭлемента();
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбъектXML.ЗаписатьНачалоЭлемента("ORGBNK");
			ОбъектXML.ЗаписатьНачалоЭлемента("FIELDS");  
			ЗаписатьЭлемент(ОбъектXML,  "ACCTYPE",  СокрЛП("")); 
			ЗаписатьЭлемент(ОбъектXML,  "BANK",  СокрЛП("")); 
			ЗаписатьЭлемент(ОбъектXML,  "CURRENCY",  СокрЛП("")); 
			ЗаписатьЭлемент(ОбъектXML,  "ACCNUM",  СокрЛП("")); 
			ОбъектXML.ЗаписатьКонецЭлемента();   
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбъектXML.ЗаписатьКонецЭлемента(); 
		КонецЦикла;  
		ОбъектXML.ЗаписатьКонецЭлемента(); 
		ОбъектXML.Закрыть();  
		
		Предупреждение(Нстр("ru  =  'Сохранен :'; uk  =  'Збережений :'") + Символы.ПС + СокрЛП(ИмяФайла));
		
		Если ОКХМЛПредприятий Тогда
			ЗапуститьПриложение(СохрФайлаХМЛ.Каталог);
		КонецЕсли;
		
		Если ОФХМЛПредприятия Тогда
			ЗапуститьПриложение(ИмяФайла);
		КонецЕсли;
	Иначе 
		Предупреждение(Нстр("ru = 'Нет предприятий для экспорта.'; uk = 'Відсутні підприємства для експорту.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаПредприятийПослеУдаления(Элемент)
	
	Если ТаблицаПредприятий.Количество()  =  0 Тогда 
		ЭлементыФормы.КПТаблПредпр.Кнопки.ПредпрВыгр.Доступность  =  Ложь;
		ЭлементыФормы.КПТаблПредпр.Кнопки.ПредпрУд.Доступность  =  Ложь;
		ЭлементыФормы.КПТаблПредпр.Кнопки.ПредпрХМЛ.Доступность  =  Ложь;
		ЭлементыФормы.КПТаблПредпр.Кнопки.УпорядочитьАЗПредприятия.Доступность  =  Ложь;
		ЭлементыФормы.КПТаблПредпр.Кнопки.УпорядочитьЗАПредприятия.Доступность  =  Ложь; 
	КонецЕсли;
	
	ЭлементыФормы.ВсегоЧислоПредприятий.Значение = ТаблицаПредприятий.Количество();      
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаДокументовМодосЗапуск(Кнопка)
	
	ПрефиксТекст="Внимание";
	ЗапускМедка(ПрефиксТекст);
	
КонецПроцедуры

Процедура КПТаблПредпрЗапускМедокТП(Кнопка)
	
	ПрефиксТекст="Внимание";	
	ЗапускМедка(ПрефиксТекст);
	
КонецПроцедуры

Процедура АвтоСохрПредХМЛПриИзменении(Элемент)
	
	Если ЭлементыФормы.АвтоСохрПредХМЛ.Значение  =  Истина Тогда 
		ЭлементыФормы.ПутьКСохрХМЛПредпр.Доступность  =  Истина;
		ЭлементыФормы.НастройкиОткрыватьХМЛПредпр.Доступность  =  Истина;
	Иначе
		ЭлементыФормы.ПутьКСохрХМЛПредпр.Доступность  =  Ложь;
		ЭлементыФормы.НастройкиОткрыватьХМЛПредпр.Доступность  =  Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПутьКСохрХМЛПредпрНачалоВыбора(Элемент,  СтандартнаяОбработка)
	
	Папка  =  Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Папка.Выбрать() Тогда
		ПутьКСохрХМЛПредпр  =  Строка(Папка.Каталог); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаПредприятийПредприятиеПриИзменении(Элемент)
	
	ТекДанные  =  ЭлементыФормы.ТаблицаПредприятий.ТекущиеДанные; 
	Если НЕ ЗначениеЗаполнено(ТекДанные.Предприятие) Тогда 
		ТекДанные.ЕДРПОУИНН  =  ""; 
	Иначе 
		КодЯзыкаПечать  =  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекДанные.Предприятие,  ТекущаяДата(), , , КодЯзыкаПечать);
		Если ТекДанные.Предприятие.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				ТекДанные.ЕДРПОУИНН  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			Иначе 
				ТекДанные.ЕДРПОУИНН  =  "";
			КонецЕсли;    
		ИначеЕсли ТекДанные.Предприятие.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				ТекДанные.ЕДРПОУИНН  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
			Иначе 
				ТекДанные.ЕДРПОУИНН  =  "";
				
			КонецЕсли;  
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбнПериодПДНажатие(Элемент)
	
	ВыборПериодаОтбораПервичкиДефолтные();  
	
КонецПроцедуры

Процедура ПутьКФайлуМедкаНачалоВыбораИзСписка(Элемент,  СтандартнаяОбработка)
	
	УстановленныйМедок  =  Новый СписокЗначений(); 		
	HKEY_LOCAL_MACHINE = 2147483650;
	
	Н = 0; 	
	Пока Н<>25 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDoc", "SoftWare\IntellectService\BusinessDoc" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_LOCAL_MACHINE,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			Если НЕ Лев(Файл.Имя, 2) = "1C" и НЕ Лев(Файл.Имя, 3) = "Arm" Тогда
				УстановленныйМедок.Добавить(СтрокаРегистрации);
			КонецЕсли;		
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;
	
	Н = 0; 	
	Пока Н<>10 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDocStation",  "SoftWare\IntellectService\BusinessDocStation" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_LOCAL_MACHINE,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			УстановленныйМедок.Добавить(СтрокаРегистрации);  	
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;  
	
	ЭлементыФормы.ПутьКФайлуМедка.СписокВыбора  =  УстановленныйМедок;
	
	Если НЕ СтандартнаяОбработка и УстановленныйМедок.Количество() = 1 Тогда
		ПутьКФайлуМедка  =  УстановленныйМедок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПутьКСохрХМЛПредпрОкончаниеВводаТекста(Элемент,  Текст,  Значение,  СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ЭлементыФормы.ПутьКСохрХМЛПредпр.Значение) Тогда
		ЭлементыФормы.НетСтрокиХМЛПредприятий.Видимость =  Истина;    
	Иначе 
		ЭлементыФормы.НетСтрокиХМЛПредприятий.Видимость =  Ложь;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаПредприятийПередОкончаниемРедактирования(Элемент,  НоваяСтрока,  ОтменаРедактирования,  Отказ)
	
	//Отказ = Истина;
КонецПроцедуры

Процедура ЗапЛокПриИзменении(Элемент)
	
	ВыборЯрлыка();
	
КонецПроцедуры

Процедура КоманднаяПанель1ЗаполнитьДокументами(Кнопка)
	
	Если Не ЗначениеЗаполнено(НачПериодаОтч) ИЛИ 
		Не ЗначениеЗаполнено(КонПериодаОтч) ИЛИ
		Не ЗначениеЗаполнено(ОрганизацияОтчета) ИЛИ 
		Не ЗначениеЗаполнено(ТипДокОтчета)  
		Тогда
		ТекстСообщения  =  НСтр("ru  =  'Не указаны все обязательные поля!'; uk  =  'Не вказано всі обовязкові поля!'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;  
	
	Если Дата(НачПериодаОтч)>Дата(КонПериодаОтч) Тогда
		ТекстСообщения  =  НСтр("ru  =  'Начальная дата должна быть меньше конечной!'; uk  =  'Початкова дата повинна бути менше кінцевої!'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;   
	
	ТаблицаОтчетов.Очистить();  	
	//----------------------------------------------------------------------------------
	Запрос  =  Новый Запрос();  		
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	РегламентированныйОтчет.Ссылка КАК ДокументОтчет, 
	|	РегламентированныйОтчет.Периодичность КАК ПериодОтчета,  
	|	РегламентированныйОтчет.ДатаПодписи КАК Модифицирован, 
	|	РегламентированныйОтчет.ПометкаУдаления КАК ПометкаУдаленияОтчета			
	|ИЗ
	|	Документ.РегламентированныйОтчет как РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Дата МЕЖДУ &НачПериодаОтч И &КонПериодаОтч
	|   И РегламентированныйОтчет.ИсточникОтчета  =  &ИсточникОтчета   
	|   И РегламентированныйОтчет.Организация  =  &ОрганизацияОтчета
	|УПОРЯДОЧИТЬ ПО
	|   РегламентированныйОтчет.ДатаПодписи УБЫВ";
	Запрос.УстановитьПараметр("НачПериодаОтч",   НачалоДня(НачПериодаОтч));
	Запрос.УстановитьПараметр("КонПериодаОтч",   КонецДня(КонПериодаОтч));
	Запрос.УстановитьПараметр("ОрганизацияОтчета",   ОрганизацияОтчета);
	Запрос.УстановитьПараметр("ИсточникОтчета",  ТипДокОтчета);       
	Выборка  =  Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйРядок  =  ТаблицаОтчетов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовыйРядок,  Выборка);
	КонецЦикла;
	
	//-----------------------------------------------------------------
	Если Выборка.Количество() > 0 Тогда
		ОтобразитьВозможностиОтчетов();
		Доступнось_ДСС_НАЛ();
	КонецЕсли;
	//-----------------------------------------------------------------
	ПроверитьНаличиеОтчетов(СуффиксДСС,  СуффиксМДЗ);   
	
КонецПроцедуры

Процедура КоманднаяПанель1ЗапускМедокОтчеты(Кнопка)
	
	ПрефиксТекст="Внимание";
	ЗапускМедка(ПрефиксТекст);
	
КонецПроцедуры

Процедура КоманднаяПанель1ДействиеОтчеты(Кнопка)
	
	Попытка
		//-----------------------------------------------------------------------------------------
		НашаВерсияРазделители = Метаданные.Версия;
		НашаВерсия  =  Число(СтрЗаменить(НашаВерсияРазделители,  ".",  "")); 
		//-----------------------------------------------------------------------------------------
		Если ИмяБазы  =  "БУ" или "ТЕХТРЕЙД" или "кпЖРЕУ" Тогда
			Минимальная = "1.2.13.4";
			МинимальнаяВерсия = Число(СтрЗаменить(Минимальная,  ".",  "")); 
			Если 
				НашаВерсия < МинимальнаяВерсия
				Тогда
				x =  1/0;
			КонецЕсли;
		ИначеЕсли ИмяБазы = "УТ" Тогда
			Минимальная = "2.3.18.1";
			МинимальнаяВерсия = Число(СтрЗаменить(Минимальная,  ".",  ""));
			Если 
				НашаВерсия < МинимальнаяВерсия
				Тогда
				x =  1/0;
			КонецЕсли;
		ИначеЕсли ИмяБазы = "УТП" Тогда
			Минимальная = "1.2.14.3";
			НашаВерсия = Число(СтрЗаменить(Минимальная,  ".",  ""));
			Если 
				НашаВерсия < МинимальнаяВерсия
				Тогда
				x =  1/0;  
			КонецЕсли; 
		ИначеЕсли ИмяБазы = "УПП" Тогда
			Минимальная = "1.3.22.2";
			МинимальнаяВерсия = Число(СтрЗаменить(Минимальная,  ".",  "")); 
			Если 
				НашаВерсия < МинимальнаяВерсия
				Тогда
				x =  1/0;
			КонецЕсли;
			//Иначе
			//МедКомпонент.CancelDoc(НСтр("ru = 'Передача данных в Вашу конфигурацию не реализована!';uk = 'Передача документу не реалізовано для Вашої конфгурації!'"));
			//Возврат;	
		КонецЕсли;
	Исключение
		Предупреждение(НСтр("ru = 'Обновитесь до версии ';uk = 'Оновіться до версії '") + Минимальная);
		Возврат;
	КонецПопытки; 
	//-----------------------------------------------------------------------------------------
	Если ЭлементыФормы.ОтчНал.Значение = Ложь и ЭлементыФормы.ОтчСтат.Значение = Ложь Тогда
		Предупреждение(Нстр("ru = 'Выберите получателя отчета - налоговую и/или статистику !';uk = 'Оберіть отримувача звіту - податкова та/або статистика !'"));
		Возврат;
	КонецЕсли;   
	//-----------------------------------------------------------------------------------------
	Попытка 
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение 
		Предупреждение(НСтр("ru = 'Передача документов отложена. Возможные причины:';uk = 'Передача документів відкладено. Можливі причини:'") + Символы.ПС + 
		НСтр("ru = '- приложение M.E.DOC IS не запущено.';uk = '- програма M.E.DOC IS не запущена.'") + символы.ПС + 
		НСтр("ru = '- предприятие из списка не выбрано.';uk = '- підприємство із списку не вибрано.'"));
		Возврат; 
	КонецПопытки;    
	//-----------------------------------------------------------------------------------------	
	Попытка 
		Если НЕ ПроверкаВерсииМедка(App.GetPrgVersion()) Тогда
			Возврат;
		КонецЕсли; 
	Исключение 
		Предупреждение(НСтр("ru = 'Ошибка при определении версии.';uk = 'Помилка при визначенні версії.'"));
	КонецПопытки;
	//-----------------------------------------------------------------------------------------	
	Попытка
		orgId  =  App.SeekOrg(КодПоЕДРПОУ1, пФил1); 
		Если orgId = 0 Тогда 
			ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.Сформировать.Доступность = Ложь;
			Предупреждение(НСтр("ru = 'Предприятия не существует в M.E.DOC IS :';uk = 'Підприємства не існує в M.E.DOC IS :'") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ'") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Провірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала  корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да,  создайте в M.E.DOC IS новое предприятие.';uk = 'Якщо Так,  створіть в M.E.DOC IS нове підприємство.'")); 
			//ИзменениеОсновныхПараметровБезОчисткиТаблицы();
			Возврат; 
		КонецЕсли;   
	Исключение 
		Предупреждение(НСтр("ru = 'Ошибка при определении наличия предприятия.';uk = 'Помилка прии визначенні версії підприємства.'"));
	КонецПопытки;           	
	//----------------------------------------------------------------------------------------- 
	КоличествоОтчетов = 0;	
	КолвоОтчетов  =  0;
	Колво1ПВ  =  0;
	КолвоРНН  =  0;
	КолвоБаланс  =  0;
	КолвоФинрез  =  0;
	КолвоБалансМП  =  0;
	//СуффиксДСС = Строка("SS");
	//СуффиксМДЗ = Строка("MD");
	СписокДляОткрытияОтчет = Новый Массив();
	
	ПредупреждениеПериодОтчета = НСтр("ru = 'Документы передаются,  начиная с отчетности за ';uk = 'Документи передаютсья починаючи зі звітносіті за '");
	ПредупреждениеПериодТекст = НСтр("ru = 'Выбран отчет за: ';uk = 'Ваш звіт має період: '");
	
	Для каждого СтрокаОтчет Из ЭлементыФормы.ТаблицаОтчетов.ВыделенныеСтроки Цикл  
		ДокументОтчет  =  СтрокаОтчет.ДокументОтчет; 
		
		Если ОтчСтат Тогда
			ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор())+ СуффиксДСС);    
			НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет, "ДокументОтчет"); 		
			Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
				КоличествоОтчетов = КоличествоОтчетов + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ОтчНал Тогда
			ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор())+ СуффиксМДЗ);    
			НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет, "ДокументОтчет"); 		
			Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
				КоличествоОтчетов = КоличествоОтчетов + 1;
			КонецЕсли;
		КонецЕсли;    		
	КонецЦикла;    	
	
	Если КоличествоОтчетов>0 тогда   
		Ответ = Вопрос(НСтр("ru = 'Документы существуют в M.E.Doc IS:';uk = 'Документи існують в M.E.Doc IS:'") + Символы.ПС + 
		+ Число(КоличествоОтчетов) +  НСтр("ru = ' из ';uk = ' з '") + 
		ЭлементыФормы.ТаблицаОтчетов.ВыделенныеСтроки.Количество() +  
		НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
		НСтр("ru = 'Переместить существующие в Корзину,  и передать новые документы?';uk = 'Перемістити існуючі до Корзини,  та передати нові документи?'"),  РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда 
			ПерезаписьОтчетов = "Да";
		ИначеЕсли Ответ  =  КодВозвратаДиалога.Нет Тогда 
			ПерезаписьОтчетов = "Нет";
		ИначеЕсли Ответ  =  КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Для каждого СтрокаОтчет Из ЭлементыФормы.ТаблицаОтчетов.ВыделенныеСтроки Цикл  
		Документ  =  СтрокаОтчет.ДокументОтчет; 
		//------------------------------------------------------------------------------------
		Если ТипДокОтчета = "РегламентированныйОтчетПоТруду" Тогда 
			
			Если Документ.Дата<Дата(2012, 12, 01) Тогда 
				Предупреждение(НСтр("ru = 'За выбранный период документы не передаются!';uk = 'За обраний період документи не передаютсья!'"));
				Возврат;
			ИначеЕсли
				Документ.Дата>Дата(2012, 12, 01) Тогда				
				Если Месяц(Документ.ДатаНачала)  =  Месяц(Документ.ДатаОкончания) Тогда
					Бланк = "S0301008"; 
					Мес = Истина;
				Иначе
					Бланк = "S0301110";
					Мес = Ложь;
				КонецЕсли;   			
			КонецЕсли; 				
			
			PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
			ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()) + СуффиксДСС);   
			Если ПерезаписьОтчетов = "Да" Тогда   
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					App.MoveToTrash(ИД);
				КонецЕсли;
				Если Мес Тогда
					Формирование_1ПВМес(App,  Документ,  Бланк,  PDate,  ИД); 				
					Колво1ПВ =  Колво1ПВ+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				Иначе
					Формирование_1ПВКВ(App,  Документ,  Бланк,  PDate,  ИД); 				
					Колво1ПВ =  Колво1ПВ+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				КонецЕсли;
			ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					Продолжить;
				Иначе 
					Если Мес Тогда
						Формирование_1ПВМес(App,  Документ,  Бланк,  PDate,  ИД); 				
						Колво1ПВ =  Колво1ПВ+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					Иначе 
						Формирование_1ПВКВ(App,  Документ,  Бланк,  PDate,  ИД); 				
						Колво1ПВ =  Колво1ПВ+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли;  					
				КонецЕсли;
			Иначе 
				Если Мес Тогда
					Формирование_1ПВМес(App,  Документ,  Бланк,  PDate,  ИД); 				
					Колво1ПВ =  Колво1ПВ+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				Иначе 
					Формирование_1ПВКВ(App,  Документ,  Бланк,  PDate,  ИД); 				
					Колво1ПВ =  Колво1ПВ+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				КонецЕсли;       				
			КонецЕсли;  
			//----------------------------------------------------------
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетРеестрНалоговыхНакладных" Тогда 
			СравнимДату = КонецДня(Дата(Документ.Дата));   
			ПорцияРНН= Число(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН.HNP_1 + Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН.HNP_2);
			PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
			Если ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН._021) Тогда
				ТипРННвОтчете="заг";
			ИначеЕсли ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН._022) Тогда
				ТипРННвОтчете="спец"; 
			ИначеЕсли ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН._023) Тогда
				ТипРННвОтчете="сг";    
			ИначеЕсли ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН._024) Тогда
				ТипРННвОтчете="перер";
			КонецЕсли;	
			ТипРНН=ОпределитьТипРНН(PDate, ТипРННвОтчете);
			
			МояПорция=App.GetRNNPortion(0, PDate, ТипРНН);
			Если МояПорция=ПорцияРНН Тогда
				Предупреждение("РНН с порцией " + МояПорция + " в этом периоде существует! Перезапись невозможна!");
				Возврат;
			КонецЕсли;     
			
			Если СравнимДату<КонецДня(Дата(2013, 03, 01)) Тогда
				МинПериод = НСтр("ru = ' марта 2013';uk = ' березня 2013'");
				Предупреждение(ПредупреждениеПериодОтчета + МинПериод + Символы.ПС + 
				ПредупреждениеПериодТекст + ПредставлениеПериода(НачалоМесяца(Документ.ДатаНачала),  КонецМесяца(Документ.ДатаОкончания),  "ФП = Истина"));
				Возврат;	
			Иначе
				Бланк=ОпределитьКодБланка(СравнимДату, ТипРННвОтчете, ЮрикФизикОтчет);			
			КонецЕсли; 
			
			ИД  =  Строка(Документ.УникальныйИдентификатор()) + СуффиксМДЗ;  
			
			Если ПерезаписьОтчетов = "Да" Тогда   
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					App.MoveToTrash(ИД);
				КонецЕсли;
				Формирование_РНН(App,  Документ,  Бланк,  PDate,  ИД, ПорцияРНН, ТипРНН);				
				КолвоРНН =  КолвоРНН+1; 
			ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					Продолжить;
				Иначе 
					Формирование_РНН(App,  Документ,  Бланк,  PDate,  ИД, ПорцияРНН, ТипРНН);					
					КолвоРНН =  КолвоРНН+1; 
				КонецЕсли;
			Иначе 
				Формирование_РНН(App,  Документ,  Бланк,  PDate,  ИД, ПорцияРНН, ТипРНН);				
				КолвоРНН =  КолвоРНН+1; 
			КонецЕсли; 
			//----------------------------------------------------------
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетБаланс" Тогда    			
			Если НЕ СокрЛП(Документ.ЕдиницаИзмерения) = "1 000" Тогда
				Предупреждение(Нстр("ru = 'Единица измерения доумента должна быть только в тысячах!';uk = 'Одиниця вимірювання документу повининна бути лише в тисячах!'"));
				Возврат;
			КонецЕсли; 
			
			СравнимДату = КонецДня(Дата(Документ.Дата));
			
			Если СравнимДату<КонецДня(Дата(2013,  03,  30)) Тогда
				МинПериод = НСтр("ru = ' 1 квартал 2013';uk = ' 1 квартал 2013'");
				Предупреждение(ПредупреждениеПериодОтчета + МинПериод + Символы.ПС + 
				ПредупреждениеПериодТекст + ПредставлениеПериода(НачалоМесяца(Документ.ДатаНачала),  КонецМесяца(Документ.ДатаОкончания),  "ФП = Истина"));
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  03,  30)) Тогда 
				БланкДСС = "S0100111";
				БланкМДЗ = "J0900107";
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  06,  30)) Тогда 
				БланкДСС = "S0100111";  
				БланкМДЗ = "J0900107";
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  09,  30)) Тогда 
				БланкДСС = "S0100112";
				БланкМДЗ = "J0900108";   
			КонецЕсли; 
			
			Если ОтчСтат = Истина Тогда
				Если Документ.Дата>Дата(2013, 03, 30) Тогда
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()) + СуффиксДСС);  
					Если ПерезаписьОтчетов = "Да" Тогда   
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							App.MoveToTrash(ИД);
						КонецЕсли;
						Формирование_БалансДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 				
						КолвоБаланс =  КолвоБаланс+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							Продолжить;
						Иначе 
							Формирование_БалансДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 				
							КолвоБаланс =  КолвоБаланс+1;
							СписокДляОткрытияОтчет.Добавить(ИД); 
						КонецЕсли;
					Иначе 
						Формирование_БалансДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 			
						КолвоБаланс =  КолвоБаланс+1; 
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
			Если ОтчНал = Истина Тогда
				Если Документ.Дата>Дата(2013, 03, 30) Тогда
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()) + СуффиксМДЗ);  
					Если ПерезаписьОтчетов = "Да" Тогда   
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							App.MoveToTrash(ИД);
						КонецЕсли;
						Формирование_БалансМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД); 				
						КолвоБаланс =  КолвоБаланс+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							Продолжить;
						Иначе 
							Формирование_БалансМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД);  				
							КолвоБаланс =  КолвоБаланс+1;
							СписокДляОткрытияОтчет.Добавить(ИД); 
						КонецЕсли;
					Иначе 
						Формирование_БалансМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД); 			
						КолвоБаланс =  КолвоБаланс+1; 
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			//----------------------------------------------------------     			
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетФинансовыйРезультат" Тогда  
			Если НЕ СокрЛП(Документ.ЕдиницаИзмерения) = "1 000" Тогда
				Предупреждение(Нстр("ru = 'Единица измерения доумента должна быть только в тысячах!';uk = 'Одиниця вимірювання документу повининна бути лише в тисячах!'"));
				Возврат;
			КонецЕсли; 
			
			СравнимДату = КонецДня(Дата(Документ.Дата));
			
			Если СравнимДату<КонецДня(Дата(2013,  03,  30)) Тогда
				МинПериод = НСтр("ru = ' 1 квартал 2013';uk = ' 1 квартал 2013'");
				Предупреждение(ПредупреждениеПериодОтчета + МинПериод + Символы.ПС +
				ПредупреждениеПериодТекст + ПредставлениеПериода(НачалоМесяца(Документ.ДатаНачала),  КонецМесяца(Документ.ДатаОкончания),  "ФП = Истина"));
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  03,  30)) Тогда 
				БланкДСС = "S0100211";
				БланкМДЗ = "J0900207";
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  06,  30)) Тогда 
				БланкДСС = "S0100211";  
				БланкМДЗ = "J0900207";
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  09,  30)) Тогда 
				БланкДСС = "S0100211";
				БланкМДЗ = "J0900207";   
			КонецЕсли; 
			
			Если ОтчСтат = Истина Тогда           
				Если Документ.Дата>Дата(2013, 03, 30) Тогда
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()) + СуффиксДСС);  
					Если ПерезаписьОтчетов = "Да" Тогда   
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							App.MoveToTrash(ИД);
						КонецЕсли;
						Формирование_ФинрезДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 				
						КолвоФинрез =  КолвоФинрез+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							Продолжить;
						Иначе 
							Формирование_ФинрезДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 				
							КолвоФинрез =  КолвоФинрез+1;
							СписокДляОткрытияОтчет.Добавить(ИД); 
						КонецЕсли;
					Иначе 
						Формирование_ФинрезДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 			
						КолвоФинрез =  КолвоФинрез+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
			Если ОтчНал = Истина Тогда
				Если Документ.Дата>Дата(2013, 03, 30) Тогда
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()) + СуффиксМДЗ);  
					Если ПерезаписьОтчетов = "Да" Тогда   
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							App.MoveToTrash(ИД);
						КонецЕсли;
						Формирование_ФинрезМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД); 				
						КолвоФинрез =  КолвоФинрез+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							Продолжить;
						Иначе 
							Формирование_ФинрезМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД);  				
							КолвоФинрез =  КолвоФинрез+1;
							СписокДляОткрытияОтчет.Добавить(ИД); 
						КонецЕсли;
					Иначе 
						Формирование_ФинрезМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД); 			
						КолвоФинрез =  КолвоФинрез+1; 
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
			//----------------------------------------------------------  			
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетБалансМП" Тогда
			Если НЕ СокрЛП(Документ.ЕдиницаИзмерения) = "1 000" Тогда
				Предупреждение(Нстр("ru = 'Единица измерения доумента должна быть только в тысячах!';uk = 'Одиниця вимірювання документу повининна бути лише в тисячах!'"));
				Возврат;
			КонецЕсли; 
			//-------------------------- 
			СравнимДату = КонецДня(Дата(Документ.Дата));
			
			Если СравнимДату<КонецДня(Дата(2013,  03,  30)) Тогда
				МинПериод = НСтр("ru = ' 1 квартал 2013';uk = ' 1 квартал 2013'");
				Предупреждение(ПредупреждениеПериодОтчета + МинПериод + Символы.ПС +
				ПредупреждениеПериодТекст + ПредставлениеПериода(НачалоМесяца(Документ.ДатаНачала),  КонецМесяца(Документ.ДатаОкончания),  "ФП = Истина"));
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  03,  30)) Тогда 
				БланкДСС = "S0110008";
				БланкМДЗ = "J0901104";
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  06,  30)) Тогда 
				БланкДСС = "S0110008";  
				БланкМДЗ = "J0901104";
			ИначеЕсли СравнимДату = КонецДня(Дата(2013,  09,  30)) Тогда 
				БланкДСС = "S0110009";
				БланкМДЗ = "J0901105";   
			КонецЕсли; 
			
			Если ОтчСтат = Истина Тогда   
				Если Документ.Дата>Дата(2013, 03, 30) Тогда
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()) + СуффиксДСС);  
					Если ПерезаписьОтчетов = "Да" Тогда   
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							App.MoveToTrash(ИД);
						КонецЕсли;
						Формирование_БалансМПДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 				
						КолвоФинрез =  КолвоФинрез+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							Продолжить;
						Иначе 
							Формирование_БалансМПДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 				
							КолвоФинрез =  КолвоФинрез+1;
							СписокДляОткрытияОтчет.Добавить(ИД); 
						КонецЕсли;
					Иначе 
						Формирование_БалансМПДСС(App,  Документ,  БланкДСС,  PDate,  ИД); 			
						КолвоФинрез =  КолвоФинрез+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
			Если ОтчНал = Истина Тогда
				Если Документ.Дата>Дата(2013, 03, 30) Тогда
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()) + СуффиксМДЗ);  
					Если ПерезаписьОтчетов = "Да" Тогда   
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							App.MoveToTrash(ИД);
						КонецЕсли;
						Формирование_БалансМПМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД); 				
						КолвоФинрез =  КолвоФинрез+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
						Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
							Продолжить;
						Иначе 
							Формирование_БалансМПМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД);  				
							КолвоФинрез =  КолвоФинрез+1;
							СписокДляОткрытияОтчет.Добавить(ИД); 
						КонецЕсли;
					Иначе 
						Формирование_БалансМПМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД); 			
						КолвоФинрез =  КолвоФинрез+1; 
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;			
			//----------------------------------------------------------   			
		Иначе 
			ВРазработке();
		КонецЕсли;     		
	КонецЦикла;
	//----------------------------------------------------------  
	КолвоОтчетов  =   Колво1ПВ + КолвоРНН + КолвоБаланс + КолвоФинрез + КолвоБалансМП;
			
	Если КолвоОтчетов>0 Тогда
		
		Предупреждение(НСтр("ru = 'Переданы в M.E.Doc IS:';uk = 'Передано в M.E.Doc IS:'") + Символы.ПС + "   - " + КолвоОтчетов + " шт.");
        App.RefreshRstDoc(); 
		
		Если ФР1= Истина Тогда
			App.RunModule("DocRst");			
		КонецЕсли;
		
		Если ОД1 = Истина Тогда
			Для Каждого ИД Из СписокДляОткрытияОтчет Цикл
				App.ShowDocument(ИД);
			КонецЦикла;        		
		КонецЕсли;    
		
		ПроверитьНаличиеОтчетов(СуффиксДСС,  СуффиксМДЗ);
 
	Иначе 
		Предупреждение(НСтр("ru = 'Не передано ни одного документа.';uk = 'Не передано жодного документа.'"));
	КонецЕсли; 
	
КонецПроцедуры

Процедура КПТаблПредпрНайтиВсеПредприятия(Кнопка)
	
	ТаблицаПредприятий.Очистить();
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  "ВЫБРАТЬ
	|Организации.Ссылка КАК Предприятие, 
	|КодыОрганизацииСрезПоследних.КодПоЕДРПОУ КАК ЕДРПОУИНН 
	|ИЗ
	|Справочник.Организации КАК Организации
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&НаДату,  ) КАК КодыОрганизацииСрезПоследних
	|ПО Организации.Ссылка  =  КодыОрганизацииСрезПоследних.Организация
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";  
	
	Запрос.УстановитьПараметр("НаДату",  ТекущаяДата());
	Выборка  =  Запрос.Выполнить().Выбрать();   
	Пока Выборка.Следующий() Цикл    
		НовийРядок  =  ТаблицаПредприятий.Добавить();
		ЗаполнитьЗначенияСвойств(НовийРядок, Выборка);
	КонецЦикла; 
	
КонецПроцедуры  

Процедура Из1СвМНажатие(Элемент)
	
	//НСтр("ru  =  ''; uk  =  ''");
	
	Если ЭлементыФормы.ПСпрКонтрагентов.Значение =  4 Тогда
		Предупреждение(НСтр("ru  =  'Выберите справочник!'; uk  =  'Оберіть довідник!'"));
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.СпрУдалять.Значение  =  1 Тогда
		Ответ  =  Вопрос(НСтр("ru  =  'Удалить все данные из справочника '; uk  =  'Видалити всі дані з довідника '") + СправочникМедокЧитабельноеНазвание + ", " + Символы.ПС + НСтр("ru  =  'и передать новый из 1С?'; uk  =  'та передати новий з 1С?'"),  РежимДиалогаВопрос.ДаНет,  0);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда
			ВРазработке();    
		КонецЕсли;    
	ИначеЕсли  ЭлементыФормы.СпрУдалять.Значение  =  2 Тогда
		Ответ  =  Вопрос(НСтр("ru  =  'Обновить все данные в справочнике '; uk  =  'Оновити всі дані довідника '") + СправочникМедокЧитабельноеНазвание + ", " + Символы.ПС + НСтр("ru  =  'по ключевому полю '; uk  =  'за ключовим полем '") + ЭлементыФормы.КлючСправочника.Значение + " ?",  РежимДиалогаВопрос.ДаНет,  0);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда
			ВРазработке(); 
		КонецЕсли;
	ИначеЕсли  ЭлементыФормы.СпрУдалять.Значение  =  3 Тогда
		Ответ  =  Вопрос(НСтр("ru  =  'Найти записи с незаполненным ключевым полем справочника '; uk  =  'Знайти записи з незаповненим '") + СправочникМедокЧитабельноеНазвание + ", " + Символы.ПС + НСтр("ru  =  'в 1С?'; uk  =  'в 1С?'"),  РежимДиалогаВопрос.ДаНет,  0);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда
			ВРазработке(); 
		КонецЕсли;
	ИначеЕсли  ЭлементыФормы.СпрУдалять.Значение  =  4 Тогда
		Ответ  =  Вопрос(НСтр("ru  =  'Найти записи с незаполненным ключевым полем справочника '; uk  =  'Знайти записи з незаповненим '") + СправочникМедокЧитабельноеНазвание + ", " + Символы.ПС + НСтр("ru  =  'в M.E.Doc IS?'; uk  =  'в M.E.Doc IS?'"),  РежимДиалогаВопрос.ДаНет,  0);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда
			ВРазработке(); 
		КонецЕсли;	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ИзМв1СНажатие(Элемент)
	
	ВРазработке();
	
КонецПроцедуры

Процедура ТипДокОтчетаПриИзменении(Элемент)
	
	СепараторВОтчетах();
	ИзменениеОсновныхПараметровОтчетов();
	Доступнось_ДСС_НАЛ();	
	
КонецПроцедуры

Процедура СепараторВОтчетах()
	
	Если ТипДокОтчета  =  "сепаратор" Тогда                 
		ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ЗаполнитьДокументами.Доступность  =  Ложь; 
		ЭлементыФормы.ОтчНал.Значение = Ложь;
		ЭлементыФормы.ОтчСтат.Значение = Ложь;
		ЭлементыФормы.ОтчНал.Доступность = Ложь;
		ЭлементыФормы.ОтчСтат.Доступность = Ложь;      
	Иначе 
		ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ЗаполнитьДокументами.Доступность  =  Истина; 
	КонецЕсли;
	
КонецПроцедуры

Процедура СепараторВПервичке()
	
	Если 
		ТипДок  =  "сепаратор" Тогда
		КодДок = ""; 
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Заполнить.Доступность  =  Ложь; 
		ЭлементыФормы.ФР.Доступность=Ложь;
		ЭлементыФормы.од.Доступность=Ложь;
	Иначе 
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Заполнить.Доступность  =  Истина;
		ЭлементыФормы.ФР.Доступность=Истина;
		ЭлементыФормы.од.Доступность=Истина; 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытияМедка(Источник,  Событие,  Данные)
	
	Попытка
		Если ИмяБазы  =  "БУ" или ИмяБазы  = "ТЕХТРЕЙД"  или ИмяБазы  = "кпЖРЕУ" Тогда
			Актуальная = "1.2.13.4";
			НашаВерсия = Метаданные.Версия;
			ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
			ВерсияПрограммыНаша  =  Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
		ИначеЕсли ИмяБазы = "УТ" Тогда
			Актуальная = "2.3.18.1";
			НашаВерсия = Метаданные.Версия;
			ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
			ВерсияПрограммыНаша  =  Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
			Если 
				ВерсияПрограммыНаша < ВерсияПрограммыАктуальная
				Тогда
				x =  1/0;
			КонецЕсли;    			
		ИначеЕсли ИмяБазы = "УТП" Тогда
			Актуальная = "1.2.14.3";
			НашаВерсия = Метаданные.Версия;
			ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
			ВерсияПрограммыНаша  =  Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
			Если 
				ВерсияПрограммыНаша < ВерсияПрограммыАктуальная
				Тогда
				x =  1/0;  
			КонецЕсли; 
		ИначеЕсли ИмяБазы = "УПП" Тогда
			Актуальная = "1.3.22.2";
			НашаВерсия = Метаданные.Версия;
			ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
			ВерсияПрограммыНаша  =  Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
		//	Если ВерсияПрограммыНаша < ВерсияПрограммыАктуальная Тогда
		//		x =  1/0;
		//	КонецЕсли;
		     
		Иначе
			МедКомпонент.CancelDoc(НСтр("ru = 'Передача данных в Вашу конфигурацию не реализована!';uk = 'Передача документу не реалізовано для Вашої конфгурації!'"));
			Возврат;	
		КонецЕсли;
	Исключение
		МедКомпонент.CancelDoc(НСтр("ru = 'Ваша конфигурация устарела (';uk = 'Ваша конфігурація застаріла ('") + НашаВерсия + ")" + Символы.ПС + 
		НСтр("ru = 'Используйте не менее версии ';uk = 'Використовуйте не менше версії '") + Актуальная);
		Возврат;
	КонецПопытки; 
	//----------------------------------------------------------------------------
		//Предупреждение("1) Оставьте в комментарии ключевое слово MEDOC, - формируются автоматически." + Символы.пс + 
		//"Пригодятся Вам при отборе входящих документов." + Символы.ПС + 
		//"При необходимости, напишите свой комментарий после этого ключевого слова." + Символы.ПС +
		//"Например:" + Символы.ПС + 
		//"MEDOC. Приходование товара по согласованию." + Символы.ПС + Символы.ПС +
		//"2) Документы записываются НЕ проведенными. Если все ОК, - проведите документ.",, "Обратите внимание");
    //----------------------------------------------------------------------------
	Попытка
		Если (Источник  =  "Medoc") 
			И (Событие  =  "PRIMARYDOC") Тогда
			Отчет  =  МедКомпонент.GetPrimaryDoc(Данные); 			
			ИмяСхемы  =  Отчет.CharCode; 
			ИмяДокумента  =  Отчет.DocName; 
			ТипПериода  =  Отчет.PeriodType; 
			ДатаПериода  =  Отчет.PeriodDate; 
			пGUID  =  Отчет.DOCGUID; 
			//----------------------------------------------------------------------------------------------------------		
			Если Сред(ИмяСхемы,  2,  6) = "120100" Тогда
				Попытка
					НазваниеДока = Нстр("ru = 'Налоговая накладная ';uk = 'Податкова накладна '");
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "N11"));  
					
					ФилиалВхДок =  Строка(Отчет.GetValue("MAIN",  "N2_13"));
					Если ФилиалВхДок = "" Тогда
						НомерДокаВх  =  Строка(Отчет.GetValue("MAIN",  "N2_11"));
					Иначе
						НомерДокаВх  =  Строка(Отчет.GetValue("MAIN",  "N2_11") + "/" + ФилиалВхДок);	
					КонецЕсли;
					
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" Тогда
						ННВх  =  Документы.РегистрацияВходящегоНалоговогоДокумента.СоздатьДокумент();
						ННВх.ВидОперации  =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная;
					ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
                   		ННВх  =  Документы.ЗаписьКнигиПриобретения.СоздатьДокумент();
						ННВх.ВидОперации=Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная;
                    КонецЕсли;
					//---------------------------------------------------------------------------
					NNTable  =  МедКомпонент.CreateNNStatusQuery(); 
					NNTable.NewRow("TAB1"); 
					NNTable.SetValue("TAB1",  "DOC_TYPE",  1); 
					NNTable.SetValue("TAB1",  "DOC_MOVE",  2);  
					NNTable.SetValue("TAB1",  "DOC_ID",  пGUID); 
					
					NNStatusResult  =  МедКомпонент.ExecNNStatusQuery(NNTable); 
					Если (Отчет.GetValue("MAIN",  "SEND_DPA")) = 12 Тогда 
						ННВх.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  =  Отчет.GetValue("MAIN",  "SEND_DPA_DATE");    				
					КонецЕсли;
					//--------------------------------------------------------------------------- 
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ННВх,  ПараметрыСеанса.ТекущийПользователь);
					ННВх.Дата  =  Дата(Отчет.GetValue("MAIN",  "N11"));
					ННВх.ДатаВходящегоДокумента  =  Дата(Отчет.GetValue("MAIN",  "N11"));
					Филиал =  Строка(Отчет.GetValue("MAIN",  "N2_13"));
					Если Филиал = "" Тогда
						ННВх.НомерВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N2_11"));
					Иначе
						ННВх.НомерВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N2_11") + "/" + Филиал);	
					КонецЕсли;
					
					ИННОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "N4")));
					Если ИННОрганизации = "" Тогда
						МедКомпонент.CancelDoc("В накладній не вказаний ІПН!");
						Возврат;
					КонецЕсли;
					
					Организация  =  НайтиОрганизациюПоИНН(СокрЛП(ИННОрганизации));

					Если Организация  =  Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ІПН = " + ИННОрганизации + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");
						Возврат;
					КонецЕсли;     
					ННВх.Организация  =  Организация; 
					
					ИННПокупателя  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "FIRM_INN")));
					//Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",  ИННПокупателя);
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_PHON"));
					
					Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);
				
//-----------------------------------------------------------------------------------------------------------------------------------------------//  
					Если СозданиеКонтрагентов = Ложь Тогда
						Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  + Символы.ПС + 
							"Увімкніть функцію автоматичного створення контрагента!");   
							Возврат;  					  
						КонецЕсли;	
							 
					Иначе
						Если
							Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() 
						Тогда 
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх);
						Иначе
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагент з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+ " вже існує в 1С!" + Символы.ПС + "Створення накладної і контрагента неможливо!" + Символы.ПС + 
							"Вимкніть функцію автоматичного створення контрагента!");
							Возврат;  					  
						КонецЕсли;	
					КонецЕсли;

					ННВх.Контрагент  =  Покупатель;
//-----------------------------------------------------------------------------------------------------------------------------------------------//
//					
//					Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
//						МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + ИННПокупателя + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");   
//						Возврат;  					  
//					КонецЕсли;	   
//					ННВх.Контрагент  =  Покупатель;
					
					//-------------------------------------------------------------- 
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
						СуществованиеДокаНазвание= "РегистрацияВходящегоНалоговогоДокумента";
					ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
                    	СуществованиеДокаНазвание= "ЗаписьКнигиПриобретения";
					КонецЕсли;
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;      					
					//--------------------------------------------------------------
					
					Попытка
						ДатаДог  =  Дата(Отчет.GetValue("MAIN",  "N82"));
						НомерДог  =  СокрЛП(Отчет.GetValue("MAIN",  "N81"));
						ННВх.ДоговорКонтрагента = СоздатьНовыйДоговор(Покупатель,  Организация,  ДатаДог,  НомерДог);
					Исключение
					КонецПопытки;
					//--------------------------------------------------------------
					Попытка
						СчетУчета  =  ПолучитьСчетаРасчетовСКонтрагентом(Организация,  Покупатель,  ДоговорКонтрагента);
						Если ЗначениеЗаполнено(СчетУчета.СчетУчетаНДСПриобретений) Тогда
							СчетУчетаНДС = СчетУчета.СчетУчетаНДСПриобретений;
						Иначе
							СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НайтиПоКоду("6442");
						КонецЕсли;
						ННВх.СчетУчетаНДС  =  СчетУчетаНДС;
					Исключение
					КонецПопытки;  					
					//------------------------------------------------------------------------------ 
					Если не ИмяБазы="УТ" Тогда
						ННВх.СчетНДС  =  ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
						Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", ННВх.Метаданные()) Тогда
							ННВх.ЭлектронныйДокумент =  Истина; 
						КонецЕсли;
					КонецЕсли;
					
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
						ННВх.СуммаВозвратнойТары = Отчет.GetValue("MAIN",  "A3_11"); 
					ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
						Если ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "A3_11")) тогда
							ВозвратнаяТара = ННВх.ВозвратнаяТара.Добавить();
							ВозвратнаяТара.НомерСтроки = 1;
							ВозвратнаяТара.Сумма = Отчет.GetValue("MAIN",  "A3_11"); 
							ВозвратнаяТара.НалоговоеНазначение= Справочники.НалоговыеНазначенияАктивовИЗатрат.ХозДеятельность;
						КонецЕсли;
					КонецЕсли; 
					ННВх.СпецРежимНалогообложения = СокрЛП(Отчет.GetValue("MAIN",  "N2_12")); 
					ННвх.Комментарий="Переданий з M.E.Doc IS";
 
					ННВх.Товары.Очистить();					
					table = Отчет.First("TAB1");
					спецрежим = ?(ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "N2_12")),Число(Отчет.GetValue("MAIN",  "N2_12")),0); 
					Пока table Цикл
						НоваяСтрока = ННвх.Товары.Добавить();
						
					//ставка 20%
					Если Отчет.GetValue("TAB1", "TAB1_A8")=20 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС20;
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.2;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_7");
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ"Тогда
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
							КонецЕсли;
						//ставка 7%
						ИначеЕсли  Отчет.GetValue("TAB1", "TAB1_A8")=7 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС7;						
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.07;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_71");
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							КонецЕсли;
						//0% или 7%для старых
						ИначеЕсли Отчет.GetValue("TAB1", "TAB1_A8")=902 Тогда							
							НоваяСтрока.СтавкаНДС  = ?( спецрежим = 7, Перечисления.СтавкиНДС.НДС7, Перечисления.СтавкиНДС.НДС0);
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * ?(спецрежим = 7, 0.07, 0);
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_8");
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							КонецЕсли;
						//0%
						ИначеЕсли Отчет.GetValue("TAB1", "TAB1_A8")=901 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС0;
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = 0;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_9");
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
						        НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблагУслугВнеУкраины;
							КонецЕсли;
						//Без НДС
						ИначеЕсли Отчет.GetValue("TAB1", "TAB1_A8")=903 Тогда  
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.БезНДС;
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = 0;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_10");
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							КонецЕсли;          
						КонецЕсли;
						table = Отчет.Next( "TAB1" );
					КонецЦикла;
					//ННВх.Записать(РежимЗаписиДокумента.Проведение);
					ННВх.Записать(); 
					//---------------------------------------------------------------------------
					МедКомпонент.AcceptDoc(пGUID);   	
					
					Форма  =  ННВх.ПолучитьФорму("ФормаДокумента");
					Форма.Открыть(); 			
					
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				//----------------------------------------------------------------------------------------------------------    
			ИначеЕсли Сред(ИмяСхемы,  2,  6) = "120120" Тогда
				Попытка
					НазваниеДока = Нстр("ru = 'Приложение 2 ';uk = 'Додаток 2 '"); 
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "N15"));
					ФилиалВхДок =  Строка(Отчет.GetValue("MAIN",  "N1_13"));
					Если ФилиалВхДок = "" Тогда
						НомерДокаВх  =  Строка(Отчет.GetValue("MAIN",  "N1_11"));
					Иначе
						НомерДокаВх  =  Строка(Отчет.GetValue("MAIN",  "N1_11") + "/" + ФилиалВхДок);	
					КонецЕсли;  					
					
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
						Дод2  =  Документы.РегистрацияВходящегоНалоговогоДокумента.СоздатьДокумент();
						Дод2.ВидОперации  =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат;
					ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
  						Дод2  =  Документы.ЗаписьКнигиПриобретения.СоздатьДокумент();
						Дод2.ВидОперации=Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат;    
					КонецЕсли;  					
					//---------------------------------------------------------------------------
					NNTable  =  МедКомпонент.CreateNNStatusQuery(); 
					NNTable.NewRow("TAB1"); 
					NNTable.SetValue("TAB1",  "DOC_TYPE",  2); 
					NNTable.SetValue("TAB1",  "DOC_MOVE",  2);  
					NNTable.SetValue("TAB1",  "DOC_ID",  пGUID); 
					
					NNStatusResult  =  МедКомпонент.ExecNNStatusQuery(NNTable);
					Если (Отчет.GetValue("MAIN",  "SEND_DPA")) = 12 Тогда 
						Дод2.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  =  Отчет.GetValue("MAIN",  "SEND_DPA_DATE");    				
					КонецЕсли;
					//--------------------------------------------------------------------------- 
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Дод2,  ПараметрыСеанса.ТекущийПользователь);
					Дод2.Дата  =  Дата(Отчет.GetValue("MAIN",  "N15"));
					Дод2.ДатаВходящегоДокумента  =  Дата(Отчет.GetValue("MAIN",  "N15"));
					
					Филиал =  Строка(Отчет.GetValue("MAIN",  "N1_13"));
					Если НЕ ЗначениеЗаполнено(Филиал) Тогда
						Дод2.НомерВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N1_11"));
					Иначе
						Дод2.НомерВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N1_11") + "/" + Филиал);	
					КонецЕсли;
					//---------------------------------------------------------------------------
					Дод2.ДатаКорректируемогоВходящегоДокумента  =  Дата(Отчет.GetValue("MAIN",  "N2"));
					
					Филиал2 =  Строка(Отчет.GetValue("MAIN",  "N2_13"));
					Если НЕ ЗначениеЗаполнено(Филиал2) Тогда
						Дод2.НомерКорректируемогоВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N2_11"));
					Иначе
						Дод2.НомерКорректируемогоВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N2_11") + "/" + Филиал2);	
					КонецЕсли;  
					//---------------------------------------------------------------------------
					ИННОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "N4")));
					Если НЕ ЗначениеЗаполнено(ИННОрганизации) Тогда
						МедКомпонент.CancelDoc("В накладній не вказаний ІПН!");
						Возврат;
					КонецЕсли;
					
					Организация  =  НайтиОрганизациюПоИНН(СокрЛП(ИННОрганизации));
					Если Организация  =  Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ІПН = " + ИННОрганизации + " не існує в 1С!" + Символы.ПС + "Створення Додатку_2 неможливо!");
						Возврат;
					КонецЕсли;     
					Дод2.Организация  =  Организация; 
					
					ИННПокупателя  =  СокрЛП(Отчет.GetValue("MAIN",  "FIRM_INN"));
										
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_PHON"));
					
					Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);
			//-----------------------------------------------------------------------------------------------------------------------------------------------//  
					Если СозданиеКонтрагентов = Ложь Тогда
						Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Дод2.НомерВходящегоДокумента) + " від " + Формат(Дод2.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  + Символы.ПС + 
							"Увімкніть функцію автоматичного створення контрагента!");   
							Возврат;  					  
						КонецЕсли;	
							 
					Иначе
						Если
							Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() 
						Тогда 
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх);
						Иначе
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Дод2.НомерВходящегоДокумента) + " від " + Формат(Дод2.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагент з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+ " вже існує в 1С!" + Символы.ПС + "Створення накладної і контрагента неможливо!" + Символы.ПС + 
							"Вимкніть функцію автоматичного створення контрагента!");
							Возврат;  					  
						КонецЕсли;	
					КонецЕсли;

					Дод2.Контрагент  =  Покупатель;
			//-----------------------------------------------------------------------------------------------------------------------------------------------//

					//Если СозданиеКонтрагентов = Ложь Тогда
					//	Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
					//		МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + ИННПокупателя + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");   
					//		Возврат;  					  
					//	КонецЕсли;	
					//		Дод2.Контрагент  =  Покупатель; 
					//	Иначе
					//	Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок);
					//	Дод2.Контрагент = Покупатель;
					//КонецЕсли;

					//--------------------------------------------------------------
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
						СуществованиеДокаНазвание = "РегистрацияВходящегоНалоговогоДокумента";
					ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
						СуществованиеДокаНазвание = "ЗаписьКнигиПриобретения";
                    КонецЕсли;	
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;     
					//--------------------------------------------------------------
					Попытка
						ДатаДог  =  Дата(Отчет.GetValue("MAIN",  "N82"));
						НомерДог  =  СокрЛП(Отчет.GetValue("MAIN",  "N81"));
						Дод2.ДоговорКонтрагента = СоздатьНовыйДоговор(Покупатель,  Организация,  ДатаДог,  НомерДог);  
					Исключение
					КонецПопытки;
					//ННВх.СчетУчетаНДС  = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация,  Покупатель,  ДоговорКонтрагента);	   
					//------------------------------------------------------------------------------
					Дод2.СчетНДС  =  ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
					Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", Дод2.Метаданные()) Тогда
						Дод2.ЭлектронныйДокумент =  Истина;
					КонецЕсли;					
					Дод2.СпецРежимНалогообложения = СокрЛП(Отчет.GetValue("MAIN",  "N1_12")); 
					Дод2.Комментарий="Переданий з M.E.Doc IS";

					Дод2.Товары.Очистить();
					table = Отчет.First("TAB1");
					Пока table Цикл
						НоваяСтрока = Дод2.Товары.Добавить();
						//20%
						Если Отчет.GetValue("TAB1", "TAB1_A011")=20 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС20;
							Новаястрока.Сумма = Отчет.GetValue("TAB1",  "TAB1_A013");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.2;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
							КонецЕсли; 
						//7%
						ИначеЕсли  Отчет.GetValue("TAB1", "TAB1_A011")=7 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС7;							
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A013");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.07;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ"Тогда
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							КонецЕсли;
						//0%
						ИначеЕсли  Отчет.GetValue("TAB1", "TAB1_A011")=901 или Отчет.GetValue("TAB1", "TAB1_A011")=902 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС0;							
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A013");
							Новаястрока.СуммаНДС =  0;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							КонецЕсли;	
							
					
						//БезНдс
						ИначеЕсли Отчет.GetValue("TAB1", "TAB1_A011")=903 Тогда  
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.БезНДС;
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A013");
							Новаястрока.СуммаНДС =  0;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							КонецЕсли; 
						КонецЕсли;
						table = Отчет.Next("TAB1");
					КонецЦикла;
					Дод2.Записать(); 
					//---------------------------------------------------------------------------			
					МедКомпонент.AcceptDoc(пGUID);
					
					Форма  =  Дод2.ПолучитьФорму("ФормаДокумента");
					Форма.Открыть(); 			
					
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				//----------------------------------------------------------------------------------------------------------
			ИначеЕсли Лев(ИмяСхемы,  7) = "1С82АВР" Тогда

				Попытка
					Акт  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
					Акт.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
					//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "Акт ";
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					НомерДокаВх =  Строка(Отчет.GetValue("MAIN",  "NUM"));
					
					Акт.ДатаВходящегоДокумента  =  ДатаДокаВх;
					Акт.НомерВходящегоДокумента  =  НомерДокаВх; 
					Акт.Дата  =  Дата(ТекущаяДата()); 
					Акт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Акт,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В акті не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 

					Организация  =  НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация  =  Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					Акт.Организация  =  Организация; 

					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					//Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  ЕДРПОУПокупателя);
					
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					
					Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);
			//-----------------------------------------------------------------------------------------------------------------------------------------------//  
					Если СозданиеКонтрагентов = Ложь Тогда
						Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Акт.НомерВходящегоДокумента) + " від " + Формат(Акт.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  + Символы.ПС + 
							"Увімкніть функцію автоматичного створення контрагента!");   
							Возврат;  					  
						КонецЕсли;	
							 
					Иначе
						Если
							Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() 
						Тогда 
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх);
						Иначе
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Акт.НомерВходящегоДокумента) + " від " + Формат(Акт.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагент з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+ " вже існує в 1С!" + Символы.ПС + "Створення накладної і контрагента неможливо!" + Символы.ПС + 
							"Вимкніть функцію автоматичного створення контрагента!");
							Возврат;  					  
						КонецЕсли;	
					КонецЕсли;

					Акт.Контрагент  =  Покупатель;
			//-----------------------------------------------------------------------------------------------------------------------------------------------//

					//
					//Если СозданиеКонтрагентов = Ложь Тогда
					//	Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
					//		МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + ИННПокупателя + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");   
					//		Возврат;  					  
					//	КонецЕсли;	
					//		Акт.Контрагент  =  Покупатель; 
					//	Иначе
					//	Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок);
					//	Акт.Контрагент = Покупатель;
					//КонецЕсли;

					//-----------------------------------------------------
					СуществованиеДокаНазвание="ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					Акт.Комментарий="Переданий з M.E.Doc IS";
					Если ИмяБазы="УТ" или ИмяБазы="УТП"  Тогда
						Акт.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;
					//-----------------------------------------------------
					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME"));
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
						НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A3");
						НомЦена = Отчет.GetValue("TAB1",  "TAB1_A5");
						Если ИмяСхемы="1С82АВР" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							СуммаНДС=НомЦена * 0.2;
						ИначеЕсли ИмяСхемы="1С82АВРБ" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							СуммаНДС=0;
						ИначеЕсли ИмяСхемы="1С82АВР0" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
							СуммаНДС=0;
						КонецЕсли;
						НомСумма = Отчет.GetValue("TAB1",  "TAB1_A6");
						//НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						ЕИОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
						ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  Акт.Услуги.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Услуг");						
							
							НоваяСтрока =  Акт.Услуги.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					Акт.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  Акт.ПолучитьФорму("ФормаДокумента");
					Форма.Открыть();
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  					
				КонецПопытки;
			//----------------------------------------------------------------------------------------------------------
		
			ИначеЕсли Лев(ИмяСхемы,  6) = "1С82ВН" Тогда
				
				Попытка
					Акт  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
						Акт.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
						//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "Акт ";
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					НомерДокаВх =  Строка(Отчет.GetValue("MAIN",  "NUM"));
					
					Акт.ДатаВходящегоДокумента  =  ДатаДокаВх;
					Акт.НомерВходящегоДокумента  =  НомерДокаВх; 
					Акт.Дата  =  Дата(ТекущаяДата()); 
					Акт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Акт,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В акті не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 
					
					Организация  =  НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация  =  Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					Акт.Организация  =  Организация; 
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					
					Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);
				
			//-----------------------------------------------------------------------------------------------------------------------------------------------//  
					Если СозданиеКонтрагентов = Ложь Тогда
						Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Акт.НомерВходящегоДокумента) + " від " + Формат(Акт.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  + Символы.ПС + 
							"Увімкніть функцію автоматичного створення контрагента!");   
							Возврат;  					  
						КонецЕсли;	
							 
					Иначе
						Если
							Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() 
						Тогда 
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх);
						Иначе
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Акт.НомерВходящегоДокумента) + " від " + Формат(Акт.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагент з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+ " вже існує в 1С!" + Символы.ПС + "Створення накладної і контрагента неможливо!" + Символы.ПС + 
							"Вимкніть функцію автоматичного створення контрагента!");
							Возврат;  					  
						КонецЕсли;	
					КонецЕсли;

					Акт.Контрагент  =  Покупатель;
			//-----------------------------------------------------------------------------------------------------------------------------------------------//

					
					//Если СозданиеКонтрагентов = Ложь Тогда
					//	Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
					//		МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + ИННПокупателя + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");   
					//		Возврат;  					  
					//	КонецЕсли;	
					//		Акт.Контрагент  =  Покупатель; 
					//	Иначе
					//	Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок);
					//	Акт.Контрагент = Покупатель;
					//КонецЕсли;

					//-----------------------------------------------------
					СуществованиеДокаНазвание="ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					Акт.Комментарий="Переданий з M.E.Doc IS";
					Если ИмяБазы="УТ" или ИмяБазы="УТП"  Тогда
						Акт.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;
					//-----------------------------------------------------
					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME"));
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
						НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A3");
						НомЦена = Отчет.GetValue("TAB1",  "TAB1_A5");
						Если ИмяСхемы="1С82ВН" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							СуммаНДС=НомЦена * 0.2;
						ИначеЕсли ИмяСхемы="1С82ВНБ" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							СуммаНДС=0;
						ИначеЕсли ИмяСхемы="1С82ВН0" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
							СуммаНДС=0;
						КонецЕсли;
						НомСумма = Отчет.GetValue("TAB1",  "TAB1_A6");
						//НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						ЕИОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
						ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  Акт.Товары.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар");						
							
							НоваяСтрока =  Акт.Товары.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					Акт.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  Акт.ПолучитьФорму("ФормаДокумента");
					Форма.Открыть();
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  					
				КонецПопытки;
				//----------------------------------------------------------------------------------------------------------
	
				 				
			ИначеЕсли Лев(ИмяСхемы,  7) = "1С77АВР" Тогда	
				
				Попытка
					Акт  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
					Акт.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
					//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "Акт ";
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					НомерДокаВх =  Строка(Отчет.GetValue("MAIN",  "NUM"));
					
					Акт.ДатаВходящегоДокумента  =  ДатаДокаВх;
					Акт.НомерВходящегоДокумента  =  НомерДокаВх; 
					Акт.Дата  =  Дата(ТекущаяДата()); 
					Акт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Акт,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В акті не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 

					Организация  =  НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация  =  Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					Акт.Организация  =  Организация; 

					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));

					 Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);

				//-----------------------------------------------------------------------------------------------------------------------------------------------//  
					Если СозданиеКонтрагентов = Ложь Тогда
						Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Акт.НомерВходящегоДокумента) + " від " + Формат(Акт.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ' = " + КонтрИНН +" та ЄДРПОУ = " +КонтрЕДРПОУ+ " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  + Символы.ПС + 
							"Увімкніть функцію автоматичного створення контрагента!");   
							Возврат;  					  
						КонецЕсли;	
							 
					Иначе
						Если
							Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() 
						Тогда 
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх);
						Иначе
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Акт.НомерВходящегоДокумента) + " від " + Формат(Акт.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагент з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+ " вже існує в 1С!" + Символы.ПС + "Створення накладної і контрагента неможливо!" + Символы.ПС + 
							"Вимкніть функцію автоматичного створення контрагента!");
							Возврат;  					  
						КонецЕсли;	
					КонецЕсли;

					Акт.Контрагент  =  Покупатель;
			//-----------------------------------------------------------------------------------------------------------------------------------------------//

					
					//Если СозданиеКонтрагентов = Ложь Тогда
					//	Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
					//		МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + ИННПокупателя + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");   
					//		Возврат;  					  
					//	КонецЕсли;	
					//		Акт.Контрагент  =  Покупатель; 
					//	Иначе
					//	Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок);
					//	Акт.Контрагент = Покупатель;
					//КонецЕсли;
 
					//-----------------------------------------------------
					СуществованиеДокаНазвание="ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					Акт.Комментарий="Переданий з M.E.Doc IS";
					Если ИмяБазы="УТ" Тогда
						Акт.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;

					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME1"));
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
						НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A3");						
						НомЦена = Отчет.GetValue("TAB1",  "TAB1_A6") / Отчет.GetValue("TAB1",  "TAB1_A3");
						НомСумма = Отчет.GetValue("TAB1",  "TAB1_A6");

						Если ИмяСхемы="1С77АВР" Тогда
							НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							СуммаНДС=НомЦена * 0.2 * НомКоличество;
						ИначеЕсли ИмяСхемы="1С77АВРБ" Тогда
							НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							СуммаНДС=0;
						КонецЕсли; 
						ЕИОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
						ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  Акт.Услуги.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Услуг");						
							
							НоваяСтрока =  Акт.Услуги.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					Акт.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  Акт.ПолучитьФорму("ФормаДокумента");
					Форма.Открыть(); 
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  					
				КонецПопытки;      					
				//  //----------------------------------------------------------------------------------------------------------  			
				// 	//ИначеЕсли Лев(ИмяСхемы,  6) = "1С82АЗ" Тогда
				// 	//		Сообщить("Создаем акт сверки");				
				//  //----------------------------------------------------------------------------------------------------------
				// 	ИначеЕсли Лев(ИмяСхемы,  7) = "1С82РАХ" Тогда  				
				// 			Счет.Записать();
				// 			Сообщить("Создали счет");
				// 			МедКомпонент.AcceptDoc(пGUID); 			
				// 			Форма  =  Счет.ПолучитьФорму("ФормаДокумента");
				// 			Форма.Открыть();				
				//  //----------------------------------------------------------------------------------------------------------  
				//  	ИначеЕсли Лев(ИмяСхемы,  6) = "1С82ВН" Тогда  				  
				// 			Сообщить("Создаем расходную накладную");
				
				// 			Сообщить("Создали расходную накладную"); 
				// 			РН.Записать();
				// 			МедКомпонент.AcceptDoc(пGUID); 
				// 			
				// 			Форма  =  РН.ПолучитьФорму("ФормаДокумента");
				// 			Форма.Открыть();	
				//----------------------------------------------------------------------------------------------------------
				
				 				
			ИначеЕсли Лев(ИмяСхемы,  6) = "1С77ВН" Тогда	
				
				Попытка
					Акт  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" ИЛИ ИмяБазы="кпЖРЕУ" Тогда
						Акт.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
						//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "Акт ";
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					НомерДокаВх =  Строка(Отчет.GetValue("MAIN",  "NUM"));
					
					Акт.ДатаВходящегоДокумента  =  ДатаДокаВх;
					Акт.НомерВходящегоДокумента  =  НомерДокаВх; 
					Акт.Дата  =  Дата(ТекущаяДата()); 
					Акт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Акт,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В акті не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 
					
					Организация  =  НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация  =  Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					Акт.Организация  =  Организация; 
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));

					 Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);

			//-----------------------------------------------------------------------------------------------------------------------------------------------//  
					Если СозданиеКонтрагентов = Ложь Тогда
						Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Акт.НомерВходящегоДокумента) + " від " + Формат(Акт.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+ " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  + Символы.ПС + 
							"Увімкніть функцію автоматичного створення контрагента!");   
							Возврат;  					  
						КонецЕсли;	
							 
					Иначе
						Если
							Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() 
						Тогда 
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх);
						Иначе
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(Акт.НомерВходящегоДокумента) + " від " + Формат(Акт.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагент з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+ " вже існує в 1С!" + Символы.ПС + "Створення накладної і контрагента неможливо!" + Символы.ПС + 
							"Вимкніть функцію автоматичного створення контрагента!");
							Возврат;  					  
						КонецЕсли;	
					КонецЕсли;

					Акт.Контрагент  =  Покупатель;
			//-----------------------------------------------------------------------------------------------------------------------------------------------//

					
					//Если СозданиеКонтрагентов = Ложь Тогда
					//	Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
					//		МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + ИННПокупателя + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");   
					//		Возврат;  					  
					//	КонецЕсли;	
					//		Акт.Контрагент  =  Покупатель; 
					//	Иначе
					//	Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок);
					//	Акт.Контрагент = Покупатель;
					//КонецЕсли;

					//-----------------------------------------------------
					СуществованиеДокаНазвание="ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					Акт.Комментарий="Переданий з M.E.Doc IS";
					Если ИмяБазы="УТ" Тогда
						Акт.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;
					
					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME"));
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
						НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A3");						
						НомЦена = Отчет.GetValue("TAB1",  "TAB1_A6") / Отчет.GetValue("TAB1",  "TAB1_A3");
						НомСумма = Отчет.GetValue("TAB1",  "TAB1_A6");
						
						Если ИмяСхемы="1С77ВН" Тогда
							НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							СуммаНДС=НомЦена * 0.2 * НомКоличество;
						ИначеЕсли ИмяСхемы="1С77ВНБ" Тогда
							НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							СуммаНДС=0;
						КонецЕсли; 
						ЕИОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
						ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  Акт.Товары.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар");						
							
							НоваяСтрока =  Акт.Товары.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					Акт.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  Акт.ПолучитьФорму("ФормаДокумента");
					Форма.Открыть(); 
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  					
				КонецПопытки;      					
				//  //----------------------------------------------------------------------------------------------------------  			
				// 	//ИначеЕсли Лев(ИмяСхемы,  6) = "1С82АЗ" Тогда
				// 	//		Сообщить("Создаем акт сверки");				
				//  //----------------------------------------------------------------------------------------------------------
				// 	ИначеЕсли Лев(ИмяСхемы,  7) = "1С82РАХ" Тогда  				
				// 			Счет.Записать();
				// 			Сообщить("Создали счет");
				// 			МедКомпонент.AcceptDoc(пGUID); 			
				// 			Форма  =  Счет.ПолучитьФорму("ФормаДокумента");
				// 			Форма.Открыть();				
				//  //----------------------------------------------------------------------------------------------------------  
				//  	ИначеЕсли Лев(ИмяСхемы,  6) = "1С82ВН" Тогда  				  
				// 			Сообщить("Создаем расходную накладную");
				
				// 			Сообщить("Создали расходную накладную"); 
				// 			РН.Записать();
				// 			МедКомпонент.AcceptDoc(пGUID); 
				// 			
				// 			Форма  =  РН.ПолучитьФорму("ФормаДокумента");
				// 			Форма.Открыть();	
				//----------------------------------------------------------------------------------------------------------

			Иначе
				МедКомпонент.CancelDoc("Код:      " + """" + ИмяСхемы + """"+ Символы.ПС + "Назва: " + """"+ ИмяДокумента + """" + Символы.ПС + 
				"Для документу не створено можливості вигрузки до 1С!"); 
			КонецЕсли;
			
		КонецЕсли; 

	Исключение
		МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  
	КонецПопытки;
		
КонецПроцедуры       

Процедура ТаблицаОтчетовПриПолученииДанных(Элемент,  ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки  =  ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.НомерСтрокиОтч.УстановитьТекст(Строка(ТаблицаОтчетов.Индекс(ДанныеСтроки)+1));
	КонецЦикла;
	
КонецПроцедуры

Процедура ОрганизацияОтчетаПриИзменении(Элемент)
	
	Если ОрганизацияОтчета.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЮрикФизикОтчет = "Юрик";
		Если Локализация.КодЯзыкаИнтерфейса()="ru" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУ1.Значение = "ЕДРПОУ";   			
		ИначеЕсли Локализация.КодЯзыкаИнтерфейса()="uk" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУ1.Значение = "ЄДРПОУ"; 			
		КонецЕсли;
	Иначе 
		ЮрикФизикОтчет = "Физик";
		ЭлементыФормы.НадписьКодПоЕДРПОУ1.Значение = "ДРФО";
	КонецЕсли;
	//-----------------------------------------------------------------
	КодОргДоИзмененийОтч = Строка(КодПоЕДРПОУ1);   	
	
	Если НЕ ОрганизацияОтчета.Пустая() Тогда
		КодЯзыкаПечать  =  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОрганизацияОтчета,  ТекущаяДата(), , , КодЯзыкаПечать);
		
		Если ОрганизацияОтчета.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				КодПоЕДРПОУ1  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ!';uk = 'У Вас не вказаний код ЄДРПОУ'"));
				КодПоЕДРПОУ1 =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;    
		ИначеЕсли Организация.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				КодПоЕДРПОУ1  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ДРФО!';uk = 'У Вас не вказаний код ДРФО!'"));
				КодПоЕДРПОУ1 =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;  
		КонецЕсли;	
	КонецЕсли;    
	//----------------------------------------------------------- 	
	Если КодОргДоИзмененийОтч<>Строка(КодПоЕДРПОУ1) Тогда
		ИзменениеОсновныхПараметровОтчетов();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаДокументовВыбор(Элемент,  ВыбраннаяСтрока,  Колонка,  СтандартнаяОбработка)
	
	Док =  ВыбраннаяСтрока.Документ.ПолучитьОбъект();
	ФормаДок = Док.ПолучитьФорму();
	ФормаДок.Открыть();
	
КонецПроцедуры

Процедура ТаблицаОтчетовВыбор(Элемент,  ВыбраннаяСтрока,  Колонка,  СтандартнаяОбработка)
	
	Если НЕ Колонка.Имя = "ФлагВыгрузитьОтчет"   Тогда
		Док =  ВыбраннаяСтрока.ДокументОтчет.ПолучитьОбъект();
		ФормаДок = Док.ПолучитьФорму();
		ФормаДок.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры    

Процедура ТаблицаДокументовПриАктивизацииСтроки(Элемент)
	
	ИзНихЧисло = ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки.Количество();
	
	Если ИзнИхЧисло>0 тогда 
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность = Истина;
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность = Ложь;
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Ложь;
	КонецЕсли;
	
	Если (ТипДок="ВхНалоговыйДокумент") ИЛИ (ТипДок="ВхПостТовУслуг") ИЛИ (ТипДок="ВхСчет") Тогда
        ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УдалитьСтрокуДокумента.Доступность=Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность=Истина;
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УдалитьСтрокуДокумента.Доступность=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник,  Событие,  Данные)
	
	ОбработкаВнешнегоСобытияМедка(Источник,  Событие,  Данные);
	
КонецПроцедуры

Процедура ПутьКФайлуМедкаПриИзменении(Элемент) 	
	
	Если 
		ЭлементыФормы.ЗапЛок.Значение  =  1 Тогда   
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\ezvit.exe";
	ИначеЕсли 
		ЭлементыФормы.ЗапЛок.Значение  =  2 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\ezvitnet.exe"; 
	ИначеЕсли 
		ЭлементыФормы.ЗапЛок.Значение  =  3 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\station.exe";
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Ложь;
	Иначе
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Истина; 
	КонецЕсли; 
	
	Подключение1СМедок();
	
КонецПроцедуры

Процедура КонтрагентОбработкаВыбора(Элемент,  ВыбранноеЗначение,  СтандартнаяОбработка)
	
	КонтрагентДоИзменений = Строка(Контрагент);
	
КонецПроцедуры	
	
Процедура ОрганизацияСправочникиПриИзменении(Элемент)
	
	Если ОрганизацияСправочники.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда

		Если Локализация.КодЯзыкаИнтерфейса() = "ru" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУСпр.Значение = "ЕДРПОУ";
		ИначеЕсли Локализация.КодЯзыкаИнтерфейса() = "uk" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУСпр.Значение = "ЄДРПОУ";
		КонецЕсли;
	Иначе 
		ЭлементыФормы.НадписьКодПоЕДРПОУСпр.Значение = "ДРФО";
	КонецЕсли;
	//-----------------------------------------------------------------
	КодОргДоИзмененийСпр = Строка(КодПоЕДРПОУСпр);  
	
	Если НЕ ОрганизацияСправочники.Пустая() Тогда
		КодЯзыкаПечать  =  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОрганизацияСправочники,  ТекущаяДата(), , , КодЯзыкаПечать);
		Если ОрганизацияСправочники.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				КодПоЕДРПОУСпр  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ!';uk = 'У Вас не вказаний код ЄДРПОУ'"));
				КодПоЕДРПОУСпр =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;    
		ИначеЕсли ОрганизацияСправочники.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				КодПоЕДРПОУСпр  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ДРФО!';uk = 'У Вас не вказаний код ДРФО!'"));
				КодПоЕДРПОУСпр =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;  
		КонецЕсли;	
	КонецЕсли;    
	//-----------------------------------------------------------	
	//Если КодОргДоИзменений<>Строка(КодПоЕДРПОУ)   тогда
	//	ИзменениеОсновныхПараметров();
	//КонецЕсли;          
	
КонецПроцедуры

Процедура СравнитьСпр1СиМНажатие(Элемент) 	
	
	Если Не ЗначениеЗаполнено(КодПоЕДРПОУСпр) Тогда
		Предупреждение(НСтр("ru = 'Незаполнены обязательные поля!';uk = 'Незаповнено необхідних полів!'"));
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.ПСпрКонтрагентов.Значение  =  1 Тогда
		СправочникМедок = "HBPARTNER";
		СправочникМедокГруппа  =  "HBPARTNERGRP";
		Справочник1С = "Контрагенты";
		СравнитьСправочники(СправочникМедок,  СправочникМедокГруппа,  Справочник1С);
		
	ИначеЕсли ЭлементыФормы.ПСпрКонтрагентов.Значение  =  2 Тогда;
		СправочникМедок = "HBGOODS";
		СправочникМедокГруппа  =  "HBGOODSGRP";
		Справочник1С = "Номенклатура";
		СравнитьСправочники(СправочникМедок,  СправочникМедокГруппа,  Справочник1С); 
		
	ИначеЕсли ЭлементыФормы.ПСпрКонтрагентов.Значение  =  3 Тогда
		СправочникМедок = "PHYSPERSONS";
		СправочникМедокГруппа  =  "";
		Справочник1С = "СотрудникиОрганизаций";
		СравнитьСправочники(СправочникМедок,  СправочникМедокГруппа,  Справочник1С); 	
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ПСпрКонтрагентовПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСправочники) Тогда
		Предупреждение(НСтр("ru = 'Заполните обязательные поля!';uk = 'Заповніть обовязкові поля!'"));
		Возврат;
	КонецЕсли;           	
	ВыборСправочникаКлюч();
	СравнитьСпр1СиМНажатие(Элемент);
	
КонецПроцедуры

Процедура ТаблицаОтчетовПриАктивизацииСтроки(Элемент)
	
	ИзНихЧислоОтч = ЭлементыФормы.ТаблицаОтчетов.ВыделенныеСтроки.Количество();
	
	Если ИзНихЧислоОтч>0 тогда 
		ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Истина;
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Ложь;
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(НачПериода,  КонПериода); 	
	Если мНастройкаПериода.Редактировать() Тогда    		
		НачПериода  =  мНастройкаПериода.ПолучитьДатуНачала();
		КонПериода  =  мНастройкаПериода.ПолучитьДатуОкончания();		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНастройкаПериода1Нажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(НачПериодаОтч,  КонПериодаОтч); 	
	Если мНастройкаПериода.Редактировать() Тогда         		
		НачПериодаОтч  =  мНастройкаПериода.ПолучитьДатуНачала();
		КонПериодаОтч  =  мНастройкаПериода.ПолучитьДатуОкончания();  		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭДОВозможенНажатие(Элемент)
	
	ТекстЧтоДелать=Нстр("ru = 'Для этого зайдите в M.E.Doc IS:';uk = 'Для цього зайдіть в  M.E.Doc IS:'");
	ТекстМодульПервички =Нстр("ru = 'Первичные документы - Реестр первичных документов';uk = 'Первинні документи - Реєстр первинних документів'"); 
	ТекстДействие=Нстр("ru = 'Выберите входящие документы и выберите меню ';uk = 'Оберіть вхідні документи оберіть меню '");
	ТекстДействиеМеню=Нстр("ru = 'Сервис - Отправить в 1С';uk = 'Сервіс - відправити в 1С'");
	ТекстПримечание=Нстр("ru = 'Примечание:';uk = 'Примітка:'");
	ТекстДляДокументов=Нстр("ru = 'передача из M.E.Doc IS в 1С реализована для документов:';uk = 'передавання з  M.E.Doc IS до 1С реалізовано для документів:'");
	ТекстХотитеПередать=Нстр("ru = 'Хотите передать их в 1С прямо сейчас?';uk = 'Спробувати передати їх прямо зараз?'");
	ТекстЗаголовок=Нстр("ru = 'Получение документов из M.E.Doc IS в 1С';uk = ''");
	ТекстЧтоДелатьВМедке=Нстр("ru = 'Модуль первичных документов запущен. Перейдите в M.E.Doc IS';uk = 'Модуль первинних документів запущено. Перейдіть до M.E.Doc IS'");
	
	Ответ  = Вопрос(ТекстЧтоДелать + Символы.ПС + 
	Строка("Модуль " + """") + ТекстМодульПервички + Строка(""".") + Символы.ПС + 
	ТекстДействие + Строка("""") + ТекстДействиеМеню + Строка(""".") + Символы.ПС + Символы.ПС + 
	ТекстПримечание + Символы.ПС + ТекстДляДокументов + Символы.ПС +
	Нстр("ru = '1) Налоговая накладная';uk = '1) Податкова накладна'") + Символы.ПС +
	Нстр("ru = '2) Приложение 2';uk = '2) Додаток 2'") + Символы.ПС +
	Нстр("ru = '3) Акт выполненных работ (на основании типовых шаблонов поставки M.E.Doc IS):';uk = 'Акт виконаних робіт (на основі типових шаблонів поставки M.E.Doc IS)'") + Символы.ПС +
	"   - 1С77АВР, 1С77АВРБ" + Символы.ПС +
	"   - 1С82АВР, 1С82АВРБ, 1С82АВР0" + Символы.ПС +  Символы.ПС +
	ТекстХотитеПередать,  РежимДиалогаВопрос.ДаНет, , , ТекстЗаголовок,);
	
	Если Ответ = КодВозвратаДиалога.Да  Тогда
		Попытка
			App  =  Новый COMОбъект("MEDOC.ZApplication");
			App.RunModule("PrimaryDocsRstNew"); 
			Предупреждение(ТекстЧтоДелатьВМедке);
		Исключение
			ПрефиксТекст="Внимание";
			ЗапускМедка(ПрефиксТекст); 
		КонецПопытки;  		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭДОНевозможенНажатие(Элемент)
	
	ПрефиксТекст=Нстр("ru = 'Обмен документами НЕ ВОЗМОЖЕН ';uk = 'Обмін документами НЕ МОЖЛИВИЙ '"); 
	ЗапускМедка(ПрефиксТекст);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаДокументовОпрограмме(Кнопка)
	
	//*** ПутьКОбработке =  ЭтотОбъект.ИспользуемоеИмяФайла;
	ПутьКОбработке =  ИспИмяФайла;
	
	Файл  =  Новый Файл(ПутьКОбработке);
	ПутьПомощь = Файл.Путь + Строка("Инструкция_для_1С_82 (M.E. DOC IS).pdf");
	ФайлПроверка  =  Новый Файл (ПутьПомощь);
	Если ФайлПроверка.Существует() Тогда
		ЗапуститьПриложение(ПутьПомощь);
	Иначе
		Предупреждение(НСтр("ru = 'Файл Инструкции не найден!';uk = 'Файл Інструкції відсутній!'"));
	КонецЕсли;      
	
КонецПроцедуры

Процедура ТаблицаДокументовПослеУдаления(Элемент)
	
	ВсегоЧисло = ТаблицаДокументов.Количество();
	
КонецПроцедуры

Процедура ТаблицаОтчетовПослеУдаления(Элемент)
	
	ВсегоЧислоОтч = ТаблицаОтчетов.Количество();
	
КонецПроцедуры

Процедура ВыборТипаУСМПриИзменении(Элемент)
	
	КодДокМедок = ЭлементыФормы.ВыборТипаУСМ.Значение;
	Если ЗначениеЗаполнено(КодДокМедок) Тогда 
		//ЭлементыФормы.ВыборДокаУСМ.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаУСПриПолученииДанных(Элемент,  ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки  =  ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Строка(ТаблицаУС.Индекс(ДанныеСтроки)+1));
		//ОформлениеСтроки.Ячейки.name. = Новый Цвет(0,  255,  0); 
		//Данные.ТранспондерОформлениеЯчейки.ЦветФона  =  WebЦвета.БледноЗолотистый;
		ОформлениеСтроки.Ячейки.НомерСтроки.ЦветФона  =  WebЦвета.Роса; 
		ОформлениеСтроки.Ячейки.name.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.caption.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.type.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.maxlength.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.spr.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.sprname.ЦветФона  =  WebЦвета.ЗамшаСветлый;
		ОформлениеСтроки.Ячейки.Поле1СНазвание.ЦветФона  =  WebЦвета.Перламутровый; 
		ОформлениеСтроки.Ячейки.Таблица1С.ЦветФона  =  WebЦвета.Перламутровый; 
		ОформлениеСтроки.Ячейки.ПолеТаблицы1С.ЦветФона  =  WebЦвета.Перламутровый;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыборТипаУСМНачалоВыбораИзСписка(Элемент,  СтандартнаяОбработка)
	
	Попытка  
		App  =  Новый COMОбъект("MEDOC.ZApplication");
	Исключение
		ПрефиксТекст="";
		ЗапускМедка(ПрефиксТекст);
		Возврат;
	КонецПопытки;
	
	мСписокГруппШаблоновМедок  =  Новый СписокЗначений();	
	IPrim  =  App.GetPrimaryDocs(); 
	parts  =  IPrim.GetParts(); 
	Пока НЕ parts.EOF Цикл 
		мСписокГруппШаблоновМедок.Добавить(parts.Fields.Item("CODE").Value,  parts.Fields.Item("NAME").Value);
		parts.Next(); 
	КонецЦикла;     	
	ЭлементыФормы.ВыборТипаУСМ.СписокВыбора  =  мСписокГруппШаблоновМедок;
	
КонецПроцедуры

Процедура ВыборДокаУСМПриИзменении(Элемент)
	
	ТаблицаУС.Очистить();
	КодШаблонаМедок = СокрЛП(ЭлементыФормы.ВыборДокаУСМ.Значение);
	
	App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	IPrim  =  App.GetPrimaryDocs(); 
	template  =  IPrim.GetTemplate(7,  КодШаблонаМедок);  
	
	Чтение  =  Новый ЧтениеXML; 
	Чтение.УстановитьСтроку(template);   	
	
	Пока Чтение.Прочитать() Цикл 

		Если (Чтение.ТипУзла  =  ТипУзлаXML.НачалоЭлемента) 
			И (Чтение.Имя  =  "field") Тогда
			НоваяСтрока  =  ТаблицаУС.Добавить();
			Пока Чтение.ПрочитатьАтрибут() Цикл
				ТипУзла  =  Чтение.ТипУзла;
				Имя  =  Чтение.Имя;
				Значение  =  Чтение.Значение;
				НоваяСтрока[Чтение.Имя]  =  Чтение.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ВыборДокаУСМНачалоВыбораИзСписка(Элемент,  СтандартнаяОбработка)
	
	мСписокШаблоновМедок  =  Новый СписокЗначений();  
	
	Попытка  
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение
		Ответ =  Вопрос(Нстр("ru = 'Настройка универсального импорта НЕ ВОЗМОЖНА - M.E.Doc IS не запущен.';uk = 'Налаштування універсального імпорту НЕ МОЖЛИВЕ - M.E.Doc IS не запущено.'") + Символы.ПС + Нстр("ru = 'Запустить на основании настроек?';uk = 'Запустити на основі налаштувань?'"),  РежимДиалогаВопрос.ДаНет);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда
			ПриНажатииНажатие(ПутьКФайлуМедка);
		ИначеЕсли Ответ  =  КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	IPrim  =  App.GetPrimaryDocs(); 
	templates  =  IPrim.GetTemplates(7,  0 ); // 7 - получить шаблоны Первичных документов
	Пока НЕ templates.EOF Цикл 
		мСписокШаблоновМедок.Добавить(templates.Fields.Item("CHARCODE").Value,  templates.Fields.Item("NAME").Value);  
		templates.Next(); 
	КонецЦикла; 
	мСписокШаблоновМедок.СортироватьПоПредставлению();
	ЭлементыФормы.ВыборДокаУСМ.СписокВыбора  =  мСписокШаблоновМедок;
	
КонецПроцедуры

Процедура ТабличноеПоле1ПриПолученииДанных(Элемент,  ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки  =  ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.Номер.УстановитьТекст(Строка(ТаблицаУСЦ.Индекс(ДанныеСтроки)+1));   		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаявкаСформироватьНажатие(Элемент)
	
	ВРазработке();
	
КонецПроцедуры

Процедура ВыборДокаУС1СПриИзменении(Элемент)   	
	
	Колонка  =  ЭлементыФормы.ТаблицаУС.Колонки.Поле1СНазвание;
	
	СписокВыбора  =  Новый СписокЗначений();
	СписокВыбора.Очистить();
	
	СписокТЧ  =  ЭлементыФормы.ТаблицаУС.Колонки.Таблица1С;
	СписокВыбора2  =  Новый СписокЗначений();
	
	СписокВыбора2.Очистить();  
	ДокСТекстовика  = ЭлементыФормы.ИмяДокумента1С.Значение;
	
	//Для каждого Реквизит из Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты Цикл 
	//	СписокВыбора.Добавить(Структура,  ИмяДокумента);
	//КонецЦикла;
	//Реквизиты  =  Метаданные.Документы[СокрЛП(ЭлементыФормы.ИмяДокумента1С.Значение)].Реквизиты;
	//Для каждого Реквизит из Метаданные.Документы[СокрЛП(ЭлементыФормы.ИмяДокумента1С.Значение)].Реквизиты Цикл 
	//	СписокВыбора.Добавить(Реквизит.Имя);
	//КонецЦикла; 
	
	//Реквизиты  =  Метаданные.Документы[Элемент.Значение].Реквизиты;
	
	Для Каждого док Из Метаданные.Документы[Элемент.Значение].Реквизиты Цикл
		СписокВыбора.Добавить(Док.Имя,  Док.Синоним); 
	КонецЦикла; 
	СписокВыбора.СортироватьПоЗначению();
	
	//------------------------------------------------------------------------------------------
	Колонка.ЭлементУправления.СписокВыбора = СписокВыбора;       
	
	ЭлементыФормы.ИмяДокумента1С.Значение  =  ЭлементыФормы.ВыборДокаУС1С.Значение;        
	ДокСТекстовика  = ЭлементыФормы.ИмяДокумента1С.Значение;
	МетаданныеНужногоДок  =  Метаданные.НайтиПоПолномуИмени("Документ."+ДокСТекстовика);
	Для каждого ДокТЗ из МетаданныеНужногоДок.ТабличныеЧасти Цикл
		СписокВыбора2.Добавить(ДокТЗ.Имя);
	КонецЦикла;   	
	СписокВыбора2.СортироватьПоЗначению();
	СписокТЧ.ЭлементУправления.СписокВыбора = СписокВыбора2; 
	//----------------------------------------------------------------
	ЭлементыФормы.ДобУССписок.Видимость = Истина;
	ЭлементыФормы.УдУССписок.Видимость = Истина;
	ЭлементыФормы.СписокУС.Видимость = Истина;
	
КонецПроцедуры

Процедура Кнопка2Нажатие(Элемент)
	
	Если НЕ ПустаяСтрока(ЭлементыФормы.ВыборДокаУС1С.Значение) Тогда 
		СписокУС.Добавить(ЭлементыФормы.ВыборДокаУС1С.Значение);
		ЭлементыФормы.КПУС.Кнопки.СохранитьСхему.Доступность = Истина;		
	Иначе 
		Предупреждение("Не выбран документ 1С!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура Кнопка4Нажатие(Элемент)
	
	Если СписокУС.Количество() = 0  Тогда
		Предупреждение("Нет ниодного документа с настройками!" + Символы.ПС + "Сохранение настроек невозможно!");
		Возврат;
	КонецЕсли;
	
	Если ТаблицаУС.Количество() = 0  Тогда
		Предупреждение("Нет ниодного поля с настройками!" + Символы.ПС + "Сохранение настроек невозможно!");
		Возврат;
	КонецЕсли;    
	
	//*** Файл  =  Новый Файл(ИспользуемоеИмяФайла);
	Файл  =  Новый Файл(ИспИмяФайла);
	
	ОбъектXML  =  Новый ЗаписьXML;   	
	ОбъектXML.ОткрытьФайл(Файл.Путь + "Universalny_import.xml",  "windows-1251");
	ОбъектXML.ЗаписатьОбъявлениеXML();  
	ОбъектXML.ЗаписатьНачалоЭлемента("SETTINGS");
	ОбъектXML.ЗаписатьНачалоЭлемента("CONFIGURATION");
	ЗаписатьЭлемент(ОбъектXML,  "IDconfiguration",  СокрЛП(ИмяБазы));  
	ОбъектXML.ЗаписатьНачалоЭлемента("DOCUMENT");
	ЗаписатьЭлемент(ОбъектXML,  "DOC",  СокрЛП(ЭлементыФормы.ПолеСписка1.ТекущаяСтрока));
	ЗаписатьЭлемент(ОбъектXML,  "DOCMEDOC",  СокрЛП(КодШаблонаМедок)); 
	ОбъектXML.ЗаписатьНачалоЭлемента("FIELDS");
	Для Каждого СтрокаУС из ТаблицаУС Цикл
		//УС  =  СтрокаУС.НомерСтроки; 
		//НайденнаяСтрока  =  ТаблицаУС.Найти(Предприятие, "Предприятие"); 
		ЗаписатьЭлемент(ОбъектXML,  "NUM",  СокрЛП(СтрокаУС.Номер));  
		ЗаписатьЭлемент(ОбъектXML,  "name",  СокрЛП(СтрокаУС.name)); 
		ЗаписатьЭлемент(ОбъектXML,  "caption",  СокрЛП(СтрокаУС.caption)); 
		ЗаписатьЭлемент(ОбъектXML,  "type",  СокрЛП(СтрокаУС.type)); 
		ЗаписатьЭлемент(ОбъектXML,  "maxlength",  СокрЛП(СтрокаУС.maxlength)); 
		ЗаписатьЭлемент(ОбъектXML,  "spr",  СокрЛП(СтрокаУС.spr)); 
		ЗаписатьЭлемент(ОбъектXML,  "sprname",  СокрЛП(СтрокаУС.sprname)); 
		ЗаписатьЭлемент(ОбъектXML,  "Таблица1С",  СокрЛП(СтрокаУС.Таблица1С)); 
		ЗаписатьЭлемент(ОбъектXML,  "Поле1СНазвание",  СокрЛП(СтрокаУС.Поле1СНазвание));
		ЗаписатьЭлемент(ОбъектXML,  "ПолеТаблицы1С",  СокрЛП(СтрокаУС.ПолеТаблицы1С)); 		
	КонецЦикла;
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.Закрыть();    
	Предупреждение("ХМЛ сформирован!");
	
КонецПроцедуры

Процедура УдУССписокНажатие(Элемент)
	
	Попытка
		Если СписокУС.Количество()>0 Тогда
			Режим  =  РежимДиалогаВопрос.ДаНет;
			Ответ  =  Вопрос(НСтр("ru  =  'Удалить схему универсального импорта для документа?'; uk  =  'Вилучити схему універсального імпорту для документу? '"), Режим, 0);
			Если Ответ  =  КодВозвратаДиалога.Да Тогда
				СписокУС.Удалить(ЭлементыФормы.СписокУС.ТекущаяСтрока);
				Если СписокУС.Количество()>0 Тогда
					ЭлементыФормы.КПУС.Кнопки.СохранитьСхему.Доступность = Истина;
				Иначе
					ЭлементыФормы.КПУС.Кнопки.СохранитьСхему.Доступность = Ложь;   
				КонецЕсли; 		
			КонецЕсли; 
		Иначе
			х=1/0;
		КонецЕсли;
	Исключение
		Предупреждение("Не выбрана схема для удаления!");
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

Процедура КПУССохранитьСхему(Кнопка)
	
	Если СписокУС.Количество() = 0  Тогда
		Предупреждение("Нет ниодного документа с настройками!" + Символы.ПС + "Сохранение настроек невозможно!");
		Возврат;
	КонецЕсли;
	
	Если ТаблицаУС.Количество() = 0  Тогда
		Предупреждение("Нет ниодного поля с настройками!" + Символы.ПС + "Сохранение настроек невозможно!");
		Возврат;
	КонецЕсли;    
	
	//*** Файл  =  Новый Файл(ИспользуемоеИмяФайла);
	Файл  =  Новый Файл(ИспИмяФайла);
	
	ОбъектXML  =  Новый ЗаписьXML;   	
	ОбъектXML.ОткрытьФайл(Файл.Путь + "Universalny_import.xml",  "windows-1251");
	ОбъектXML.ЗаписатьОбъявлениеXML();  
	ОбъектXML.ЗаписатьНачалоЭлемента("SETTINGS");
	ОбъектXML.ЗаписатьНачалоЭлемента("CONFIGURATION");
	ЗаписатьЭлемент(ОбъектXML,  "IDconfiguration",  СокрЛП(ИмяБазы));  
	ОбъектXML.ЗаписатьНачалоЭлемента("DOCUMENT");
	ЗаписатьЭлемент(ОбъектXML,  "DOC",  СокрЛП(ЭлементыФормы.СписокУС.ТекущаяСтрока));
	ЗаписатьЭлемент(ОбъектXML,  "DOCMEDOC",  СокрЛП(КодШаблонаМедок)); 
	ОбъектXML.ЗаписатьНачалоЭлемента("FIELDS");
	Для Каждого СтрокаУС из ТаблицаУС Цикл
		//УС  =  СтрокаУС.НомерСтроки; 
		//НайденнаяСтрока  =  ТаблицаУС.Найти(Предприятие, "Предприятие"); 
		//ЗаписатьЭлемент(ОбъектXML,  "NUM",  СокрЛП(СтрокаУС.Номер));  
		//ЗаписатьЭлемент(ОбъектXML,  "name",  СокрЛП(СтрокаУС.name)); 
		//ЗаписатьЭлемент(ОбъектXML,  "caption",  СокрЛП(СтрокаУС.caption)); 
		//ЗаписатьЭлемент(ОбъектXML,  "type",  СокрЛП(СтрокаУС.type)); 
		//ЗаписатьЭлемент(ОбъектXML,  "maxlength",  СокрЛП(СтрокаУС.maxlength)); 
		//ЗаписатьЭлемент(ОбъектXML,  "spr",  СокрЛП(СтрокаУС.spr)); 
		//ЗаписатьЭлемент(ОбъектXML,  "sprname",  СокрЛП(СтрокаУС.sprname)); 
		//ЗаписатьЭлемент(ОбъектXML,  "Таблица1С",  СокрЛП(СтрокаУС.Таблица1С)); 
		//ЗаписатьЭлемент(ОбъектXML,  "Поле1СНазвание",  СокрЛП(СтрокаУС.Поле1СНазвание));
		//ЗаписатьЭлемент(ОбъектXML,  "ПолеТаблицы1С",  СокрЛП(СтрокаУС.ПолеТаблицы1С)); 
		//----------------------------------------
		//Если ЗначениеЗаполнено(СтрокаУС.ПолеТаблицы1С) Тогда 
		//	ЗаписатьЭлемент(ОбъектXML,  СокрЛП(СтрокаУС.name),  СокрЛП(СтрокаУС.ПолеТаблицы1С)); 
		//ИначеЕсли ЗначениеЗаполнено(СокрЛП(СтрокаУС.Поле1СНазвание)) Тогда
		//	ЗаписатьЭлемент(ОбъектXML,  СокрЛП(СтрокаУС.name),  СокрЛП(СтрокаУС.Поле1СНазвание)); 	
		//КонецЕсли;
		//-----------------------------------------
		// Если ЗначениеЗаполнено(СтрокаУС.ПолеТаблицы1С) Тогда 
		//	ЗаписатьЭлемент(ОбъектXML,  СокрЛП(СтрокаУС.name),  СокрЛП(СтрокаУС.ПолеТаблицы1С)); 
		//ИначеЕсли ЗначениеЗаполнено(СокрЛП(СтрокаУС.Поле1СНазвание)) Тогда
		ЗаписатьЭлемент(ОбъектXML,  СокрЛП(СтрокаУС.name),  ?(ЗначениеЗаполнено(СтрокаУС.Поле1СНазвание),  СокрЛП(СтрокаУС.Поле1СНазвание),  СокрЛП(СтрокаУС.ПолеТаблицы1С))); 	
		//КонецЕсли;
		//------------------------------------------
	КонецЦикла;
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.Закрыть();    
	Предупреждение("ХМЛ сформирован!");
	
КонецПроцедуры

Процедура ДобавитьСтрокуУС(Кнопка)
	
	Если ЗначениеЗаполнено(ЭлементыФормы.ВыборДокаУСМ.Значение)	и ЗначениеЗаполнено(ЭлементыФормы.ВыборДокаУС1С.Значение) Тогда
		ЭлементыФормы.ТаблицаУС.ДобавитьСтроку();
	Иначе
		Предупреждение(НСтр("ru = 'Укажите все обязательные поля!';uk = 'Оберіть всі обовязкові поля!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспУнивимпортПриИзменении(Элемент)
	
	ЭлементыФормы.ТипДок.СписокВыбора.Очистить();
	СписокДоков  =  ЭлементыФормы.ТипДок.СписокВыбора;
	//------------------------------------------------------
	Если ЭлементыФормы.ИспУнивимпорт.Значение  =  истина тогда
		ЭлементыФормы.ТипДок.Значение = "";
		
		//***Файл  =  Новый Файл(ИспользуемоеИмяФайла);
		Файл  =  Новый Файл(ИспИмяФайла);
		Чтение  =  Новый ЧтениеXML;
		Чтение.ОткрытьФайл(Файл.Путь + "Universalny_import.xml");
			Пока Чтение.Прочитать() Цикл 

				Если (Чтение.ТипУзла  =  ТипУзлаXML.НачалоЭлемента) 
					И (Чтение.Имя  =  "DOC") Тогда
				Пока Чтение.ПрочитатьАтрибут() Цикл
					СписокДоков.Добавить(Чтение.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеВыбора1ПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Реквизиты  =  Метаданные.Документы[Элемент.Значение].Реквизиты;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаУСПриАктивизацииЯчейки(Элемент)
	
	
КонецПроцедуры

Процедура НадписьПараметрыПриИзменении(Элемент)
	
	ПроверитьПараметры();
	
КонецПроцедуры

Процедура ТаблицаОтчетовПриВыводеСтроки(Элемент,  ОформлениеСтроки,  ДанныеСтроки)
	
	Документ  =  ДанныеСтроки.ДокументОтчет;	
	ДанныеСтроки.ПериодОтчета  =  ПредставлениеПериода(НачалоМесяца(Документ.ДатаНачала),  КонецМесяца(Документ.ДатаОкончания),  "ФП = Истина");
	ДанныеСтроки.Название = Метаданные.Отчеты[Документ.ИсточникОтчета].Синоним;
	
КонецПроцедуры

Процедура c1medocНажатие(Элемент)
	
	//Письмо  =  Новый ИнтернетПочтовоеСообщение;
	//Текст  =  Письмо.Тексты.Добавить("Пожелания :");
	////Текст.ТипТекста  =  ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
	//Письмо.Тема  =  "Пробное письмо"; 
	//Письмо.Отправитель  =  "1cmedoc@gmail.com";
	//Почта.Послать(Письмо);
	
	//ЗапуститьПриложение("1cmedoc@gmail.com");
	
	//Письмо  =  Документы.ЭлектронноеПисьмо.СоздатьДокумент();    
	//Письмо.Дата  =  ТекущаяДата();
	//Письмо.УчетнаяЗапись  =  УчетнаяЗапись;//СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
	//Письмо.Кому  =  "mitnick@ya.ru";    
	//Письмо.Тема  =  "Тема письма";
	//Письмо.ТекстПисьма  =  "Текст письма";
	//Письмо.ВидТекстаПисьма  =  УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию;
	//Письмо.ГруппаУчетнойЗаписи  =  УчетнаяЗапись.ГруппаИсходящие;
	//Письмо.СтатусПисьма  =  Перечисления.СтатусыПисем.Исходящее;
	//Письмо.Записать(РежимЗаписиДокумента.Запись);
	
	//http://help1c.com/faq/view/1408.html
	
КонецПроцедуры

Процедура ДобавитьСписокПервички()
	
	  
	СписокПервички  =  Новый СписокЗначений();
	СписокПервички.Добавить("ОказаниеУслуг",  Нстр("ru = 'Акт выполненных работ';uk = 'Акт виконаних послуг'"));
	СписокПервички.Добавить("АктСверки",  Нстр("ru = 'Акт сверки';uk = 'Акт звіряння'"));
	СписокПервички.Добавить("ВидНакладна",  Нстр("ru = 'Расходная накладная';uk = 'Видаткова накладна'"));
	СписокПервички.Добавить("Счет",  Нстр("ru = 'Счет покупателям';uk = 'Рахунок покупцям'"));  
	СписокПервички.Добавить("ВозвратТоваровОтПокупателя",  Нстр("ru = 'Возврат от покупателя';uk = 'Зворотна накладна від покупця'"));
	СписокПервички.Добавить("ВозвратТоваровПоставщику",  Нстр("ru = 'Возврат поставщику';uk = 'Повернення постачальнику'"));
	СписокПервички.Добавить("сепаратор",  Нстр("ru = '-------------------------------------------';uk = '-------------------------------------------'"));
	СписокПервички.Добавить("НалоговаяНакладная",  Нстр("ru = 'Налоговая накладная';uk = 'Податкова накладна'"));
	СписокПервички.Добавить("Приложение2",  Нстр("ru = 'Приложение 2';uk = 'Додаток 2'"));
	//СписокПервички.Добавить("сепаратор",  Нстр("ru = '-------------------------------------------';uk = '-------------------------------------------'"));
	//СписокПервички.Добавить("ВхНалоговыйДокумент",  Нстр("ru = 'Входящие налоговые документы';uk = 'Вхідні податкові документи'"));
	//СписокПервички.Добавить("ВхПостТовУслуг",  Нстр("ru = 'Поступление товаров и услуг';uk = 'Надходження товарів та послуг'"));
	//СписокПервички.Добавить("ВхСчет",  Нстр("ru = 'Счет поставщиков';uk = 'Рахунок постачальників'"));	
	
КонецПроцедуры

Процедура ПередаемАкт(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, НайденнаяСтрока)
	
	Попытка
		Формирование_Акт(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемВозвратТоваровОтПокупателя(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровОтПокупателя, НайденнаяСтрока)
	
	Попытка
		Формирование_ВозвратТоваровОтПокупателя(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВозвратТоваровОтПокупателя  =  КоличествоДокументовВозвратТоваровОтПокупателя+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемВозвратТоваровПоставщику(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровПоставщику, НайденнаяСтрока)
	
	Попытка
		Формирование_ВозвратТоваровПоставщику(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВозвратТоваровПоставщику  =  КоличествоДокументовВозвратТоваровПоставщику+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемСчет(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, НайденнаяСтрока)
	
	Попытка	
		Формирование_Счет(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовСчет  =  КоличествоДокументовСчет+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД); 		
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемАЗ(App, pd, OrgId, Документ, Бланк, ИД, КоличествоДокументовАктСверки, НайденнаяСтрока)
	
	Попытка
		Формирование_АктаСверки(App, pd, OrgId, Документ, Бланк, ИД); 				
		КоличествоДокументовАктСверки = КоличествоДокументовАктСверки+1; 
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД); 
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура ПередаемРасхНакл(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, НайденнаяСтрока)
	
	Попытка	
		Формирование_РасхНакл(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВидНакл  =  КоличествоДокументовВидНакл+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемНН(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовНН, НайденнаяСтрока)
	
	Попытка	

		Если Формирование_НН(App,  Документ,  Бланк,  PDate,  ИД ) Тогда		
			КоличествоДокументовНН  =  КоличествоДокументовНН + 1;
			ПроверкаСтатусов(App, Документ, ИД);
			СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемДод2(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовДод2, НайденнаяСтрока)
	
	Попытка
		Если Формирование_Дод2(App,  Документ,  Бланк,  PDate,  ИД) Тогда			
			КоличествоДокументовДод2  =  КоличествоДокументовДод2+1;
			ПроверкаСтатусов(App, Документ, ИД);
			СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;

КонецПроцедуры

// Позволяет определить есть ли среди реквизитов шапки документа
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

Функция ПроверкаНовойФормыНН()	
	Ответ = Вопрос( НСтр("ru = 'Внимание! Возможны расхождения при передаче данных.';uk = 'Увага! Можливі розбіжності при передачі даних.'") + Символы.ПС
	+ НСтр("ru = 'Причина: отсутствие обновления программы 1С соответственно по новым формам Налоговой накладной и Расчета Корректировки.';uk = 'Причина: відсутність оновлення програми 1С відповідно до нових форм Податкової накладної та Розрахунку коригувань.'") + Символы.ПС
	+ НСтр("ru = 'Отменить передачу документа?';uk = 'Відмінити передачу документів'"),  РежимДиалогаВопрос.ДаНет );
	Если Ответ  =  КодВозвратаДиалога.Да Тогда 
		ОтменаПередачиНН = Истина;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

//Функция ПроверкаКонтрагента(AОтчет, НазваниеДока, НомерДокаВх, ДатаДокаВх)
//	
//				//-----------------------------------------------------------------------------------------------------------------------------------------------//  
//					Если СозданиеКонтрагентов = Ложь Тогда
//						Если  Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() Тогда    
//							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагента з ІПН = " + ИННПокупателя + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  + Символы.ПС + 
//							" увімкніть функцію автоматичного створення контрагента!");   
//							Возврат Контрагент.Пустая();  					  
//						КонецЕсли;	
//							 
//					Иначе
//						Если
//							Покупатель  =  Справочники.Контрагенты.ПустаяСсылка() 
//						Тогда 
//							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх);
//						Иначе
//							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС + "Контрагент з ІПН = " + ИННПокупателя + " та ЄДРПОУ = " +КонтрЕДРПОУ+ " вже існує в 1С!" + Символы.ПС + "Створення накладної і контрагента неможливо!" + Символы.ПС + 
//							" вимкніть функцію автоматичного створення контрагента!");
//							Возврат Контрагент.Пустая();  					  
//						КонецЕсли;	
//					КонецЕсли;
//					Возврат Покупатель;

//				//-----------------------------------------------------------------------------------------------------------------------------------------------//
//КонецФункции;

Функция СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх) 
	
		СозданныеМедком = Строка("СозданныеМедком");
		ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоНаименованию(СозданныеМедком);
						
	Если НЕ ЗначениеЗаполнено(ГруппаКонтрагентов) тогда   	
			ГруппаОбъект = Справочники.Контрагенты.СоздатьГруппу();
			ГруппаОбъект.Наименование = СозданныеМедком;         
			ГруппаОбъект.Записать(); 				
	КонецЕсли;
						
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			НовыйКонтрагент.Родитель =?(НЕ ЗначениеЗаполнено(ГруппаКонтрагентов), ГруппаОбъект.Ссылка, ГруппаКонтрагентов.Ссылка);				
            НовыйКонтрагент.Наименование = КонтрНаименование; 	   
			НовыйКонтрагент.НаименованиеПолное  = КонтрНаименование;
			НовыйКонтрагент.КодПоЕДРПОУ = КонтрЕДРПОУ;  
			НовыйКонтрагент.ИНН =  КонтрИНН;
			НовыйКонтрагент.Комментарий = Строка(НСтр("ru = 'Создан M.E.Doc на основании';uk = 'Створено M.E.Doc на підставі'") + 
			НазваниеДока + "№" + Строка(НомерДокаВх) + НСтр("ru = ' от ';uk = ' від '") + Формат(ДатаДокаВх, "ДЛФ = Д"));
		    НовыйКонтрагент.Записать();
								
								
			Если ЗначениеЗаполнено(КонтрАдр)
				Тогда 
				НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.установить(НовыйКонтрагент.Ссылка);
				НаборЗаписей.Отбор.Тип.установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
				НаборЗаписей.Отбор.Вид.установить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				НаборЗаписей.Прочитать();
				Запись = НаборЗаписей.Добавить();
				Запись.Объект = (НовыйКонтрагент.Ссылка);
				Запись.Тип = (Перечисления.ТипыКонтактнойИнформации.Адрес);
				Запись.Вид = (Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				Запись.Представление = КонтрАдр;
				Запись.Поле1=Справочники.КлассификаторСтранМира.НайтиПоКоду("804");
			Попытка 
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
								
			Если ЗначениеЗаполнено(КонтрТлф) 
				Тогда
				НаборЗаписейТел = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
				НаборЗаписейТел.Отбор.Объект.установить(НовыйКонтрагент.ссылка);
				НаборЗаписейТел.Отбор.Тип.установить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				НаборЗаписейТел.Отбор.Вид.установить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
				НаборЗаписейТел.Прочитать();
				ЗаписьТел = НаборЗаписейТел.Добавить();
				ЗаписьТел.Объект = (НовыйКонтрагент.Ссылка);
				ЗаписьТел.Тип = (Перечисления.ТипыКонтактнойИнформации.Телефон);
				ЗаписьТел.Вид = (Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
				ЗаписьТел.Представление = КонтрТлф; 				
			Попытка 
				НаборЗаписейТел.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		
		Возврат НовыйКонтрагент.Ссылка;
	Иначе
		Возврат Контрагент.Пустая();
	КонецЕсли;

КонецФункции

///////////////////////////////////////////////////////////////////////////////

СуффиксДСС = Строка("SS");
СуффиксМДЗ = Строка("MD");  

мНастройкаПериода  =  Новый НастройкаПериода;
мВалютаРегламентированногоУчета  =  Константы.ВалютаРегламентированногоУчета.Получить();

мСписокВыбораСпецРежимНалогообложения  =  Новый СписокЗначений();
мСписокВыбораСпецРежимНалогообложения.Добавить(Неопределено,  НСтр("ru = '     ';uk = '     '"));
мСписокВыбораСпецРежимНалогообложения.Добавить(2,  НСтр("ru = '2   с/х предприятия (специальный режим)';uk = '2   с/г підприємства (спеціальний режим)'"));
мСписокВыбораСпецРежимНалогообложения.Добавить(3,  НСтр("ru = '3   с/х предприятия (всех форм собственности)';uk = '3   с/г підприємства (усіх форм власності)'"));
мСписокВыбораСпецРежимНалогообложения.Добавить(4,  НСтр("ru = '4   перерабатывающие предприятия (всех форм собственности)';uk = '4   переробні підприємства (усіх форм власності)'"));

СписокРеглОтчетов  =  Новый СписокЗначений();
//СписокРеглОтчетов.Добавить("",  Нстр("ru = '';uk = ''"));
СписокРеглОтчетов.Добавить("сепаратор",  Нстр("ru = '--------------------------Финансовая отчетность---------------------------------';uk = '--------------------------Фінансова звітність---------------------------------'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетБаланс",  Нстр("ru = 'Ф1. Баланс';uk = 'Ф1. Баланс'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетФинансовыйРезультат",  Нстр("ru = 'Ф2. Отчет о финрезультатах';uk = 'Ф2. Звіт про фінансові результати'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетБалансМП",  Нстр("ru = '1-м,  2-м. Малый баланс';uk = '1-м,  2-м. Малий баланс'")); 
//СписокРеглОтчетов.Добавить("сепаратор",  Нстр("ru = '--------------------------Статистическая отчетность---------------------------------';uk = '--------------------------Статистична звітність---------------------------------'"));
//СписокРеглОтчетов.Добавить("РегламентированныйОтчетПоТруду",  Нстр("ru = '1-ПВ. Отчет по труду';uk = '1-ПВ. Звіт з праці'"));  
//СписокРеглОтчетов.Добавить("сепаратор",  Нстр("ru = '--------------------------Налоговая отчетность---------------------------------';uk = '--------------------------Податкова звітність---------------------------------'"));
//СписокРеглОтчетов.Добавить("РегламентированныйОтчетРеестрНалоговыхНакладных",  Нстр("ru = 'Реестр налоговых накладных';uk = 'Реєстр податкових накладних'"));  

wshShell  =  Новый COMОбъект("WScript.Shell");
WshExec  =  Неопределено;
ИспИмяФайла="D:\1C8Docking160331.epf"; //***