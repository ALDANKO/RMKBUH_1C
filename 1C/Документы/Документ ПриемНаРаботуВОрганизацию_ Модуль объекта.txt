////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати09101995(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
    Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
    Запрос.УстановитьПараметр("РеглВалюта",	 глЗначениеПеременной("ВалютаРегламентированногоУчета"));

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ПриемНаРаботуВОрганизацию.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И ПриемНаРаботуВОрганизацию.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 КАК РазмерНадбавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""грн.""
		|		ИНАЧЕ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1.Наименование
		|	КОНЕЦ КАК ВалютаНадбавки,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ВидНадбавки.СпособРасчета КАК СпособРасчета,
		|	СтрокиДокумента.ДатаПриема,
		|	СтрокиДокумента.ДатаУвольнения,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, СтрокиДокумента.Сотрудник.Наименование) КАК Работник,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	СтрокиДокумента.ИспытательныйСрок,
		|	СтрокиДокумента.УсловияПриемаНаРаботу,
		|	СтрокиДокумента.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|	СтрокиДокумента.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|	СтрокиДокумента.Сотрудник.Код КАК ТабельныйНомер,
		|	СтрокиДокумента.ВидЗанятости КАК ВидЗанятости,
		|	СтрокиДокумента.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	СтрокиДокумента.Должность.Наименование КАК Должность,
		|	СтрокиДокумента.ВалютаТарифнойСтавки,
		|	ЕСТЬNULL(СтрокиДокумента.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка,
		|	СтрокиДокумента.Должность.Категория.Наименование КАК Категория,
		|	СтрокиДокумента.ОкладСпособРасчета,
		|	ЕСТЬNULL(СтрокиДокумента.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
		|	ЕСТЬNULL(СтрокиДокумента.РазмерТарифныйРазряд, 0) КАК РазмерТарифныйРазряд,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""коп.""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КопейкиТарифныйРазряд,
		|	ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд.Наименование, ""грн."") КАК ВалютаТарифныйРазряд		
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюРаботники.НомерСтроки КАК НомерСтроки,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаПриема,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаУвольнения КАК ДатаУвольнения,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник КАК Сотрудник,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|		ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК ИспытательныйСрок,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|		ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ПриемНаРаботуВОрганизациюРаботники.Должность КАК Должность,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1 КАК ОкладТарифнаяСтавка,
		|		РазмерТарифныхСтавокСрезПоследних.Размер КАК РазмерТарифныйРазряд,
		|		РазмерТарифныхСтавокСрезПоследних.Валюта КАК ВалютаТарифныйРазряд,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|				ТОГДА ""грн.""
		|			ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1.Наименование
		|		КОНЕЦ КАК ВалютаТарифнойСтавки,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|				ТОГДА ""коп.""
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК КопейкиТарифнойСтавки,
		|		ВЫБОР
		|			КОГДА ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|				ТОГДА """"
		|			ИНАЧЕ ""По совместительству ""
		|		КОНЕЦ + ПриемНаРаботуВОрганизациюРаботники.УсловияПриемаНаРаботу КАК УсловияПриемаНаРаботу,		
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета КАК ОкладСпособРасчета
		|	ИЗ
		|		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(
		|			&ДатаДокумента,
		|			ТарифныйРазряд В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1
		|				ИЗ
		|					Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|				ГДЕ
		|					ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
		|					И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)) КАК РазмерТарифныхСтавокСрезПоследних
		|				ПО ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавокСрезПоследних.ТарифныйРазряд
		|			ПО ПриемНаРаботуВОрганизациюРаботники.Ссылка = ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка
		|				И (ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
		|				И ПриемНаРаботуВОрганизациюРаботники.Сотрудник = ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник
		|	ГДЕ
		|		ПриемНаРаботуВОрганизациюРаботники.Ссылка = &ДокументСсылка) КАК СтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних
		|		ПО СтрокиДокумента.ПодразделениеОрганизации = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ПодразделениеОрганизации
		|			И СтрокиДокумента.Должность = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.Физлицо
		|			ИЗ
		|				Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|			ГДЕ
		|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО СтрокиДокумента.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати09101995()

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
    Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
    Запрос.УстановитьПараметр("РеглВалюта",	 глЗначениеПеременной("ВалютаРегламентированногоУчета"));

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ПриемНаРаботуВОрганизацию.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И ПриемНаРаботуВОрганизацию.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиДокумента.ДатаПриема,
		|	СтрокиДокумента.ДатаУвольнения,
		|	СтрокиДокумента.Сотрудник КАК Сотрудник,
		|	СтрокиДокумента.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
		|	СтрокиДокумента.Должность КАК ДолжностьСотрудника,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, СтрокиДокумента.Сотрудник.Наименование) КАК Работник,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	СтрокиДокумента.ИспытательныйСрок,
		|	ВЫБОР КОГДА СтрокиДокумента.ИспытательныйСрок <> 0
		|	ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ФлагИспытательныйСрок,
		|	СтрокиДокумента.УсловияПриемаНаРаботу,
		|	СтрокиДокумента.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|	ВЫБОР КОГДА СтрокиДокумента.Сотрудник.ДатаДоговора <> ДАТАВРЕМЯ(1,1,1)
		|	ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ФлагКонтракт,
		|	СтрокиДокумента.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|	СтрокиДокумента.Сотрудник.ДатаОкончания КАК ДатаОкончания,
		|	СтрокиДокумента.Сотрудник.Код КАК ТабельныйНомер,
		|	СтрокиДокумента.ВидЗанятости КАК ВидЗанятости,
		|	СтрокиДокумента.ГрафикРаботы КАК ГрафикРаботы,
		|	ВЫБОР КОГДА СтрокиДокумента.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|	ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ФлагОсновная,
		|	СтрокиДокумента.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	СтрокиДокумента.Должность.Наименование КАК Должность,
		|	СтрокиДокумента.ВалютаТарифнойСтавки,
		|	ЕСТЬNULL(СтрокиДокумента.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка,
		|	СтрокиДокумента.Должность.Категория.Наименование КАК Категория,
		|	СтрокиДокумента.ОкладСпособРасчета,
		|	ЕСТЬNULL(СтрокиДокумента.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
		|	ЕСТЬNULL(СтрокиДокумента.РазмерТарифныйРазряд, 0) КАК РазмерТарифныйРазряд,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""коп.""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КопейкиТарифныйРазряд,
		|	ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд.Наименование, ""грн."") КАК ВалютаТарифныйРазряд,
		|	ЕСТЬNULL(СтрокиДокумента.ВалютаЗначение, &РеглВалюта) КАК ВалютаЗначение,
		|	ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд, &РеглВалюта) КАК ВалютаТарифныйРазрядЗначение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюРаботники.НомерСтроки КАК НомерСтроки,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаПриема,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаУвольнения КАК ДатаУвольнения,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник КАК Сотрудник,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|		ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК ИспытательныйСрок,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|		ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ПриемНаРаботуВОрганизациюРаботники.Должность КАК Должность,
		|		ПриемНаРаботуВОрганизациюРаботники.ГрафикРаботы КАК ГрафикРаботы,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1 КАК ОкладТарифнаяСтавка,
		|		РазмерТарифныхСтавокСрезПоследних.Размер КАК РазмерТарифныйРазряд,
		|		РазмерТарифныхСтавокСрезПоследних.Валюта КАК ВалютаТарифныйРазряд,
		|		ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) КАК ВалютаЗначение,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|				ТОГДА ""грн.""
		|			ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1.Наименование
		|		КОНЕЦ КАК ВалютаТарифнойСтавки,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|				ТОГДА ""коп.""
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК КопейкиТарифнойСтавки,
		|		ВЫБОР
		|			КОГДА ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|				ТОГДА """"
		|			ИНАЧЕ ""По совместительству ""
		|		КОНЕЦ + ПриемНаРаботуВОрганизациюРаботники.УсловияПриемаНаРаботу КАК УсловияПриемаНаРаботу,		
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета КАК ОкладСпособРасчета
		|	ИЗ
		|		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(
		|			&ДатаДокумента,
		|			ТарифныйРазряд В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1
		|				ИЗ
		|					Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|				ГДЕ
		|					ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
		|					И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)) КАК РазмерТарифныхСтавокСрезПоследних
		|				ПО ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавокСрезПоследних.ТарифныйРазряд
		|			ПО ПриемНаРаботуВОрганизациюРаботники.Ссылка = ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка
		|				И (ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
		|				И ПриемНаРаботуВОрганизациюРаботники.Сотрудник = ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник
		|	ГДЕ
		|		ПриемНаРаботуВОрганизациюРаботники.Ссылка = &ДокументСсылка) КАК СтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.Физлицо
		|			ИЗ
		|				Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|			ГДЕ
		|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО СтрокиДокумента.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

Функция СформироватьЗапросДоплаты(Сотрудник, Подразделение, Должность)
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
    Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("Сотрудник",	 Сотрудник);
	Запрос.УстановитьПараметр("Подразделение",	 Подразделение);
	Запрос.УстановитьПараметр("Должность",	 Должность);
	 Запрос.УстановитьПараметр("РеглВалюта",	 глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	СписокСпособов = Новый СписокЗначений;
    СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	Запрос.УстановитьПараметр("СписокСпособов",	 СписокСпособов);
	

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Надбавки.ВидРасчета КАК ВидРасчета,
		|	Надбавки.Показатель1 КАК Сумма,
		|	ЕСТЬNULL(Надбавки.Валюта1, &РеглВалюта) КАК Валюта
		|ИЗ
		|	(ВЫБРАТЬ
		|		НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки КАК ВидРасчета,
		|		НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1 КАК Показатель1,
		|		НадбавкиПоШтатномуРасписаниюОрганизаций.Валюта1 КАК Валюта1
		|	ИЗ
		|		РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&ДатаДокумента, ПодразделениеОрганизации = &Подразделение И Должность = &Должность) КАК НадбавкиПоШтатномуРасписаниюОрганизаций
		|   ГДЕ
		|       НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки.СпособРасчета В(&СписокСпособов)
		|
		|   ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1
		|	ИЗ
		|		Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|   ГДЕ
		|       ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка =  &ДокументСсылка
		|       И ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник = &Сотрудник
		|       И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета В(&СписокСпособов)
		|	) КАК Надбавки";

	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросДоплаты	

Функция СформироватьЗапросНадбавки(Сотрудник, Подразделение, Должность)
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
    Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("Сотрудник",	 Сотрудник);
	Запрос.УстановитьПараметр("Подразделение",	 Подразделение);
	Запрос.УстановитьПараметр("Должность",	 Должность);
	СписокСпособов = Новый СписокЗначений;
    СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	Запрос.УстановитьПараметр("СписокСпособов",	 СписокСпособов);
	

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Надбавки.ВидРасчета КАК ВидРасчета,
		|	Надбавки.Показатель1 КАК Показатель1,
		|	Надбавки.Показатель2 КАК Показатель2
		|ИЗ
		|	(ВЫБРАТЬ
		|		НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки КАК ВидРасчета,
		|		НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1 КАК Показатель1,
		|		НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель2 КАК Показатель2
		|	ИЗ
		|		РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&ДатаДокумента, ПодразделениеОрганизации = &Подразделение И Должность = &Должность) КАК НадбавкиПоШтатномуРасписаниюОрганизаций
		|   ГДЕ
		|       НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки.СпособРасчета В(&СписокСпособов)
		|
		|   ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель2
		|	ИЗ
		|		Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|   ГДЕ
		|       ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка =  &ДокументСсылка
		|       И ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник = &Сотрудник
		|       И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета В(&СписокСпособов)
		|	) КАК Надбавки";

	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросНадбавки	


#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "П1_от_09_10_1995" Тогда
		ТабДокумент = ПечатьП109101995();
	ИначеЕсли ИмяМакета = "П1_от_05_12_2008" Тогда
		ТабДокумент = ПечатьП1();	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Прием на работу в организацию "));

КонецФункции // Печать()

// Функция формирует табличный документ с печатной формой "П-1",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьП109101995()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_П1";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати09101995("ПоРеквизитамДокумента").Выбрать();
	ВыборкаДляШапки.Следующий();
	ВыборкаРаботники = СформироватьЗапросДляПечати09101995("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    СведенияОбОрганизации =УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	
	// запоминаем области макета
	Макет = ПолучитьМакет("П1_от_09_10_1995");
	Область = Макет.ПолучитьОбласть("Форма"); 
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// выводим данные из шапки
		Область.Параметры.Заполнить(ВыборкаДляШапки);
		
		Область.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		Область.Параметры.ЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
		// Данные по работнику.
		Область.Параметры.Заполнить(ВложеннаяВыборка);
		
		// Уточним валюту тарифной ставки
		ОкладВПечатнойФорме = ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.РазмерТарифныйРазряд, ВложеннаяВыборка.ОкладТарифнаяСтавка);
		Если ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаТарифнойСтавки) Тогда
			Область.Параметры.ОкладТарифнаяСтавка = "" + Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2") +  " (" + ВложеннаяВыборка.ВалютаТарифнойСтавки+")";
		Иначе
			Область.Параметры.ОкладТарифнаяСтавка = ОкладВПечатнойФорме;
		КонецЕсли;
	
		Если ВложеннаяВыборка.ИспытательныйСрок = 0 тогда
			Область.Параметры.ИспытательныйСрок = "Без строку випробування";
			Область.Параметры.ИспытательныйСрокОкончание = "";
		Иначе  
			Область.Параметры.ИспытательныйСрок = ВложеннаяВыборка.ИспытательныйСрок;
			Область.Параметры.ИспытательныйСрокОкончание = "місяць(ів)";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ВложеннаяВыборка.ДатаУвольнения) Тогда
			Область.Параметры.ТипТрудовогоДоговора = "безстроковий";
		Иначе
			Область.Параметры.ТипТрудовогоДоговора = "на визначений строк";
			Область.Параметры.ДатаУвольнения = "до "+Формат(ВложеннаяВыборка.ДатаУвольнения,"ДФ=""дд.ММ.гггг""");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорНомер) Тогда
			Область.Параметры.ТрудовойДоговор = "";
		Иначе
			Область.Параметры.ТрудовойДоговор = "№ "+Строка(ВложеннаяВыборка.ТрудовойДоговорНомер)+" від "+Формат(ВложеннаяВыборка.ТрудовойДоговорДата,"ДФ=""дд.ММ.гггг""");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
			
			ТекстЯчейки = Область.Параметры.ОкладТарифнаяСтавка;
			ТекстЯчейки = "" + ТекстЯчейки + "," + Символы.ПС + ВложеннаяВыборка.РазмерНадбавки;
			
			Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				ТекстЯчейки = ТекстЯчейки + "(%)"
			Иначе	
				ТекстЯчейки = ТекстЯчейки + ?(ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаНадбавки)," (" + ВложеннаяВыборка.ВалютаНадбавки+")","");
			КонецЕсли;
			
			Область.Параметры.ОкладТарифнаяСтавка = ТекстЯчейки;
		КонецЕсли;
		
		//уберем из табельного номера префикс
		Область.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
		
		Если ВложеннаяВыборка.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			Область.Параметры.ВидЗанятости = "Основна";
		Иначе
			Область.Параметры.ВидЗанятости = "За сумісництвом";
		КонецЕсли;	
		
		Область.Параметры.ОкладСпособРасчета = Локализация.ПолучитьЛокализованныйСинонимОбъекта(ВложеннаяВыборка.ОкладСпособРасчета,"uk");
		
		ТабДокумент.Вывести(Область);

		
	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции // ПечатьП1()	

// Функция формирует табличный документ с печатной формой "П-1",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьП1()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_П1";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаДляШапки.Следующий();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    СведенияОбОрганизации =УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	
	// запоминаем области макета
	Макет = ПолучитьМакет("П1_от_05_12_2008");
	Область = Макет.ПолучитьОбласть("Форма"); 
	
	РеглВалюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// выводим данные из шапки
		Область.Параметры.Заполнить(ВыборкаДляШапки);
		
		Область.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		
		// Данные по работнику.
		Область.Параметры.Заполнить(ВложеннаяВыборка);
		
		Если ВложеннаяВыборка.ТребуетВводаТарифногоРазряда Тогда
			Оклад = ВложеннаяВыборка.РазмерТарифныйРазряд;
			Если  ВложеннаяВыборка.ВалютаТарифныйРазрядЗначение <> РеглВалюта Тогда
				Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВложеннаяВыборка.ВалютаТарифныйРазрядЗначение));
				Оклад = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Оклад,ВложеннаяВыборка.ВалютаТарифныйРазрядЗначение, РеглВалюта,
								Структура.Курс, 1, Структура.Кратность, 1);
			КонецЕсли;	
		Иначе
			Оклад = ВложеннаяВыборка.ОкладТарифнаяСтавка;
			Если  ВложеннаяВыборка.ВалютаЗначение <> РеглВалюта Тогда
				Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВложеннаяВыборка.ВалютаЗначение));
				Оклад = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Оклад,ВложеннаяВыборка.ВалютаЗначение, РеглВалюта,
								Структура.Курс, 1, Структура.Кратность, 1);
			КонецЕсли;	

		КонецЕсли;
		
		
		Гривны = Цел(Оклад);
		Копейки = Цел((Оклад-Гривны)*100);
		
		Гривны = ОбщегоНазначения.РазложитьЧислоВСтроку(Гривны,6);
		Копейки = ОбщегоНазначения.РазложитьЧислоВСтроку(Копейки,2,Истина);
		
		Для Сч = 1 По 6 Цикл
			Область.Параметры["Гривны" + Сч] = Сред(Строка(Гривны), Сч, 1);
		КонецЦикла;
		Для Сч = 1 По 2 Цикл
			Область.Параметры["Копейки" + Сч] = Сред(Строка(Копейки), Сч, 1);
		КонецЦикла;

		
		Если ВложеннаяВыборка.ГрафикРаботы.ДлительностьРабочейНедели <> 0 Тогда
			Область.Параметры.ФлагДлительность = Истина;
			Область.Параметры.ДлительностьЧасы = Цел(ВложеннаяВыборка.ГрафикРаботы.ДлительностьРабочейНедели);
			Минуты = (ВложеннаяВыборка.ГрафикРаботы.ДлительностьРабочейНедели - Цел(ВложеннаяВыборка.ГрафикРаботы.ДлительностьРабочейНедели))*60;
			Область.Параметры.ДлительностьМинуты = Формат(Минуты,"ЧЦ=2; ЧН=00; ЧВН=");
		КонецЕсли;	
		
		//уберем из табельного номера префикс
		Область.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
		
		ВыборкаДоплаты = СформироватьЗапросДоплаты(ВложеннаяВыборка.Сотрудник,ВложеннаяВыборка.ПодразделениеСотрудника,ВложеннаяВыборка.ДолжностьСотрудника).Выбрать();
		Если ВыборкаДоплаты.Следующий() Тогда
			Сумма = ВыборкаДоплаты.Сумма;
			Если  ВыборкаДоплаты.Валюта <> РеглВалюта Тогда
				Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВыборкаДоплаты.Валюта));
				Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,ВыборкаДоплаты.Валюта, РеглВалюта,
								Структура.Курс, 1, Структура.Кратность, 1);
			КонецЕсли;	

			Гривны = Цел(Сумма);
			Копейки = Цел((Сумма-Гривны)*100);
			
			Гривны = ОбщегоНазначения.РазложитьЧислоВСтроку(Гривны,5);
			Копейки = ОбщегоНазначения.РазложитьЧислоВСтроку(Копейки,2,Истина);
			
			Для Сч = 1 По 5 Цикл
				Область.Параметры["ДоплатаГривны" + Сч] = Сред(Строка(Гривны), Сч, 1);
			КонецЦикла;
			Для Сч = 1 По 2 Цикл
				Область.Параметры["ДоплатаКопейки" + Сч] = Сред(Строка(Копейки), Сч, 1);
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаНадбавки = СформироватьЗапросНадбавки(ВложеннаяВыборка.Сотрудник,ВложеннаяВыборка.ПодразделениеСотрудника,ВложеннаяВыборка.ДолжностьСотрудника).Выбрать();
		СчНадбавок = 1;
		Пока ВыборкаНадбавки.Следующий() Цикл
			Если ВыборкаНадбавки.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				Процент = Цел(ВыборкаНадбавки.Показатель1);
			Иначе
				Процент = Цел(ВыборкаНадбавки.Показатель2);
			КонецЕсли;	
			
			Процент = ОбщегоНазначения.РазложитьЧислоВСтроку(Процент,3);
			
			Для Сч = 1 По 3 Цикл
				Область.Параметры["Надбавка"+СчНадбавок+ Сч] = Сред(Строка(Процент), Сч, 1);
			КонецЦикла;
			
			Если ВыборкаНадбавки.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
				Область.Параметры["Надбавка"+СчНадбавок] = "вечірні години";
			ИначеЕсли ВыборкаНадбавки.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
				Область.Параметры["Надбавка"+СчНадбавок] = "нічні години";
			Иначе
				Вид = ВыборкаНадбавки.ВидРасчета.Наименование;
				Позиция = Найти(Вид," за"); 
				Если Позиция > 0 Тогда
					Вид = Сред(Вид,Позиция+4);
				КонецЕсли;	
				Область.Параметры["Надбавка"+СчНадбавок] = Вид;
			КонецЕсли;	
				
			
			СчНадбавок = СчНадбавок+1;
			Если СчНадбавок >4 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		//***
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Организация, Дата);
		Область.Параметры.ДолжностьРуководителя 	= "Керівник підприємства";
		Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
			Область.Параметры.ФИОРуководителя  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.РуководительФИО.Фамилия, Руководители.РуководительФИО.Имя, Руководители.РуководительФИО.Отчество, Истина);// Кратко
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Руководители.ФинДиректор) Тогда
			Область.Параметры.ДолжностьРуководителя2 = Руководители.ФинДиректорДолжность.Наименование;// Кратко
		КонецЕсли;
		Если ЗначениеЗаполнено(Руководители.ФинДиректорФИО) Тогда
			Область.Параметры.ФИОФиндир  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ФинДиректорФИО.Фамилия, Руководители.ФинДиректорФИО.Имя, Руководители.ФинДиректорФИО.Отчество, Истина);// Кратко
		КонецЕсли;
		//***
		
		
		ТабДокумент.Вывести(Область);

		
	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции // ПечатьП1()	


#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("П1_от_05_12_2008","Форма П-1");
	СтруктураПечатныхФорм.Вставить("П1_от_09_10_1995","Форма П-1 (от 09.10.1995)");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет табличную часть документа "Работники" списком по оформленным трудовым договорам
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиСотрудниками(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачалаПериода",		ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода",	ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	//Запрос.УстановитьПараметр("РайонныйКоэффициент",	РайонныйКоэффициент);
	
	УсловиеНаДатыРаботы = "";
	Если ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
		УсловиеНаДатыРаботы = УсловиеНаДатыРаботы + Символы.ПС + Символы.Таб + "И <имя поля>.ДатаНачала >= &ДатаНачалаПериода";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
		УсловиеНаДатыРаботы = УсловиеНаДатыРаботы + Символы.ПС + Символы.Таб + "И <имя поля>.ДатаНачала <= &ДатаОкончанияПериода";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
	|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
	|	СотрудникиОрганизаций.ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы,
	|	СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование,
	|	СотрудникиОрганизаций.ВидРасчета КАК ВидРасчета,
	|	СотрудникиОрганизаций.ТарифнаяСтавка КАК Показатель1,
	|	NULL КАК Показатель2,
	|	NULL КАК Показатель3,
	|	NULL КАК Показатель4,
	|	СотрудникиОрганизаций.ВалютаТарифнойСтавки КАК Валюта1,
	|	NULL КАК Валюта2,
	|	NULL КАК Валюта3,
	|	NULL КАК Валюта4,
	|	СотрудникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд1,
	|	NULL КАК ТарифныйРазряд2,
	|	NULL КАК ТарифныйРазряд3,
	|	NULL КАК ТарифныйРазряд4
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизаций.Организация
	|			ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизаций") + "
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Физлицо,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Должность,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ПодразделениеОрганизации,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ЗанимаемыхСтавок,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаНачала,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаОкончания,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ИспытательныйСрок,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ГрафикРаботы,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Физлицо.Наименование,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Надбавка,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель1,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель2,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель3,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель4,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта1,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта2,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта3,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта4,
	|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд1,
	|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд2,
	|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд3,
	|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд4
	|ИЗ
	|	Справочник.СотрудникиОрганизаций.ПерсональныеНадбавки КАК СотрудникиОрганизацийПерсональныеНадбавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизацийПерсональныеНадбавки.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Организация
	|			ИНАЧЕ СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизацийПерсональныеНадбавки.Надбавка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|	И СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Актуальность
	|	И СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизацийПерсональныеНадбавки.Ссылка") + " 
	|
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала,
	|	СотрудникиОрганизаций.ДатаОкончания,
	|	СотрудникиОрганизаций.ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы,
	|	СотрудникиОрганизаций.Физлицо.Наименование,
	|	СхемыМотивацииРаботников.ВидРасчета,
	|	СхемыМотивацииРаботников.Показатель1,
	|	СхемыМотивацииРаботников.Показатель2,
	|	СхемыМотивацииРаботников.Показатель3,
	|	СхемыМотивацииРаботников.Показатель4,
	|	СхемыМотивацииРаботников.Валюта1,
	|	СхемыМотивацииРаботников.Валюта2,
	|	СхемыМотивацииРаботников.Валюта3,
	|	СхемыМотивацииРаботников.Валюта4,
	|	СхемыМотивацииРаботников.ТарифныйРазряд1,
	|	СхемыМотивацииРаботников.ТарифныйРазряд2,
	|	СхемыМотивацииРаботников.ТарифныйРазряд3,
	|	СхемыМотивацииРаботников.ТарифныйРазряд4
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
	|		ПО (СхемыМотивацииРаботников.Организация = ВЫБОР
	|				КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА СотрудникиОрганизаций.Организация
	|				ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА СхемыМотивацииРаботников.Должность <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|						И СхемыМотивацииРаботников.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ТОГДА СхемыМотивацииРаботников.Должность = СотрудникиОрганизаций.Должность
	|							И СхемыМотивацииРаботников.Подразделение = СотрудникиОрганизаций.ПодразделениеОрганизации
	|				ИНАЧЕ СхемыМотивацииРаботников.Должность = СотрудникиОрганизаций.Должность
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизаций.Организация
	|			ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
	|	И СхемыМотивацииРаботников.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизаций") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	Сотрудник,
	|	ВидРасчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РаботникиОрганизации.Очистить();
	ОсновныеНачисления.Очистить();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), Выборка);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиПоТрудовымДоговорам()

// Заполняет табличную часть документа "Работники" списком работников компании
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиПринятымиВКомпанию(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачалаПериода",		ДатаНачалаПериода);
	Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
		Запрос.УстановитьПараметр("ДатаОкончанияПериода",	ДатаОкончанияПериода);
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончанияПериода",	Дата(2100,1,1));
	КонецЕсли;	
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Дата",					Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Сотрудник.Физлицо КАК Физлицо,
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации,
	|	ПриемыВКомпанию.Должность КАК Должность,
	|	ВложенныйЗапрос.ЗанимаемыхСтавок,
	|	ВложенныйЗапрос.ДатаПриема,
	|	ВЫБОР
	|		КОГДА ПриемыВКомпанию.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПриемыВКомпанию.НапомнитьПоЗавершении
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НапомнитьПоЗавершении,
	|	ВложенныйЗапрос.ИспытательныйСрок,
	|	ПриемыВКомпанию.ДатаУвольнения,
	|	ПриемыВКомпанию.ГрафикРаботы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|		ВложенныйЗапрос.ДатаПриема КАК ДатаПриема,
	|		0 КАК ИспытательныйСрок,
	|		1 КАК ЗанимаемыхСтавок
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПриемыВКомпанию.Сотрудник КАК Сотрудник,
	|			МИНИМУМ(ПриемыВКомпанию.ДатаПриема) КАК ДатаПриема
	|		ИЗ
	|			Документ.ПриемНаРаботу.Работники КАК ПриемыВКомпанию
	|		ГДЕ
	|			ПриемыВКомпанию.Ссылка.Проведен
	|			И ПриемыВКомпанию.ДатаПриема МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПриемыВКомпанию.Сотрудник) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемыВКомпанию
	|			ПО ВложенныйЗапрос.ДатаПриема = ПриемыВКомпанию.ДатаПриема
	|				И ВложенныйЗапрос.Сотрудник = ПриемыВКомпанию.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ДатаПриема,
	|		ВложенныйЗапрос.Сотрудник) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемыВКомпанию
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|			ПО ПриемыВКомпанию.Подразделение = СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
	|				И (СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация)
	|		ПО ВложенныйЗапрос.ДатаПриема = ПриемыВКомпанию.ДатаПриема
	|			И ВложенныйЗапрос.Сотрудник = ПриемыВКомпанию.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Сотрудник.Наименование";
	
	ОсновныеНачисления.Очистить();
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиПринятымиВКомпанию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если Клиент Тогда

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриемНаРаботуВОрганизацию.Дата,
	|	ПриемНаРаботуВОрганизацию.Организация,
	|	ПриемНаРаботуВОрганизацию.Организация КАК ГоловнаяОрганизация,
	|	ПриемНаРаботуВОрганизацию.Ссылка,
	|	ПриемНаРаботуВОрганизацию.Организация.Наименование
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	//Определим список организаций - структурных подразделений
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",		Дата('00010101'));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "ФизЛицо"
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	//		На каждую дату приема и увольнения ищем движения в регистре "РаботникиОрганизации" и "СостояниеРаботниковОрганизации"

	Если ПроверкаШтатногоРасписания Тогда
		
		// определим самую раннюю и позднюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема) КАК ДатаНачала
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <> &ПустаяДата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = ?(ЗначениеЗаполнено(Выборка.ДатаНачала),Выборка.ДатаНачала,Дата);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачала",	ДатаНачала);
		Запрос.УстановитьПараметр("Приход",		ВидДвиженияНакопления.Приход);
		
		//  Дополнительно используем выборки: 
		//  СвободноСтавокНаДатуПриема
		//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаПриема
		//		подсчитываем количество остающихся ставок (с учетом "предшествующих" данных текущего документа)
		//

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ТЧРаботникиОрганизации.Совместитель,
		|	ТЧРаботникиОрганизации.ПринятНаНовоеРабочееМесто,
		|	ТЧРаботникиОрганизации.ДатаСозданияРабочегоМеста,
		|	ТЧРаботникиОрганизации.ВидНовогоРабочегоМеста КАК ВидНовогоРабочегоМеста,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> &Организация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	СвободноСтавокНаДатуПриема.ОстатокСтавок КАК ОстатокСтавок,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизлицами.ТрудовойДоговор)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеВерныйДоговор,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
		|			ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Работники.Должность КАК Должность,
		|				Работники.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
		|			ИЗ
		|				Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Работники
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ЕСТЬNULL(ШтатноеРасписание.Период, &ДатаНачала) КАК Период,
		|						Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|						Работники.Должность КАК Должность
		|					ИЗ
		|						Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Работники
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|							ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|								И Работники.Должность = ШтатноеРасписание.Должность
		|					ГДЕ
		|						Работники.Ссылка = &ДокументСсылка) КАК ШтатноеРасписание
		|					ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|						И Работники.Должность = ШтатноеРасписание.Должность
		|						И Работники.ДатаПриема >= ШтатноеРасписание.Период
		|			ГДЕ
		|				Работники.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ПодразделениеОрганизации,
		|				Работники.НомерСтроки,
		|				Работники.Должность) КАК МаксимальныеПериодыШР
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|				ПО МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
		|					И МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|					И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Работники.НомерСтроки КАК НомерСтроки,
		|					Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					Работники.Должность КАК Должность,
		|					СУММА(ВЫБОР
		|							КОГДА Вакансии.ВидДвижения = &Приход
		|								ТОГДА Вакансии.КоличествоСтавок
		|							ИНАЧЕ -Вакансии.КоличествоСтавок
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Работники
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
		|						ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
		|							И Работники.Должность = Вакансии.Должность
		|							И Работники.ДатаПриема >= Вакансии.Период
		|							И (Вакансии.Регистратор <> &ДокументСсылка)
		|				ГДЕ
		|					Работники.Ссылка = &ДокументСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Работники.ПодразделениеОрганизации,
		|					Работники.Должность,
		|					Работники.НомерСтроки) КАК Вакансии
		|				ПО МаксимальныеПериодыШР.НомерСтроки = Вакансии.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|					СУММА(ВЫБОР
		|							КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <= СтрокиДокумента.ДатаПриема
		|								ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ - ВЫБОР
		|							КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения < СтрокиДокумента.ДатаПриема
		|									И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения <> &ПустаяДата
		|									И ПриемНаРаботуВОрганизациюРаботникиОрганизации.НапомнитьПоЗавершении
		|								ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК СтрокиДокумента
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|						ПО СтрокиДокумента.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
		|							И СтрокиДокумента.НомерСтроки <> ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
		|							И СтрокиДокумента.ПодразделениеОрганизации = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации
		|							И СтрокиДокумента.Должность = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность
		|				ГДЕ
		|					СтрокиДокумента.Ссылка = &ДокументСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СтрокиДокумента.НомерСтроки) КАК РанееЗанятоСтавок
		|				ПО МаксимальныеПериодыШР.НомерСтроки = РанееЗанятоСтавок.НомерСтроки) КАК СвободноСтавокНаДатуПриема
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = СвободноСтавокНаДатуПриема.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ВидСтрокиЗапроса";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ТЧРаботникиОрганизации.Совместитель,
		|	ТЧРаботникиОрганизации.ПринятНаНовоеРабочееМесто,
		|	ТЧРаботникиОрганизации.ДатаСозданияРабочегоМеста,
		|	ТЧРаботникиОрганизации.ВидНовогоРабочегоМеста КАК ВидНовогоРабочегоМеста,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> &Организация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизлицами.ТрудовойДоговор)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеВерныйДоговор,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ВидСтрокиЗапроса";
		
	КонецЕсли;

	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоНачисления(ПроверкаШтатногоРасписания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель2,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта2,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель3,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта3,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель4,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта4,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель5,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта5,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель6,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта6,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд2,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд3,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд4,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд5,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд6,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета
	|ПОМЕСТИТЬ ВТДанныеНачислений
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаНачала,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаОкончания,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать) КАК Действие,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчетаЗачетОтработанногоВремени
	|			ТОГДА """"
	|		ИНАЧЕ ТЧНачисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	ТЧНачисления.ВидРасчетаСпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчетаЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчетаТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ВидРасчетаПроизвольнаяФормулаРасчета КАК ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1 КАК Показатель1,
	|	ТЧНачисления.Валюта1 КАК Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2 КАК Показатель2,
	|	ТЧНачисления.Валюта2 КАК Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2 КАК ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3 КАК Показатель3,
	|	ТЧНачисления.Валюта3 КАК Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3 КАК ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4 КАК Показатель4,
	|	ТЧНачисления.Валюта4 КАК Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4 КАК ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5 КАК Показатель5,
	|	ТЧНачисления.Валюта5 КАК Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5 КАК ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6 КАК Показатель6,
	|	ТЧНачисления.Валюта6 КАК Валюта6,
	|	ТЧНачисления.ТарифныйРазряд6 КАК ТарифныйРазряд6
	|ИЗ
	|	ВТДанныеНачислений КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ПО ТЧНачисления.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ПроцедурыУправленияПерсоналом.СформироватьЗапросПоПлановымНачислениям(Запрос.Выполнить().Выгрузить(), ПроверкаШтатногоРасписания);
КонецФункции

Функция СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ВложенныйЗапрос.КонфликтныйДокумент КАК КонфликтныйДокумент,
	|	ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы КАК ВидЗанятостиПоДругомуМестуРаботы
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеПоРаботникуДоНазначения.Сотрудник.Физлицо КАК Физлицо,
	|			ДанныеПоРаботникуДоНазначения.Регистратор КАК КонфликтныйДокумент,
	|			ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятостиПоДругомуМестуРаботы,
	|			0 КАК НомерСтроки
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					Док.Сотрудник.Физлицо КАК Физлицо,
	|					СостояниеВнутри.Сотрудник КАК Сотрудник,
	|					МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|						ПО (Док.Ссылка = &ДокументСсылка)
	|							И СостояниеВнутри.Сотрудник.Физлицо = Док.Сотрудник.Физлицо
	|							И (СостояниеВнутри.Организация = &ГоловнаяОрганизация)
	|							И СостояниеВнутри.Период <= Док.ДатаПриема
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Док.Сотрудник.Физлицо,
	|					СостояниеВнутри.Сотрудник) КАК СписокДат
	|				ПО ДанныеПоРаботникуДоНазначения.Сотрудник = СписокДат.Сотрудник
	|					И ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|					И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
	|					И (ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.Физлицо,
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|		ГДЕ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК ВложенныйЗапрос
	|		ПО ТЧРаботникиОрганизации.ФизЛицо = ВложенныйЗапрос.Физлицо
	|			И ТЧРаботникиОрганизации.НомерСтроки <> ВложенныйЗапрос.НомерСтроки
	|			И ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости <> ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|ИТОГИ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

	
КонецФункции // СформироватьЗапросПоПрежнимМестам()

// Формирует запрос по таблицам взносов документа
//
// Параметры: 
//  ИмяТабличнойЧасти - "Взносы" или "ВзносыФОТ"
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоВзносам(ИмяТабличнойЧасти)

	Запрос = Новый Запрос;

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧВзносы.Ссылка,
	|	ТЧВзносы.НомерСтроки,
	|	ТЧВзносы.Сотрудник,
	|	ТЧВзносы.Сотрудник.ФизЛицо КАК Физлицо,
	|	ТЧВзносы.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ТЧВзносы.Налог,
	|	ВЫБОР КОГДА ДвиженияЗакрытия.Период ЕСТЬ NULL 
	|	 ТОГДА ЛОЖЬ
	|	 ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Конфликт, 
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении,
	|	ТЧРаботникиОрганизации.ДатаУвольнения
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию."+ИмяТабличнойЧасти+" КАК ТЧВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ПО ТЧВзносы.Сотрудник = ТЧРаботникиОрганизации.Сотрудник И ТЧВзносы.Ссылка = ТЧРаботникиОрганизации.Ссылка
	|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВзносыВФондыРаботниковОрганизаций КАК ДвиженияЗакрытия
	|   ПО ДвиженияЗакрытия.Период = &ДатаПроверки
	|    И ДвиженияЗакрытия.Регистратор <> &ДокументСсылка 
	|    И ДвиженияЗакрытия.Налог = ТЧВзносы.Налог
	|    И ДвиженияЗакрытия.Сотрудник = ТЧВзносы.Сотрудник
	|
	|ГДЕ
	|	ТЧВзносы.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаПроверки", ПроведениеРасчетов.ДатаВводаЕСВ()-1);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзносам()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, в которую принимается работник!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Принимаем только по трудовому договору
	Если ВыборкаПоСтрокамДокумента.НеВерныйДоговор Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "у работника указан вид договора отличный от 'Трудового договора'!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный работник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, в которое принимается работник!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	// Должность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана должность работника!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаПриема
	ЕстьДатаПриема = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема);
	Если НЕ ЕстьДатаПриема Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата приема на работу!", Отказ, Заголовок);
	Иначе
		#Если Клиент Тогда
			Если ВыборкаПоСтрокамДокумента.ДатаПриема > РабочаяДата Тогда
				Сообщить(СтрокаНачалаСообщенияОбОшибке + "дата приема на работу превышает рабочую дату!", СтатусСообщения.Важное);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	// Количество ставок
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых работником ставок!", Отказ, Заголовок);
		
	ИначеЕсли ЕстьДатаПриема И ПроверкаШтатногоРасписания Тогда
		Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в штатном расписании не предусмотрены ставки для приема работника!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// ГрафикРаботы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ (НЕ ЕстьДатаПриема) Тогда
		Возврат;
	КонецЕсли;
	
	// ДатаУвольнения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) и ВыборкаПоСтрокамДокумента.ДатаПриема > ВыборкаПоСтрокамДокумента.ДатаУвольнения Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата приема не может превышать дату окончания работы!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник указан дважды
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "работник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник раньше работал в организации
	Если ВыборкаПоСтрокамДокумента.ОшибкаСотрудникРаботалВОрганизации Тогда
		СтрокаСообщениеОбОшибке = "Работник уже работал в организации, для повторного приема на работу необходимо создать нового сотрудника!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
		
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	Иначе
		// Валюта
		Если ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте") Тогда
			Если СоответствиеВалютныеСпособыРасчета[ВыборкаПоСтрокамДокумента.СпособРасчета] Тогда
				
				//Для СчПоказателей = 1 По 4 Цикл
				//	ТипПоказателя = ВыборкаПоСтрокамДокумента["ВидРасчетаПоказатель" + СчПоказателей + "ТипПоказателя"];
				//	ВозможностьИзменения = ВыборкаПоСтрокамДокумента["ВидРасчетаПоказатель" + СчПоказателей + "ВозможностьИзменения"];
				//	Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный 
				//		И (ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется Или
				//		ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете Или
				//		ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете)
				//		и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Валюта" + СчПоказателей]) Тогда
				//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана валюта начисления!", Отказ, Заголовок);
				//	КонецЕсли;					
					
				//КонецЦикла;
            
			КонецЕсли;
		КонецЕсли;
		
		
		// Соответствие размера "основного" начисления штатному расписанию
		Если ПроверкаШтатногоРасписания и Не ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР И
			НЕ ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", Отказ, Заголовок);
		КонецЕсли;
		
		// Двойные строки
		Если ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
			Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
				СтрокаСообщениеОбОшибке = "работнику не может быть назначено основное начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			Иначе
				СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
			
	КонецЕсли;
		
	// Размер1 оплаты
	Если 	ВыборкаПоСтрокамДокумента.Показатель1 = 0 И 
			ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) И
			НЕ ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда 
			И (ВыборкаПоСтрокамДокумента.Показатель1ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется 
			Или ВыборкаПоСтрокамДокумента.Показатель1ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете) 
			И НЕ (ВыборкаПоСтрокамДокумента.Показатель1ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная 
				ИЛИ	ВыборкаПоСтрокамДокумента.Показатель1ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая
				ИЛИ	ВыборкаПоСтрокамДокумента.Показатель1ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
			Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер 1 начисления!", Отказ, Заголовок);
	ИначеЕсли ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) 
		И ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда
		И ВыборкаПоСтрокамДокумента.ТарифныйРазряд1.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан разряд!", Отказ, Заголовок);
	КонецЕсли;	
	// Размер2-4 оплаты
	Для СчПоказателей = 2 По 6 Цикл
		Если Найти(ВыборкаПоСтрокамДокумента.СпособРасчета, "П"+СчПоказателей) > 0 Тогда
			Если 	ВыборкаПоСтрокамДокумента["Показатель"+СчПоказателей] = 0 И 
				ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) И
				НЕ ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда 
				И (ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется 
				Или ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер  "+СчПоказателей+" начисления!", Отказ, Заголовок);
			ИначеЕсли ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) 
				И ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда
				И ВыборкаПоСтрокамДокумента["ТарифныйРазряд"+СчПоказателей].Пустая() Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан разряд "+СчПоказателей+" !", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
	ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);
	

	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.ДатаНачала = NULL Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "данный работник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет возможность оформления работника на работу согласно указанному в шапке документа реквизиту "ВидЗанятости"
//
Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)
	
	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаСтрокЗапроса.НомерСтроки) +
		""" табл. части ""Работники организации"": ";

		// Проверка сочетаний видов занятости работника в одной организации
		Если ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда

			// Для основного места работы недопустимо наличие внешнего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда
				СтрокаСообщениеОбОшибке = "нельзя принять работника на основное место работы до тех пор,
				|	пока он оформлен внешним совместителем!
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда

			// Для внешнего совместительства недопустимо основное место работы
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
				СтрокаСообщениеОбОшибке = "нельзя оформить работника на внешнее совместительство, 
				|	так как он уже оформлен в организации по основному месту работы! 
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда

			// При оформлении на внутреннее совместительство должно быть основное место работы или внешнее совместительство
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы И ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				СтрокаСообщениеОбОшибке = "нельзя оформить работника на внутреннее совместительство, 
				|	так как он не оформлен в организации или по основному месту работы или по внешнему совместительству!"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;
	
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьВидыЗанятостиРаботникаВОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Взносы" и "ВзносыФОТ" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИмяТабличнойЧасти, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части "+ИмяТабличнойЧасти+": ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
		
	// Налог
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Налог) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан взнос!", Отказ, Заголовок);
	КонецЕсли;
	
	// Налог
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "для сотрудника не определена дата приема на закладке ""Работники""!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры	

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПараметров = "")

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		ВедетсяНаборПерсонала	= СтруктураПараметров.ВедетсяНаборПерсонала;
	Иначе
		ВедетсяНаборПерсонала	= Ложь;
	КонецЕсли;
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приёма
		
		// Движения по регистру "РаботникиОрганизации"
		Движение = Движения.РаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Ресурсы
		Движение.ЗанимаемыхСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ГрафикРаботы;
		
		// Реквизиты
		Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
		Движение.ПринятНаНовоерабочееМесто = ВыборкаПоРаботникиОрганизации.ПринятНаНовоерабочееМесто;
		Если ВыборкаПоРаботникиОрганизации.ПринятНаНовоерабочееМесто Тогда
			Движение.ДатаСозданияРабочегоМеста = ВыборкаПоРаботникиОрганизации.ДатаСозданияРабочегоМеста;
			Движение.ВидНовогоРабочегоМеста = ВыборкаПоРаботникиОрганизации.ВидНовогоРабочегоМеста;
		КонецЕсли;	
		
		// Движения на дату увольнения
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) тогда
			
			Если НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
				
				// Движения по регистру "РаботникиОрганизации"
				Движение = Движения.РаботникиОрганизаций.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				
				// Ресурсы
				Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
				Движение.Должность				= ВыборкаПоРаботникиОрганизации.Должность;
				// Эти поля не заполняются
				//Движение.ЗанимаемыхСтавок
				//Движение.ГрафикРаботы
				
				// Реквизиты
				Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Увольнение;
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
				
			Иначе
				
				// Движения по регистру "НамеченныеСобытияПоПерсоналу"
				Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
				
				// Свойства
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ДатаИзменения				= ВыборкаПоРаботникиОрганизации.ДатаУвольнения;
				Движение.ПланируемоеСобытие			= ?(ВедетсяНаборПерсонала И ВыборкаПоРаботникиОрганизации.ИспытательныйСрок > 0,Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока,Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение);
				
				// Ресурсы
				Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
				Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
				Движение.ЗанимаемыхСтавок			= 0;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			Движение = Движения.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Добавить();
			
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			Если ВыборкаПоРаботникиОрганизации.ДатаУвольнения <> '0001-01-01' и НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
			
			Если ВыборкаПоРаботникиОрганизации.Совместитель <> Справочники.СотрудникиОрганизаций.ПустаяСсылка() Тогда 
				Если ВыборкаПоРаботникиОрганизации.Сотрудник.ОсновноеНазначение <> ВыборкаПоРаботникиОрганизации.Совместитель Тогда
					СотрудникОбъект = ВыборкаПоРаботникиОрганизации.Сотрудник.ПолучитьОбъект();
                	СотрудникОбъект.ОсновноеНазначение = ВыборкаПоРаботникиОрганизации.Совместитель;
					СотрудникОбъект.Записать()
				КонецЕсли
			ИначеЕсли НЕ ВыборкаПоРаботникиОрганизации.Сотрудник.ОсновноеНазначение.Пустая() Тогда
					СотрудникОбъект = ВыборкаПоРаботникиОрганизации.Сотрудник.ПолучитьОбъект();
                	СотрудникОбъект.ОсновноеНазначение = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
					СотрудникОбъект.Записать()
			КонецЕсли	
		ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
			Движение = Движения.ПериодыРаботыРаботниковОрганизацийПоСовместительству.Добавить();
			
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			Если ВыборкаПоРаботникиОрганизации.ДатаУвольнения <> '0001-01-01' и НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВедетсяНаборПерсонала и ВыборкаПоРаботникиОрганизации.ВидЗанятости <> Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			Движение = Движения.СостояниеРаботниковНаИспытательномСроке.Добавить();
			// Свойства
			Движение.Период				= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоРаботникиОрганизации.ФизЛицо;
			// Ресурсы
			Если ВыборкаПоРаботникиОрганизации.ИспытательныйСрок > 0 Тогда
				Движение.Состояние		= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаИспытательныйСрок;
			Иначе
				Движение.Состояние		= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаРаботу;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период						= ВыборкаСтрокЗапроса.ДатаНачала;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение	= ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;

	// Ресурсы
	Движение.Актуальность				= Истина;
	Движение.ВидРасчета					= ВыборкаСтрокЗапроса.ВидРасчета;
	Если ВыборкаСтрокЗапроса.ТребуетВводаТарифногоРазряда Тогда
		Движение.ТарифныйРазряд1		= ВыборкаСтрокЗапроса.ТарифныйРазряд1;
		Движение.ТарифныйРазряд2		= ВыборкаСтрокЗапроса.ТарифныйРазряд2;
		Движение.ТарифныйРазряд3		= ВыборкаСтрокЗапроса.ТарифныйРазряд3;
		Движение.ТарифныйРазряд4		= ВыборкаСтрокЗапроса.ТарифныйРазряд4;
		Движение.ТарифныйРазряд5		= ВыборкаСтрокЗапроса.ТарифныйРазряд5;
		Движение.ТарифныйРазряд6		= ВыборкаСтрокЗапроса.ТарифныйРазряд6;
		
	ИначеЕсли ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
		Движение.ТарифныйРазряд1		= ВыборкаСтрокЗапроса.ТарифныйРазряд1;
		Движение.ТарифныйРазряд2		= ВыборкаСтрокЗапроса.ТарифныйРазряд2;
		Движение.ТарифныйРазряд3		= ВыборкаСтрокЗапроса.ТарифныйРазряд3;
		Движение.ТарифныйРазряд4		= ВыборкаСтрокЗапроса.ТарифныйРазряд4;
		Движение.ТарифныйРазряд5		= ВыборкаСтрокЗапроса.ТарифныйРазряд5;
		Движение.ТарифныйРазряд6		= ВыборкаСтрокЗапроса.ТарифныйРазряд6;
		Движение.Показатель1			= ВыборкаСтрокЗапроса.Показатель1;
		Движение.Показатель2			= ВыборкаСтрокЗапроса.Показатель2;
		Движение.Показатель3			= ВыборкаСтрокЗапроса.Показатель3;
		Движение.Показатель4			= ВыборкаСтрокЗапроса.Показатель4;
		Движение.Показатель5			= ВыборкаСтрокЗапроса.Показатель5;
		Движение.Показатель6			= ВыборкаСтрокЗапроса.Показатель6;
		Движение.Валюта1				= ВыборкаСтрокЗапроса.Валюта1;
		Движение.Валюта2				= ВыборкаСтрокЗапроса.Валюта2;
		Движение.Валюта3				= ВыборкаСтрокЗапроса.Валюта3;
		Движение.Валюта4				= ВыборкаСтрокЗапроса.Валюта4;
		Движение.Валюта5				= ВыборкаСтрокЗапроса.Валюта5;
		Движение.Валюта6				= ВыборкаСтрокЗапроса.Валюта6;
		
	Иначе
		Движение.Показатель1			= ВыборкаСтрокЗапроса.Показатель1;
		Движение.Показатель2			= ВыборкаСтрокЗапроса.Показатель2;
		Движение.Показатель3			= ВыборкаСтрокЗапроса.Показатель3;
		Движение.Показатель4			= ВыборкаСтрокЗапроса.Показатель4;
		Движение.Показатель5			= ВыборкаСтрокЗапроса.Показатель5;
		Движение.Показатель6			= ВыборкаСтрокЗапроса.Показатель6;
		Движение.Валюта1				= ВыборкаСтрокЗапроса.Валюта1;
		Движение.Валюта2				= ВыборкаСтрокЗапроса.Валюта2;
		Движение.Валюта3				= ВыборкаСтрокЗапроса.Валюта3;
		Движение.Валюта4				= ВыборкаСтрокЗапроса.Валюта4;
		Движение.Валюта5				= ВыборкаСтрокЗапроса.Валюта5;
		Движение.Валюта6				= ВыборкаСтрокЗапроса.Валюта6;
		
	КонецЕсли;
	
	// Движения на дату увольнения
	Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.датаОкончания) И НЕ ВыборкаСтрокЗапроса.НапомнитьПоЗавершении Тогда
		
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
		// Свойства
		Движение.Период						= ВыборкаСтрокЗапроса.ДатаОкончания;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
			Движение.ВидРасчетаИзмерение	= ВыборкаСтрокЗапроса.ВидРасчета;
		КонецЕсли;

		// Ресурсы
		Движение.Актуальность				= Ложь;
		Движение.ВидРасчета					= ВыборкаСтрокЗапроса.ВидРасчета;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНачислениям()

Процедура ДобавитьСтрокуВДвиженияПоВзносам(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	Если ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ВыборкаСтрокЗапроса.Налог.Актуальность Тогда
		
		//Это старые взносы
		Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период                     = НачалоМесяца(ВыборкаСтрокЗапроса.ДатаПриема);
		
		// Измерения
		Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Налог						= ВыборкаСтрокЗапроса.Налог;

		// Ресурсы
	 	Движение.Актуальность				= Истина;

		// Движения на дату увольнения или на конец учета взносов
		Если НЕ ПроведениеРасчетов.ИспользуетсяЕСВ(ВыборкаСтрокЗапроса.ДатаУвольнения) И ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ДатаУвольнения) И НЕ ВыборкаСтрокЗапроса.НапомнитьПоЗавершении Тогда
			Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();
			
			// Свойства
			Движение.Период                     = КонецМесяца(ВыборкаСтрокЗапроса.ДатаУвольнения) + 1;
			
			// Измерения
			Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
			Движение.Налог				        = ВыборкаСтрокЗапроса.Налог;

			// Ресурсы
	 		Движение.Актуальность				= Ложь;
			
		ИначеЕсли ПроведениеРасчетов.ИспользуетсяЕСВ() И НЕ ВыборкаСтрокЗапроса.Конфликт Тогда
			
			//Взносы прекращаем если на рабочую дату уже используется ЕСВ
			
			Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();
			
			// Свойства
			Движение.Период                     = КонецДня(Дата(2010,12,31));
			
			// Измерения
			Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
			Движение.Налог				        = ВыборкаСтрокЗапроса.Налог;

			// Ресурсы
	 		Движение.Актуальность				= Ложь;

			
		КонецЕсли;
		
	ИначеЕсли ПроведениеРасчетов.ИспользуетсяЕСВ(ВыборкаСтрокЗапроса.ДатаПриема) Тогда
		
		//Это ЕСВ и принят на работу после перехода на ЕСВ
		Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период                     = НачалоМесяца(ВыборкаСтрокЗапроса.ДатаПриема);
		
		// Измерения
		Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Налог						= ВыборкаСтрокЗапроса.Налог;

		// Ресурсы
	 	Движение.Актуальность				= Истина;

		// Движения на дату увольнения
		Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ДатаУвольнения) И НЕ ВыборкаСтрокЗапроса.НапомнитьПоЗавершении Тогда
			Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();
			
			// Свойства
			Движение.Период                     = КонецМесяца(ВыборкаСтрокЗапроса.ДатаУвольнения) + 1;
			
			// Измерения
			Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
			Движение.Налог				        = ВыборкаСтрокЗапроса.Налог;

			// Ресурсы
	 		Движение.Актуальность				= Ложь;
			
		КонецЕсли;
		
	Иначе	
		
		Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ДатаУвольнения) И НЕ ПроведениеРасчетов.ИспользуетсяЕСВ(ВыборкаСтрокЗапроса.ДатаУвольнения) Тогда
			//Уволен до ввода ЕСВ
			Возврат;
		КонецЕсли;	
		
		//Это ЕСВ и принят на работу до перехода на ЕСВ, ЕСВ назначим с 01.01.2011
		Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период                     = ПроведениеРасчетов.ДатаВводаЕСВ();
		
		// Измерения
		Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Налог						= ВыборкаСтрокЗапроса.Налог;

		// Ресурсы
	 	Движение.Актуальность				= Истина;

		// Движения на дату увольнения
		Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ДатаУвольнения) И НЕ ВыборкаСтрокЗапроса.НапомнитьПоЗавершении Тогда
			Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();
			
			// Свойства
			Движение.Период                     = КонецМесяца(ВыборкаСтрокЗапроса.ДатаУвольнения) + 1;
			
			// Измерения
			Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
			Движение.Налог				        = ВыборкаСтрокЗапроса.Налог;

			// Ресурсы
	 		Движение.Актуальность				= Ложь;
			
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приема
		
		// ЗанятыеШтатныеЕдиницыОрганизаций";
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность						= ВыборкаПоРаботникиОрганизации.Должность;
		
		// Ресурсы
		Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 
		
		// Движения на дату увольнения
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) И НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
			// ЗанятыеШтатныеЕдиницыОрганизаций";
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
			
			// Ресурсы
			Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(Режим).Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		// данные учетной политики
		УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		ПроверкаШтатногоРасписания				= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПроверкаШтатногоРасписания");
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим соответствие для проверок
			СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
			
			// выполним выборку по табличной части документа
			ВыборкаСтрокЗапроса = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания).Выбрать();
			
			ВедетсяНаборПерсонала = Константы.РежимНабораПерсонала.Получить() = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
			
			// для проверки числа ставок
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл

				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок,  ПроверкаШтатногоРасписания);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Новый Структура("ВедетсяНаборПерсонала", ВедетсяНаборПерсонала));
				КонецЕсли;

			КонецЦикла;
			
			// проверим виды занятости работника в организации
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента.Выбрать(), Отказ, Заголовок);
			КонецЦикла;
			
			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления(ПроверкаШтатногоРасписания).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
				
			КонецЦикла;
			
			// выполним выборку по табличной части взносы
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоВзносам("Взносы").Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, "Взносы", Отказ, Заголовок);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоВзносам(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;			
			КонецЦикла;
			
			// выполним выборку по табличной части взносыФОТ
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоВзносам("ВзносыФОТ").Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, "Взносы ФОТ", Отказ, Заголовок);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоВзносам(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
			УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
			
			Если Организация.Пустая() Тогда
				Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяОрганизация")
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Организация",			Организация);
			Запрос.УстановитьПараметр("Регистратор",			Основание);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриемНаРаботуРаботники.Сотрудник,
			|	ПриемНаРаботуРаботники.Сотрудник.Физлицо КАК ФизЛицо,
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации,
			|	ПриемНаРаботуРаботники.Должность КАК Должность,
			|	ПриемНаРаботуРаботники.ЗанимаемыхСтавок,
			|	ПриемНаРаботуРаботники.ДатаПриема,
			|	ВЫБОР
			|		КОГДА ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПриемНаРаботуРаботники.НапомнитьПоЗавершении
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НапомнитьПоЗавершении,
			|	ВЫБОР
			|		КОГДА ПриемНаРаботуРаботники.ИспытательныйСрок = ЗНАЧЕНИЕ(Перечисление.ИспытательныйСрок.СИспытательнымСроком)
			|			ТОГДА РАЗНОСТЬДАТ(ПриемНаРаботуРаботники.ДатаПриема, ПриемНаРаботуРаботники.ДатаУвольнения, МЕСЯЦ)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ИспытательныйСрок,
			|	ПриемНаРаботуРаботники.ДатаУвольнения,
			|	ПриемНаРаботуРаботники.ГрафикРаботы
			|ИЗ
			|	Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|		ПО (СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация)
			|			И ПриемНаРаботуРаботники.Подразделение = СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
			|ГДЕ
			|	ПриемНаРаботуРаботники.Ссылка = &Регистратор";
			
			РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
			
			Для Каждого РаботникСтрока Из РаботникиОрганизации Цикл
				Если НЕ РаботникСтрока.Сотрудник.ОсновноеНазначение.Пустая() Тогда
					Продолжить;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(РаботникСтрока.Сотрудник.ГруппаВзносов) Тогда
					ГруппаВзносов = РаботникСтрока.Сотрудник.ГруппаВзносов;
				Иначе
					ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ОсновнойСостав;
				КонецЕсли;
				
				Выборка = ПроведениеРасчетов.НалогиПоГруппеВзносов(ГруппаВзносов,РаботникСтрока.ДатаПриема);
				Пока Выборка.Следующий() Цикл
					Если Выборка.СпосовРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
						Строка = ВзносыФОТ.Добавить();
						Строка.Сотрудник	= РаботникСтрока.Сотрудник;
						Строка.Налог		= Выборка.Налог;
					Иначе	
						Строка = Взносы.Добавить();
						Строка.Сотрудник	= РаботникСтрока.Сотрудник;
						Строка.Налог		= Выборка.Налог;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ПроведениеРасчетов.ИспользуетсяЕСВ(РаботникСтрока.ДатаПриема) И ПроведениеРасчетов.ИспользуетсяЕСВ() Тогда
					//Если дата приема раньше ввода ЕСВ, а на рабочую дату ЕСВ уже используется
					//тогда добавим еще и новые взносы
					Выборка = ПроведениеРасчетов.НалогиПоГруппеВзносов(ГруппаВзносов);
					Пока Выборка.Следующий() Цикл
						Если Выборка.СпосовРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
							Строка = ВзносыФОТ.Добавить();
							Строка.Сотрудник	= РаботникСтрока.Сотрудник;
							Строка.Налог		= Выборка.Налог;
						Иначе	
							Строка = Взносы.Добавить();
							Строка.Сотрудник	= РаботникСтрока.Сотрудник;
							Строка.Налог		= Выборка.Налог;
						КонецЕсли;
					КонецЦикла;
                КонецЕсли;
			КонецЦикла;	
			
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("Структура") Тогда
		
		Если Основание.Свойство("Организация") Тогда
			Организация = Основание.Организация;
		КонецЕсли;
		
		Если Основание.Свойство("Документ") Тогда
			// Заполним реквизиты из стандартного набора.
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание.Документ);
		КонецЕсли;
		
		Если Основание.Свойство("РаботникиОрганизации") Тогда
			РаботникиОрганизации.Загрузить(Основание.РаботникиОрганизации.Выгрузить());
		КонецЕсли;	
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Основание.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Основание.ОбособленноеПодразделение.Пустая() Тогда
			Организация = Основание.ОбособленноеПодразделение;
		Иначе
			Организация = Основание.Организация;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",	Основание);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизаций.Организация
		|		ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|	КОНЕЦ КАК Организация,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
		|	СотрудникиОрганизаций.Должность,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации,
		|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
		|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
		|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
		|	СотрудникиОрганизаций.ИспытательныйСрок,
		|	СотрудникиОрганизаций.ГрафикРаботы,
		|	СотрудникиОрганизаций.ВидРасчета КАК ВидРасчета,
		|	СотрудникиОрганизаций.ТарифнаяСтавка КАК Показатель1,
		|	NULL КАК Показатель2,
		|	NULL КАК Показатель3,
		|	NULL КАК Показатель4,
		|	СотрудникиОрганизаций.ВалютаТарифнойСтавки КАК Валюта1,
		|	NULL КАК Валюта2,
		|	NULL КАК Валюта3,
		|	NULL КАК Валюта4,
		|	СотрудникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд1,
		|	NULL КАК ТарифныйРазряд2,
		|	NULL КАК ТарифныйРазряд3,
		|	NULL КАК ТарифныйРазряд4
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизаций.Организация
		|		ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|	КОНЕЦ,
		|	СотрудникиОрганизаций.Ссылка,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Должность,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации,
		|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
		|	СотрудникиОрганизаций.ДатаНачала,
		|	СотрудникиОрганизаций.ДатаОкончания,
		|	СотрудникиОрганизаций.ИспытательныйСрок,
		|	СотрудникиОрганизаций.ГрафикРаботы,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Организация
		|		ИНАЧЕ СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ОбособленноеПодразделение
		|	КОНЕЦ,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Физлицо,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Должность,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ПодразделениеОрганизации,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ЗанимаемыхСтавок,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаНачала,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаОкончания,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ИспытательныйСрок,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ГрафикРаботы,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Надбавка,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель1,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель2,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель3,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель4,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта1,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта2,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта3,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта4,
		|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд1,
		|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд2,
		|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд3,
		|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд4
		|ИЗ
		|	Справочник.СотрудникиОрганизаций.ПерсональныеНадбавки КАК СотрудникиОрганизацийПерсональныеНадбавки
		|ГДЕ
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка = &Ссылка
		|	И СотрудникиОрганизацийПерсональныеНадбавки.Надбавка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ 
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизаций.Организация
		|		ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|	КОНЕЦ,
		|	СотрудникиОрганизаций.Ссылка,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Должность,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации,
		|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
		|	СотрудникиОрганизаций.ДатаНачала,
		|	СотрудникиОрганизаций.ДатаОкончания,
		|	СотрудникиОрганизаций.ИспытательныйСрок,
		|	СотрудникиОрганизаций.ГрафикРаботы,
		|	СхемыМотивацииРаботников.ВидРасчета,
		|	СхемыМотивацииРаботников.Показатель1,
		|	СхемыМотивацииРаботников.Показатель2,
		|	СхемыМотивацииРаботников.Показатель3,
		|	СхемыМотивацииРаботников.Показатель4,
		|	СхемыМотивацииРаботников.Валюта1,
		|	СхемыМотивацииРаботников.Валюта2,
		|	СхемыМотивацииРаботников.Валюта3,
		|	СхемыМотивацииРаботников.Валюта4,
		|	СхемыМотивацииРаботников.ТарифныйРазряд1,
		|	СхемыМотивацииРаботников.ТарифныйРазряд2,
		|	СхемыМотивацииРаботников.ТарифныйРазряд3,
		|	СхемыМотивацииРаботников.ТарифныйРазряд4
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|		ПО (СхемыМотивацииРаботников.Организация = ВЫБОР
		|				КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА СотрудникиОрганизаций.Организация
		|				ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА СхемыМотивацииРаботников.Должность <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
		|						И СхемыМотивацииРаботников.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|					ТОГДА СхемыМотивацииРаботников.Должность = СотрудникиОрганизаций.Должность
		|							И СхемыМотивацииРаботников.Подразделение = СотрудникиОрганизаций.ПодразделениеОрганизации
		|				ИНАЧЕ СхемыМотивацииРаботников.Должность = СотрудникиОрганизаций.Должность
		|			КОНЕЦ)
		|ГДЕ
		|	СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
		|	И СхемыМотивацииРаботников.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|	И СотрудникиОрганизаций.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ВидРасчета";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация");
			СтрокаРаботник = РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаботник, Выборка);
			
			Если НЕ ЗначениеЗаполнено(СтрокаРаботник.ЗанимаемыхСтавок) Тогда
				СтрокаРаботник.ЗанимаемыхСтавок  = 1;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРаботник.ГрафикРаботы) Тогда
				СтрокаРаботник.ГрафикРаботы = ПроцедурыУправленияПерсоналом.ПолучитьГрафикРаботы(Ответственный);
			КонецЕсли;

			
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.ВидРасчета) Тогда
					ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), Выборка);
				КонецЕсли;	
			КонецЦикла;
			
			Если Выборка.Сотрудник.ОсновноеНазначение.Пустая() Тогда
							
				Если ЗначениеЗаполнено(Выборка.Сотрудник.ГруппаВзносов) Тогда
					ГруппаВзносов = Выборка.Сотрудник.ГруппаВзносов;
				Иначе
					ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ОсновнойСостав;
				КонецЕсли;
				
				ВыборкаВзносы = ПроведениеРасчетов.НалогиПоГруппеВзносов(ГруппаВзносов, Выборка.ДатаПриема);
				Пока ВыборкаВзносы.Следующий() Цикл
					Если ВыборкаВзносы.СпосовРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
						Строка = ВзносыФОТ.Добавить();
						Строка.Сотрудник	= Выборка.Сотрудник;
						Строка.Налог		= ВыборкаВзносы.Налог;
					Иначе	
						Строка = Взносы.Добавить();
						Строка.Сотрудник	= Выборка.Сотрудник;
						Строка.Налог		= ВыборкаВзносы.Налог;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Выборка.ДатаПриема) И НЕ ПроведениеРасчетов.ИспользуетсяЕСВ(Выборка.ДатаПриема) И ПроведениеРасчетов.ИспользуетсяЕСВ() Тогда
					//Если дата приема раньше ввода ЕСВ, а на рабочую дату ЕСВ уже используется
					//тогда добавим еще и новые взносы
 					ВыборкаВзносы = ПроведениеРасчетов.НалогиПоГруппеВзносов(ГруппаВзносов);
					Пока ВыборкаВзносы.Следующий() Цикл
						Если ВыборкаВзносы.СпосовРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
							Строка = ВзносыФОТ.Добавить();
							Строка.Сотрудник	= Выборка.Сотрудник;
							Строка.Налог		= ВыборкаВзносы.Налог;
						Иначе	
							Строка = Взносы.Добавить();
							Строка.Сотрудник	= Выборка.Сотрудник;
							Строка.Налог		= ВыборкаВзносы.Налог;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Организация.Префикс, Дата);
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;
	
	Движения.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.РежимЗаписиРегистратора = РежимЗаписи;
	Движения.ПериодыРаботыРаботниковОрганизацийПоСовместительству.РежимЗаписиРегистратора = РежимЗаписи;

КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Дата, Ссылка);
	
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

