////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Признак перерасчета сумм НДС с учетом погрешностей округления
Перем мПерерасчетПроизведен;

Перем мПечатнаяФормаПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мСписокВыбораТипПричиныНевыдачиПокупателю;
Перем мСписокВыбораСпецРежимНалогообложения;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	Если  ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоНоменклатуреИЦенамКонтрагентов;
	Иначе		
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	// Очистим ТЧ Возвратная тара если договор внешнеэкономический
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	// Очистим документ-основание при необходимости
	Если  ДокументОснование <> Неопределено
		И ДокументОснование.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено
		И ДокументОснование.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
		
			ДокументОснование = Неопределено;
		
	КонецЕсли;
	
	Если  Сделка <> Неопределено Тогда
		
		Если Сделка.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
		     Сделка = Неопределено;
		КонецЕсли;
		 
	КонецЕсли;
	
	// Очистим реквизит НалоговаяНакладная при необходимости
	Если НалоговаяНакладная.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
		
		НалоговаяНакладная = Неопределено;
		
	КонецЕсли;
	
	СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	
	// перезаполним статьи книги продаж
	Для каждого СтрокаТЧ из Товары Цикл
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "Товары");		
	КонецЦикла;
	Для каждого СтрокаТЧ из Услуги Цикл
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "Услуги");		
	КонецЦикла;
	Для каждого СтрокаТЧ из ОС Цикл
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "ОС");		
	КонецЦикла;	
	Для каждого СтрокаТЧ из НематериальныеАктивы Цикл
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "НематериальныеАктивы");		
	КонецЦикла;	

	ЗаполнитьУсловиеПродажи();
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.ФормаРасчетов) Тогда
	    ФормаРасчетов = ДоговорКонтрагента.ФормаРасчетов;  	
		Если Дата >= '2014-03-01' И Дата < '2015-01-01' Тогда
			Если ФормаРасчетов = "Оплата з поточного рахунка" Тогда
				ФормаРасчетов = "Оплата з поточного рахунку";
			КонецЕсли;
		ИначеЕсли Дата >= '2015-01-01' Тогда
			Если ФормаРасчетов = "Оплата з поточного рахунку" Тогда
				ФормаРасчетов = "Оплата з поточного рахунка";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		ФормаРасчетов = "Бартер";  	
	Иначе		
		ФормаРасчетов = "Оплата з поточного рахунку";                                                 
		Если глЗначениеПеременной("ДатаВступленияВСилуПриказа1379") <= Дата И Дата < '2014-03-01' ИЛИ Дата >= '2015-01-01' Тогда
			ФормаРасчетов = "Оплата з поточного рахунка";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВидДоговора();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииДоговора()


// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(НалоговаяНакладная) Тогда
		ТекстПредупреждения = "Не выбрана  налоговая наладная. Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТабличнаяЧасть.Очистить();
		Иначе
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		СкопироватьТовары();
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		СкопироватьВозвратнуюТару();
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СкопироватьУслуги();
	ИначеЕсли ТабличнаяЧасть = ОС Тогда
		СкопироватьОС();
	ИначеЕсли ТабличнаяЧасть = НематериальныеАктивы Тогда
		СкопироватьНематериальныеАктивы();
	КонецЕсли;
                  
КонецПроцедуры// ЗаполнитьТабличнуюЧасть()


// заполняет по остаткам регистра НДСПродаж
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамРегистраНДСПРодаж(ТабличнаяЧасть)
	
	Если ЭтоНовый() Тогда
		
		Предупреждение("Заполнить документ можно только после его записи");
		Возврат;
		
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Очистить табличную часть перед заполнением?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТабличнаяЧасть.Очистить();
		КонецЕсли; 
		
	КонецЕсли;
	
	ЗаполнитьПоОстаткам(ТабличнаяЧасть);
	
КонецПроцедуры


// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходПоЦенамНоменклатуры", "По ценам номенклатуры");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()


// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()


// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;
	ЕстьСерия = Ложь;
	ПодбиратьУслуги         = Ложь;

	Если ТабличнаяЧасть = Товары Тогда

		Команда         	= "ПодборВТабличнуюЧастьТовары";
		Валюта          	= ВалютаДокумента;
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ИмяТабличнойЧасти 	= "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		Валюта            = ВалютаДокумента;
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда           = "ПодборВТабличнуюЧастьУслуги";
		Валюта            = ВалютаДокумента;
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Услуги";
		ПодбиратьУслуги         = Истина;
	
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"         , ПодбиратьУслуги);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           ,Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные.Документы["Приложение2КНалоговойНакладной"]);

КонецПроцедуры // ДействиеПодбор()


// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	
	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
			
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");


		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

			
		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
			
			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары");
			
			ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
 
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара");


		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги");
			
			ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти, Истина);

		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()


// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти)

	// СтавкаНДС прироритетно определеятся видом операции документа
	СписокДопустимыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС();	
	
	Если СписокДопустимыхСтавокНДС.Количество() > 1 Тогда
		Если СписокДопустимыхСтавокНДС.НайтиПоЗначению(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) = Неопределено Тогда 
			// в карточке товара указана недопустимая в данном контексте ставка НДС
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СписокДопустимыхСтавокНДС[0].Значение;
	КонецЕсли;

КонецПроцедуры


Процедура РассчитатьСуммыИзменений(СтрокаТЧ, ИмяТабЧасти)
	// для совпадения сумм изменений с исходными суммами при вовратах
	// расчет производим пропорционально суммам
	
	Коэф = 0;
	Если НЕ СтрокаТЧ.ИзменениеКоличества = 0 Тогда
		
		Если ИмяТабЧасти = "Товары" Тогда
			ИсходноеКоличество =  СтрокаТЧ.Количество;
		ИначеЕсли ИмяТабЧасти = "ОС"
			  ИЛИ ИмяТабЧасти = "НематериальныеАктивы" Тогда
			ИсходноеКоличество = 1;
		Иначе 
		    ИсходноеКоличество = СтрокаТЧ.Количество;
		КонецЕсли;
		
		Если ИсходноеКоличество = 0 Тогда
			ИсходноеКоличество = 1;
		КонецЕсли;
			 
		Коэф =  СтрокаТЧ.ИзменениеКоличества/ИсходноеКоличество;
		
	ИначеЕсли НЕ СтрокаТЧ.ИзменениеЦены = 0 Тогда
		
		Если ИмяТабЧасти = "ОС"
		 ИЛИ ИмяТабЧасти = "НематериальныеАктивы" Тогда
			ИсходнаяЦена = СтрокаТЧ.Сумма;
		Иначе 
		    ИсходнаяЦена = СтрокаТЧ.Цена;
		КонецЕсли;
		
		Если ИсходнаяЦена = 0 Тогда
			ИсходнаяЦена = 1;
		КонецЕсли;

		Коэф =  СтрокаТЧ.ИзменениеЦены/ИсходнаяЦена;
		
	КонецЕсли;
	
	СтрокаТЧ.ИзменениеСуммы		= СтрокаТЧ.Сумма * Коэф;
	
	Если  НЕ ИмяТабЧасти = "ВозвратнаяТара" Тогда
		СтрокаТЧ.ИзменениеСуммыНДС	= СтрокаТЧ.СуммаНДС * Коэф;
	КонецЕсли;

КонецПроцедуры


// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
	ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара, ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ДействиеЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельВозвратнаяТара1.Кнопки.ДействиеЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НематериальныеАктивы, ЭлементыФормы.КоманднаяПанельНематериальныеАктивы.Кнопки.ДействиеЗаполнить);
		
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ


// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	// Колонка СуммаНДС не доступна для редактировани, если включен АвторасчетНДС
	ЭлементыФормы.Товары.Колонки.ИзменениеСуммыНДС.ТолькоПросмотр = АвторасчетНДС;
	ЭлементыФормы.Услуги.Колонки.ИзменениеСуммыНДС.ТолькоПросмотр = АвторасчетНДС;
	ЭлементыФормы.ОС.Колонки.ИзменениеСуммыНДС.ТолькоПросмотр 	  = АвторасчетНДС;
	ЭлементыФормы.НематериальныеАктивы.Колонки.ИзменениеСуммыНДС.ТолькоПросмотр = АвторасчетНДС;
	
	ЭлементыФормы.Товары.Колонки.ДатаКорректировки.Видимость = Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа1307");
	ЭлементыФормы.Услуги.Колонки.ДатаКорректировки.Видимость = Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа1307");
	ЭлементыФормы.ОС.Колонки.ДатаКорректировки.Видимость 	 = Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа1307");
	ЭлементыФормы.НематериальныеАктивы.Колонки.ДатаКорректировки.Видимость    = Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа1307");

	ВидимостьВНДТовары = Истина;
	ВидимостьВНДУслуги = Истина;
	Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат Тогда
		
		ЭлементыФормы.Контрагент.Видимость 						= Ложь;
		ЭлементыФормы.Контрагент.Доступность 					= Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость 				= Ложь;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДоговор.Видимость 					= Ложь;
		
		ЭлементыФормы.ДокументОснование.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 		= Ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость = Ложь;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность = Истина;
		
		ВидимостьВНДТовары = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		
		ЭлементыФормы.Контрагент.Видимость 						= Ложь;
		ЭлементыФормы.Контрагент.Доступность 					= Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость 				= Ложь;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДоговор.Видимость 					= Ложь;
		
		ЭлементыФормы.ДокументОснование.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 		= Ложь;
		
		ЭлементыФормы.Сделка.Видимость 							= Ложь;
		ЭлементыФормы.НадписьСделка.Видимость 					= Ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость = Истина;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		
		ЭлементыФормы.Контрагент.Видимость 						= Истина;
		ЭлементыФормы.Контрагент.Доступность 					= Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость 				= Истина;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДоговор.Видимость 					= Ложь;

		ЭлементыФормы.ДокументОснование.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 		= Ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость = Ложь;

		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность 	= Ложь;
		
		ВидимостьВНДТовары = Ложь;
		ВидимостьВНДУслуги = Ложь;		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		ЭлементыФормы.Контрагент.Видимость 					= Истина;
		ЭлементыФормы.Контрагент.Доступность				= Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость 			= Истина;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;
		ЭлементыФормы.НадписьДоговор.Видимость 				= Истина;
		
		ЭлементыФормы.ДокументОснование.Видимость 			= Истина;
		ЭлементыФормы.НадписьДокументОснование.Видимость 	= Истина;			
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость = Ложь;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		
		ЭлементыФормы.Контрагент.Видимость 					= Ложь;
		ЭлементыФормы.Контрагент.Доступность 				= Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость 			= Ложь;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Ложь;
		ЭлементыФормы.НадписьДоговор.Видимость 				= Ложь;
		
		ЭлементыФормы.ДокументОснование.Видимость 			= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 	= Ложь;	
		
		ЭлементыФормы.Сделка.Видимость 							= Ложь;
		ЭлементыФормы.НадписьСделка.Видимость 					= Ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость  = Истина;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность = Ложь;
		
	Иначе
		
		ЭлементыФормы.Контрагент.Видимость 					= Истина;
		ЭлементыФормы.Контрагент.Доступность				= Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость 			= Истина;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;
		ЭлементыФормы.НадписьДоговор.Видимость 				= Истина;
		
		ЭлементыФормы.ДокументОснование.Видимость 			= Истина;
		ЭлементыФормы.НадписьДокументОснование.Видимость 	= Истина;			
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость = Истина;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность = Истина;
		
	КонецЕсли;	
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Товары.Колонки.НалоговоеНазначение, ВидимостьВНДТовары);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Услуги.Колонки.НалоговоеНазначение, ВидимостьВНДУслуги);
	
	ЭлементыФормы.Товары.Колонки.СчетУчетаНДС.Видимость = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Товары);
	ЭлементыФормы.Услуги.Колонки.СчетУчетаНДС.Видимость = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Услуги);
	ЭлементыФормы.ОС.Колонки.СчетУчетаНДС.Видимость 	= ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(ОС);
	ЭлементыФормы.НематериальныеАктивы.Колонки.СчетУчетаНДС.Видимость 	= ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(НематериальныеАктивы);
	
	// Тары по внешнеэкономическому договору нет.
	Внешнеэкономический = (ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = НЕ Внешнеэкономический;
	
	РаботаСДиалогами.ПриВыбореСчета(СчетНДС,ЭлементыФормы.СубконтоКт1, ЭлементыФормы.НадписьСубконтоКт1,
	                       ЭлементыФормы.СубконтоКт2, ЭлементыФормы.НадписьСубконтоКт2,
	                       ЭлементыФормы.СубконтоКт3, ЭлементыФормы.НадписьСубконтоКт3);
						   
	ЭлементыФормы.УточняемыйПериод.Видимость = ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.НадписьУточняемыйПериод.Видимость = ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.НомерДляРеестра.Видимость 		= ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.НадписьНомерДляРеестра.Видимость 	= ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.ДатаДляРеестра.Видимость 			= ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.НадписьДатаДляРеестра.Видимость 	= ВключаетсяВУточняющийРасчет;
	
	ЭлементыФормы.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = НЕ (ТипПричиныНевыдачиПокупателю = 0) И Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа10");
	
	Если ДатаПолученияПокупателемНеРавнаДатеДокумента Тогда
		ЭлементыФормы.ДатаПолученияПокупателемНеРавнаДатеДокумента.Заголовок = Нстр("ru = 'Дата получения покупателем не равна дате документа. Документ получен:'; uk = 'Дата отримання покупцем не дорівнює даті документа. Документ отриман:'");
		ЭлементыФормы.ДатаПолученияПокупателем.Видимость = Истина;
	Иначе	
		ЭлементыФормы.ДатаПолученияПокупателемНеРавнаДатеДокумента.Заголовок = Нстр("ru = 'Дата получения покупателем не равна дате документа. '; uk = 'Дата отримання покупцем не дорівнює даті документа. '");
		ЭлементыФормы.ДатаПолученияПокупателем.Видимость = Ложь;	
	КонецЕсли;
	
	ЭлементыФормы.Товары.Колонки.НомерГТД.Видимость               = (Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа10"));
	ЭлементыФормы.ОС.Колонки.НомерГТД.Видимость                   = (Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа10"));
	ЭлементыФормы.НематериальныеАктивы.Колонки.НомерГТД.Видимость = (Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа10"));

	ЭлементыФормы.ЭлектронныйДокумент.Доступность = (Дата < '2015-01-01');
	Если Дата >= '2015-01-01' Тогда
		ЭлементыФормы.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = Ложь;
	КонецЕсли;
	
	ВидимостьРеквизитаДатаРегистрацииВЕРНН();
	
	СводнаяНаПревышениеБазыНадЦенойПоставки = ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки;
	
	ЭлементыФормы.ТипПричиныНевыдачиПокупателю.Доступность = НЕ СводнаяНаПревышениеБазыНадЦенойПоставки;
	
	Если СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		ЭлементыФормы.НадписьСРасшифровкойСчетаДт.Видимость 	= Истина;
		ЭлементыФормы.НадписьСчетДт.Видимость					= Истина;
		ЭлементыФормы.СчетДт.Видимость							= Истина;
		УстановитьВидимостьСубконто(СчетДт,"СубконтоДт");		
	Иначе	
		ЭлементыФормы.НадписьСРасшифровкойСчетаДт.Видимость = Ложь;
		ЭлементыФормы.НадписьСчетДт.Видимость				= Ложь;
		ЭлементыФормы.НадписьСубконтоДт1.Видимость			= Ложь;
		ЭлементыФормы.НадписьСубконтоДт2.Видимость			= Ложь;
		ЭлементыФормы.НадписьСубконтоДт3.Видимость			= Ложь;
		ЭлементыФормы.СчетДт.Видимость						= Ложь;
		ЭлементыФормы.СубконтоДт1.Видимость					= Ложь;
		ЭлементыФормы.СубконтоДт2.Видимость					= Ложь;
		ЭлементыФормы.СубконтоДт3.Видимость					= Ложь;
	КонецЕсли; 
	
	ЭлементыФормы.Товары.Колонки.КодСХДеятельности.Видимость = (СпецРежимНалогообложения = 2);
	
КонецПроцедуры // УстановитьВидимость()


// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

  	// Покажем цветом, что суммы еще могут изменится - пересчитаться при проведении/записи
	Если (АвторасчетНДС) И (НЕ мПерерасчетПроизведен) Тогда
		Если Модифицированность Тогда
			ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки;
		Иначе
			ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли; 
	Иначе	
		ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли; 

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(Товары.Итог("ИзменениеСуммы")   +Услуги.Итог("ИзменениеСуммы")   +ОС.Итог("ИзменениеСуммы")   +НематериальныеАктивы.Итог("ИзменениеСуммы"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("ИзменениеСуммыНДС")+Услуги.Итог("ИзменениеСуммыНДС")+ОС.Итог("ИзменениеСуммыНДС")+НематериальныеАктивы.Итог("ИзменениеСуммыНДС"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если АвторасчетНДС Тогда
		ВременнаяСтрока = ВременнаяСтрока + НСтр("ru=' Автоматический расчет НДС.';uk=' Автоматичний розрахунок ПДВ.'");
	КонецЕсли;
	
	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего изменений(<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего изменений(" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "Изменение НДС(в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "Изменение НДС(сверху):";
		// Покажем цветом, что суммы еще могут изменится - пересчитаться при проведении/записи
		Если (АвторасчетНДС) И (НЕ мПерерасчетПроизведен) Тогда
			Если Модифицированность Тогда
				ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки;
			Иначе
				ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
			КонецЕсли; 
		Иначе	
			ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если мНеОткрыватьФормуДокумента Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда 

		Если НЕ ЗначениеЗаполнено(ПараметрОснование) Тогда
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		КонецЕсли;	
		
		КтоВыписалНалоговуюНакладную = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалНалоговуюНакладную");
		
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		УчитыватьНДС = Истина;
		СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
		
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			Если Не ЗначениеЗаполнено(СчетДт) Тогда
				СчетДт  = ПланыСчетов.Хозрасчетный.ВычетыИзДохода;
			КонецЕсли;
			
			Если СчетУчетаНДС.Пустая() Тогда
				Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат 
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат 
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
					СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
				ИначеЕсли НалоговаяНакладная.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 	
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
					СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;	
				Иначе
					СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
					СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
				КонецЕсли;	
			КонецЕсли;	
			
			УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
			
		КонецЕсли;	

	Иначе 
		
		// Установить доступность формы с учетом даты запрета редактирования	
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СчетДт,СубконтоДт1,ЭлементыФормы.СубконтоДт1,
						   СубконтоДт2,ЭлементыФормы.СубконтоДт2,
						   СубконтоДт3,ЭлементыФормы.СубконтоДт3);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ИзменениеКоличества");
	СтруктураКолонок.Вставить("ИзменениеЦены");
	СтруктураКолонок.Вставить("ИзменениеСуммы");
	СтруктураКолонок.Вставить("ИзменениеКоличества");
	
  	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ИзменениеСуммыНДС");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);
	
	СтруктураКолонок.Вставить("ОсновноеСредство");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОС.Колонки, СтруктураКолонок);

	СтруктураКолонок.Вставить("НематериальныйАктив");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.НематериальныеАктивы.Колонки, СтруктураКолонок);


	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.Товары.Колонки);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
 
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()


// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара  .Заголовок = "Тара ("   + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	СтраницаПанели.ОС.Заголовок = "Основные средства (" + ДокументОбъект.ОС.Количество() + " поз.)";
	СтраницаПанели.НематериальныеАктивы.Заголовок = "Нематериальные активы (" + ДокументОбъект.НематериальныеАктивы.Количество() + " поз.)";
		
	Если ЭлементыФормы.НадписьСРасшифровкойСчета.Заголовок <> СчетНДС.Наименование Тогда
		ЭлементыФормы.НадписьСРасшифровкойСчета.Заголовок = СчетНДС.Наименование;
	КонецЕсли;
	
	Если ЭлементыФормы.НадписьСРасшифровкойСчетаДт.Заголовок <> СчетДт.Наименование Тогда
		ЭлементыФормы.НадписьСРасшифровкойСчетаДт.Заголовок = СчетДт.Наименование;
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаТипПричиныНевыдачиПокупателю.Заголовок = "";
	ТекТипПричины = мСписокВыбораТипПричиныНевыдачиПокупателю.НайтиПоЗначению(ТипПричиныНевыдачиПокупателю);
	Если НЕ ТекТипПричины = Неопределено Тогда
		ЭлементыФормы.РасшифровкаТипПричиныНевыдачиПокупателю.Заголовок = ТекТипПричины.Представление;		
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаСпецРежимНалогообложения.Заголовок = "";
	ТекСпецРежим = мСписокВыбораСпецРежимНалогообложения.НайтиПоЗначению(СпецРежимНалогообложения);
	Если НЕ ТекСпецРежим = Неопределено Тогда
		ЭлементыФормы.РасшифровкаСпецРежимНалогообложения.Заголовок = ТекСпецРежим.Представление;		
	КонецЕсли;
	

КонецПроцедуры // ОбновлениеОтображения()


// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()


// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной[Кнопка.Имя] Тогда
			//изменения операции не произошло
			Возврат
		КонецЕсли;
		ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной[Кнопка.Имя];
	КонецЕсли;
	
	Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОснование = 0;
		КонецЕсли;
		
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		
		Если НалоговаяНакладная.ПродажаНижеОбычнойЦены И ЗначениеЗаполнено(НалоговаяНакладная.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
			НалоговаяНакладная = НалоговаяНакладная.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены;
		КонецЕсли;
		
		ВалютаДокумента 		= мВалютаРегламентированногоУчета;
		КратностьВзаиморасчетов = 1;
		КурсВзаиморасчетов 		= 1;
		Контрагент = Неопределено;
		ДоговорКонтрагента = Неопределено;
		ДокументОснование = Неопределено;
		Сделка = Неопределено;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		  
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОснование = 0;
		КонецЕсли;
		
		ВалютаДокумента = мВалютаРегламентированногоУчета;

	КонецЕсли;
	
	Для каждого СтрокаТЧ из Товары Цикл
		ЗаполнитьСтавкуНДС(СтрокаТЧ);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
		РассчитатьСуммыИзменений(СтрокаТЧ, "Товары");
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "Товары");		
	КонецЦикла;
	
	Для каждого СтрокаТЧ из Услуги Цикл
		ЗаполнитьСтавкуНДС(СтрокаТЧ);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
		РассчитатьСуммыИзменений(СтрокаТЧ, "Услуги");
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "Услуги");		
	КонецЦикла;
	
	Для каждого СтрокаТЧ из ОС Цикл
		//необходимо перезаполнить ставки НДС в табличных частях
		СписокНовыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС();	
		Если СписокНовыхСтавокНДС.Количество() > 1 Тогда
			НоваяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтавкаНДС = СписокНовыхСтавокНДС[0].Значение;
		КонецЕсли;
		СтрокаТЧ.СтавкаНДС = НоваяСтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
		РассчитатьСуммыИзменений(СтрокаТЧ, "ОС");		
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "ОС");		
	КонецЦикла;
 	
	Для каждого СтрокаТЧ из НематериальныеАктивы Цикл
		//необходимо перезаполнить ставки НДС в табличных частях
		СписокНовыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС();	
		Если СписокНовыхСтавокНДС.Количество() > 1 Тогда
			НоваяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтавкаНДС = СписокНовыхСтавокНДС[0].Значение;
		КонецЕсли;
		СтрокаТЧ.СтавкаНДС = НоваяСтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
		РассчитатьСуммыИзменений(СтрокаТЧ, "НематериальныеАктивы");		
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "НематериальныеАктивы");		
	КонецЦикла;
	
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
	ИначеЕсли НалоговаяНакладная.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
			  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
	Иначе
		СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	КонецЕсли;	
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
	
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()


Процедура ОсновныеДействияФормыВыгрузитьВXML(Кнопка)
	
	//Запишем документ
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда//,НСтр("ru='Для выгрзки';uk='Для вивантаження'")) Тогда
		Возврат;
	КонецЕсли;
	
	// найдем регл. отчет для выгрузки в XML                 
	ОтчетЭкспортXML = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетПриложение2КНалоговойНакладной");
    Если ОтчетЭкспортXML = Неопределено Тогда
		Сообщить(НСтр("ru='Не удалось открыть регламентированный отчет ""Приложение 2 к налоговой накладной""! Отчет не найден!';uk='Не вдалося відкрити регламентований  звіт ""Додаток 2 до податкової накладної""! Звіт не знайдено!'"), СтатусСообщения.Важное);
		Сообщить(НСтр("ru = 'Выгрузка не выполнена!'; uk = 'Вивантаження не виконане!'"));
		Возврат;
	КонецЕсли;
	
	ОсновнаяФорма = ОтчетЭкспортXML.ПолучитьФорму("ОсновнаяФорма");
	ОсновнаяФорма.мДатаКонцаПериодаОтчета  = КонецМесяца(Дата);
	ОсновнаяФорма.мДатаНачалаПериодаОтчета = НачалоМесяца(ОсновнаяФорма.мДатаКонцаПериодаОтчета);
	
	// ОсновнаяФорма.ВыборФормыПоУмолчанию(Дата);
	ДатаВыбораФормыВыгрузки = Дата;
	Если РабочаяДата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа1307") Тогда
		
		// начиная с 04.2016 выгрузка в ЕРНН должна осуществляется по форме НА ДАТУ РЕГИСТРАЦИИ??!!
		// проверим соответствующую настройку (возможно данное положение со временем будет отменено)
		ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь;
		УчетнаяПолитикаРегл	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(РабочаяДата, Организация);
		Если УчетнаяПолитикаРегл <> Неопределено Тогда
			ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = УчетнаяПолитикаРегл.ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
		КонецЕсли;
		
		Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь Тогда
			ДатаВыбораФормыВыгрузки = РабочаяДата;
		КонецЕсли;
		
	КонецЕсли;	
	ОсновнаяФорма.ВыборФормыПоУмолчанию(ДатаВыбораФормыВыгрузки);
	
	ФормаОтчетаЭкспортXML = ОтчетЭкспортXML.ПолучитьФорму(ОсновнаяФорма.мВыбраннаяФорма,,Новый УникальныйИдентификатор);
	
	ФормаОтчетаЭкспортXML.Организация 	  		   = Организация;
	ФормаОтчетаЭкспортXML.Периодичность 	  	   = Перечисления.Периодичность.Месяц;

	ФормаОтчетаЭкспортXML.НалоговыйДокумент 	   = Ссылка;
	ФормаОтчетаЭкспортXML.мДатаНачалаПериодаОтчета = ОсновнаяФорма.мДатаНачалаПериодаОтчета;
	ФормаОтчетаЭкспортXML.мДатаКонцаПериодаОтчета  = ОсновнаяФорма.мДатаКонцаПериодаОтчета;
	ФормаОтчетаЭкспортXML.РежимВыбора = Ложь;
	ФормаОтчетаЭкспортXML.ДатаПодписи = РабочаяДата;
	
	ФормаОтчетаЭкспортXML.мВыбраннаяФорма  = ОсновнаяФорма.мВыбраннаяФорма;
	
	ФормаОтчетаЭкспортXML.Открыть();
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(ФормаОтчетаЭкспортXML);
	
	ФормаОтчетаЭкспортXML.Модифицированность = Истина;
	ФормаОтчетаЭкспортXML.ЗаполнитьИзДокументаИсточника();
	
КонецПроцедуры

//Процедура - обработчик нажатия на кнопку "Выгрузить в "1С:Звіт""
//
Процедура ОсновныеДействияФормыВыгрузитьВЗвит1С(Кнопка)
	
	//Запишем документ
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда//,НСтр("ru='Для выгрзки';uk='Для вивантаження'")) Тогда
		Возврат;
	КонецЕсли;
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования 1С:Звіт, в случае если менеджер не инициализирован
	Если Не глПодключитьМенеджерЗвит1С() Тогда
		Возврат;
	КонецЕсли;
	
	глМенеджерЗвит1С.ВыгрузитьДокумент(Ссылка, ЭтаФорма);
		
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткамРегистраНДСПРодаж(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()


// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоНалоговойНакладной(Кнопка)

	ЗаполнитьТабличнуюЧасть(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()


// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	
	СтруктураНеРедактируемыхРеквизитов = Новый Структура();
	
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
	  
		СтруктураРеквизитовДокумента.Удалить("КратностьВзаиморасчетов");
		СтруктураРеквизитовДокумента.Удалить("КурсВзаиморасчетов");
		
		СтруктураНеРедактируемыхРеквизитов.Вставить("ВалютаДокумента");
				
	КонецЕсли;
	
	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета, СтруктураНеРедактируемыхРеквизитов, "Товары");
												
    Если СтруктураЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
											
	Если СтруктураЗначений <> Неопределено Тогда
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		СтруктураЗначений.Вставить("НовыйУчитыватьНДС", Истина);
		
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, Неопределено, СтруктураЗначений, ,Новый Структура("ОС, НематериальныеАктивы"));
		
		//Для ТЧ ОС и НематериальныеАктивы обработаем отдельно
		СтруктураЗначений.ПерезаполнитьЦеныПоТипу = Ложь;
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, Неопределено, СтруктураРеквизитовДокумента, , "ОС, НематериальныеАктивы", мВалютаРегламентированногоУчета, Неопределено, СтруктураЗначений, , Новый Структура("Товары, ВозвратнаяТара, Услуги"));
		Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ОС");
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из НематериальныеАктивы Цикл
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "НематериальныеАктивы");
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
		КонецЦикла;			
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");
		КонецЦикла;			
		
		Для Каждого СтрокаТабличнойЧасти Из ВозвратнаяТара Цикл
			РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");
		КонецЦикла;		
		
	КонецЕсли;

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары              , ЭтотОбъект, ПогрешностиОкругления, "Товары"              , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги              , ЭтотОбъект, ПогрешностиОкругления, "Услуги"              , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(ОС                  , ЭтотОбъект, ПогрешностиОкругления, "ОС"                  , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(НематериальныеАктивы, ЭтотОбъект, ПогрешностиОкругления, "НематериальныеАктивы", "ИзменениеСуммы", "ИзменениеСуммыНДС");
		// Установим признак перерасчета сумм НДС
		мПерерасчетПроизведен = ИСТИНА;
	КонецЕсли;
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();

	УстановитьВидимость();
	ОбновитьПодвал();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()


// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара" и выборе соответствующего подменю, 
// вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоОстаткам(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткамРегистраНДСПродаж(ВозвратнаяТара);

КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоНалоговойНакладной(Кнопка)
	
	ЗаполнитьТабличнуюЧасть(ВозвратнаяТара);

КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()


Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоНалоговойНакладной(Кнопка)

	ЗаполнитьТабличнуюЧасть(Услуги);

КонецПроцедуры  // КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя


// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()


Процедура КоманднаяПанельОСЗаполнитьПоНалоговойНакладной(Кнопка)
	
	ЗаполнитьТабличнуюЧасть(ОС);

КонецПроцедуры


Процедура КоманднаяПанельНематериальныеАктивыЗаполнитьПоНалоговойНакладной(Кнопка)
	
	ЗаполнитьТабличнуюЧасть(НематериальныеАктивы);

КонецПроцедуры


// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ


// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ


// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();
	
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);

КонецПроцедуры // ДатаПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();

КонецПроцедуры // КонтрагентПриИзменении()


// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
		                                        Неопределено, СтандартнаяОбработка);
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()


// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()


Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Возврат;
	КонецЕсли;
	
	СтруктОтбора = Новый Структура();
	СтруктОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
    СтруктОтбора.Вставить("Организация", Организация);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, ЭлементыФормы.ДокументОснование, 
	                   							СтандартнаяОбработка, СтруктОтбора, "");

КонецПроцедуры


Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ЗаполнитьУсловиеПродажи();
	
КонецПроцедуры


Процедура ФормаРасчетовНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	// Подготовим список для выбора из часто встречающихся вариантов заполнения этого реквизита
	ФормыОплаты = Новый СписокЗначений();
	ФормыОплаты.Добавить("Готівка");
	Если глЗначениеПеременной("ДатаВступленияВСилуПриказа1379") <= Дата И Дата < '2014-03-01' ИЛИ Дата >= '2015-01-01' Тогда
		ФормыОплаты.Добавить("Оплата з поточного рахунка");
	Иначе
		ФормыОплаты.Добавить("Оплата з поточного рахунку");
	КонецЕсли;
	ФормыОплаты.Добавить("Бартер");
	ФормыОплаты.Добавить("Чек");
		
	Элемент.СписокВыбора = ФормыОплаты;
	
КонецПроцедуры


Процедура НалоговаяНакладнаяНачалоВыбора(Элемент, СтандартнаяОбработка)
												
	СтандартнаяОбработка = Ложь;
	
	ФормаПоступления = Документы.НалоговаяНакладная.ПолучитьФормуВыбора(,Элемент);
	ФормаПоступления.Заголовок = НСтр("ru='Выберите налоговую накладную';uk='Виберіть податкову накладну'");
	ФормаПоступления.РежимВыбора = Истина;
	ФормаПоступления.Отбор.Организация.Значение = Организация;
	ФормаПоступления.Отбор.Организация.Использование = Истина;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
	   И НЕ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		ФормаПоступления.Отбор.ДоговорКонтрагента.Значение = ДоговорКонтрагента;
		ФормаПоступления.Отбор.ДоговорКонтрагента.Использование = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда 
		СписокОпераций = Новый СписокЗначений();
		СписокОпераций.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации);
		СписокОпераций.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки);
		ФормаПоступления.Отбор.ВидОперации.ВидСравнения = ВидСравнения.ВСписке;
		ФормаПоступления.Отбор.ВидОперации.Значение = СписокОпераций;
		ФормаПоступления.Отбор.ВидОперации.Использование = Истина;
	КонецЕсли;
	

	НалоговаяНакладная = ФормаПоступления.ОткрытьМодально();
	
	// если указана налоговая накладная к которой "привязана" налоговая на превыешение над обычной ценой, то корректировку нужно проводить
	// для НН на превышение, а не для основной
	Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		Если НалоговаяНакладная.ПродажаНижеОбычнойЦены И ЗначениеЗаполнено(НалоговаяНакладная.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
			НалоговаяНакладная = НалоговаяНакладная.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены;
			Сделка = Неопределено;
			ДоговорКонтрагента = Неопределено;
			ДокументОснование = Неопределено;
			ТипПричиныНевыдачиПокупателю = 15;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Процедура СчетНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры


Процедура СчетНДСПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчета(СчетНДС,ЭлементыФормы.СубконтоКт1, ЭлементыФормы.НадписьСубконтоКт1,
	                       ЭлементыФормы.СубконтоКт2, ЭлементыФормы.НадписьСубконтоКт2,
	                       ЭлементыФормы.СубконтоКт3, ЭлементыФормы.НадписьСубконтоКт3);
	
КонецПроцедуры


Процедура СчетНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь)

КонецПроцедуры

Процедура СчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры
                

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//


// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	РаботаСДиалогами.ПоказатьКоэффициентМест(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	РаботаСДиалогами.ПоказатьСуммуБезСкидок(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.НомерГТД) Тогда
		ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст("" + ДанныеСтроки.НомерГТД +  " від " + Формат(ДанныеСтроки.НомерГТД.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.НомерСтрокиНН) Тогда
		ОформлениеСтроки.Ячейки.НомерСтрокиНН.УстановитьТекст("<Авто>");
	КонецЕсли;
	
	ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки);
	
	// выведем также код с/х деятельности
	Если ЗначениеЗаполнено(ДанныеСтроки.КодУКТВЭД) 
		И СпецРежимНалогообложения = 2 Тогда
		ОформлениеСтроки.Ячейки.КодСХДеятельности.УстановитьТекст(ДанныеСтроки.КодУКТВЭД.КодСХДеятельности);
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()


// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);

	ЗаполнитьСтавкуНДС(СтрокаТЧ);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТЧ, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТЧ, "Товары");
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары");
	
	ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТЧ);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()
 

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)
    СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыЦенаПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
    СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыКоличествоПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
    СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры


Процедура ТоварыСтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ОпределитьДопустимыеСтавкиНДС();
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
    СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
    	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");

	ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "Товары");
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
  	
	РассчитатьСуммыИзменений(ЭлементыФормы.Товары.ТекущиеДанные, "Товары");

КонецПроцедуры // ТоварыСуммаНДСПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

Процедура ТоварыПроцентАвтоматическихСкидокПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"));

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
 		
	РассчитатьСуммыИзменений(ЭлементыФормы.Товары.ТекущиеДанные, "Товары");

КонецПроцедуры // ТоварыСуммаПриИзменении()


// Процедура - обработчик события "Начало выбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры


Процедура ТоварыИзменениеКоличестваПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		    СтрокаТЧ.ИзменениеЦены = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеКоличества < 0 Тогда
		СтрокаТЧ.ИзменениеКоличества = Макс(СтрокаТЧ.ИзменениеКоличества, - СтрокаТЧ.Количество);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "Товары");	
КонецПроцедуры

Процедура ТоварыИзменениеЦеныПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		    СтрокаТЧ.ИзменениеКоличества = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеЦены < 0 Тогда
		СтрокаТЧ.ИзменениеЦены = Макс(СтрокаТЧ.ИзменениеЦены, - СтрокаТЧ.Цена);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "Товары");
КонецПроцедуры


// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

Процедура ТоварыСтатьяКнигиПродажНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);

КонецПроцедуры

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, ,мВалютаРегламентированногоУчета); 

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара");

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");
	
КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
    СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");
	
КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
    СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");
	
КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

Процедура ВозвратнаяТараИзменениеКоличестваПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		    СтрокаТЧ.ИзменениеЦены = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеКоличества < 0 Тогда
		СтрокаТЧ.ИзменениеКоличества = Макс(СтрокаТЧ.ИзменениеКоличества, - СтрокаТЧ.Количество);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "ВозвратнаяТара");	
КонецПроцедуры

Процедура ВозвратнаяТараИзменениеЦеныПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		    СтрокаТЧ.ИзменениеКоличества = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеЦены < 0 Тогда
		СтрокаТЧ.ИзменениеЦены = Макс(СтрокаТЧ.ИзменениеЦены, - СтрокаТЧ.Цена);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "ВозвратнаяТара");
КонецПроцедуры


// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.Текст = ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков.Наименование;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ВозвратнаяТара.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ


Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
											
	
	ОформлениеСтроки.Ячейки.Единица.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Единица.Текст = ДанныеСтроки.Номенклатура.БазоваяЕдиницаИзмерения;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.НомерСтрокиНН) Тогда
		ОформлениеСтроки.Ячейки.НомерСтрокиНН.УстановитьТекст("<Авто>");
	КонецЕсли;
	
	ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	// НДС
	ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");
	
	ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти, Истина);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");
	
КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"));
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

КонецПроцедуры// УслугиСуммаПриИзменении()

Процедура УслугиСтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ОпределитьДопустимыеСтавкиНДС();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

	ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "Услуги")
	
КонецПроцедуры // УслугиСтавкаНДСПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	РассчитатьСуммыИзменений(ЭлементыФормы.Услуги.ТекущиеДанные, "Услуги");
	
КонецПроцедуры // УслугиСуммаНДСПриИзменении()

Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьСуммыИзменений(ЭлементыФормы.Услуги.ТекущиеДанные, "Услуги");	
	
КонецПроцедуры

Процедура УслугиИзменениеКоличестваПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		    СтрокаТЧ.ИзменениеЦены = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеКоличества < 0 Тогда
		СтрокаТЧ.ИзменениеКоличества = Макс(СтрокаТЧ.ИзменениеКоличества, - СтрокаТЧ.Количество);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "Услуги");	
КонецПроцедуры

Процедура УслугиИзменениеЦеныПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		    СтрокаТЧ.ИзменениеКоличества = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеЦены < 0 Тогда
		СтрокаТЧ.ИзменениеЦены = Макс(СтрокаТЧ.ИзменениеЦены, - СтрокаТЧ.Цена);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "Услуги");
КонецПроцедуры

Процедура УслугиСтатьяКнигиПродажНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);

КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОС

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
											
	Если ЗначениеЗаполнено(ДанныеСтроки.НомерГТД) Тогда
		ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст("" + ДанныеСтроки.НомерГТД +  " від " + Формат(ДанныеСтроки.НомерГТД.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.НомерСтрокиНН) Тогда
		ОформлениеСтроки.Ячейки.НомерСтрокиНН.УстановитьТекст("<Авто>");
	КонецЕсли;
	
	ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // ОСПриВыводеСтроки()


// Процедура при изменении ОС в табличной части
//
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ОС");
	
КонецПроцедуры

Процедура ОССтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ОпределитьДопустимыеСтавкиНДС();
	
КонецПроцедуры

// При изменении ставки НДС табличной части ОС
//
Процедура ОССтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ОС");
	
	ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "ОС");
КонецПроцедуры

// При изменении суммы в табличной части ОС
//
Процедура ОССуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ОС");
	
КонецПроцедуры

Процедура ОСИзменениеКоличестваПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		    СтрокаТЧ.ИзменениеЦены = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеКоличества < 0 Тогда
		СтрокаТЧ.ИзменениеКоличества = Макс(СтрокаТЧ.ИзменениеКоличества, - 1);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "ОС");
КонецПроцедуры

Процедура ОСИзменениеЦеныПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		    СтрокаТЧ.ИзменениеКоличества = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеЦены < 0 Тогда
		СтрокаТЧ.ИзменениеЦены = Макс(СтрокаТЧ.ИзменениеЦены, - СтрокаТЧ.Сумма);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "ОС");
КонецПроцедуры

Процедура ОССтатьяКнигиПродажНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);

КонецПроцедуры

Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ НематериальныеАктивы

Процедура НематериальныеАктивыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТЧ = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

Процедура НематериальныеАктивыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
											
	Если ЗначениеЗаполнено(ДанныеСтроки.НомерГТД) Тогда
		ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст("" + ДанныеСтроки.НомерГТД +  " від " + Формат(ДанныеСтроки.НомерГТД.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.НомерСтрокиНН) Тогда
		ОформлениеСтроки.Ячейки.НомерСтрокиНН.УстановитьТекст("<Авто>");
	КонецЕсли;
	
	ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры

Процедура НематериальныеАктивыНематериальныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура НематериальныеАктивыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура НематериальныеАктивыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "НематериальныеАктивы");
	
	ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура НематериальныеАктивыСтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ОпределитьДопустимыеСтавкиНДС();
	
КонецПроцедуры

Процедура НематериальныеАктивыИзменениеКоличестваПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		    СтрокаТЧ.ИзменениеЦены = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеКоличества < 0 Тогда
		СтрокаТЧ.ИзменениеКоличества = Макс(СтрокаТЧ.ИзменениеКоличества, - 1);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура НематериальныеАктивыИзменениеЦеныПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
		Если СтрокаТЧ.ИзменениеКоличества <> 0 Тогда
		    СтрокаТЧ.ИзменениеКоличества = 0;
		    Предупреждение("Разрешается корректировать или цену или количество");
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТЧ.ИзменениеЦены < 0 Тогда
		СтрокаТЧ.ИзменениеЦены = Макс(СтрокаТЧ.ИзменениеЦены, - СтрокаТЧ.Сумма);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура НематериальныеАктивыСтатьяКнигиПродажНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);

КонецПроцедуры

// Процедура - обработик нажатия на любую из дополнительных кнопок по заполнению ТЧ
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Возврат;
	КонецЕсли;

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			СписокТипов.Добавить(Метаданные.Документы["ЗаказПоставщику"].Имя, Метаданные.Документы["ЗаказПоставщику"].Представление());

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			СписокТипов.Добавить(Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());

		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			СписокТипов.Добавить(Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			СписокТипов.Добавить(Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Если СписокТипов.Количество() = 1 Тогда
		ТипДокументаСделки = СписокТипов[0].Значение;
	Иначе
		// Пользователь выбирает тип расчетного документа
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ТипДокументаСделки = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);

	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	ФормаВыбора.Открыть();
	
КонецПроцедуры // СделкаНачалоВыбора()

Процедура ТипПричиныНевыдачиПокупателюНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ВыбратьИзСписка(мСписокВыбораТипПричиныНевыдачиПокупателю, Элемент, мСписокВыбораТипПричиныНевыдачиПокупателю.НайтиПоЗначению(Элемент.Значение));
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.Значение = Результат.Значение;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СпецРежимНалогообложенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ВыбратьИзСписка(мСписокВыбораСпецРежимНалогообложения, Элемент, мСписокВыбораСпецРежимНалогообложения.НайтиПоЗначению(Элемент.Значение));
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.Значение = Результат.Значение;
	
КонецПроцедуры

Процедура ПечататьПоФормеПриказа969ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура НалоговаяНакладнаяПриИзменении(Элемент)
	
	
	СпецРежимНалогообложения     = НалоговаяНакладная.СпецРежимНалогообложения;
	ТипПричиныНевыдачиПокупателю = НалоговаяНакладная.ТипПричиныНевыдачиПокупателю;
	
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);
	
КонецПроцедуры


Процедура ВключаетсяВУточняющийРасчетПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры


Процедура ВидДоговораНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ВидыДоговоровПоГК.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Справочники.ВидыДоговоровПоГК.НайтиПоНаименованию(ВидДоговора, Истина);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТипПричиныНевыдачиПокупателюПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ТипПричиныНевыдачиПокупателюОчистка(Элемент, СтандартнаяОбработка)
	УстановитьВидимость();
КонецПроцедуры

Процедура ДатаПолученияПокупателемНеРавнаДатеДокументаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры


// Процедура дает возможность выбора Кода УКТ ВЭД и НОмера ГТД как из всех возможных вариантов
// так и из подчиненного к номенклатуре справочника, содержащие возможные значения по умолчанию
// для номенклатуры
Процедура НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, ИмяТабличногоПоля = "Товары")
	
	Если ИмяТабличногоПоля <> "Товары" Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаТоваров = ЭлементыФормы[ИмяТабличногоПоля].ТекущиеДанные;
	Если ТекущаяСтрокаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   "Выбрать по данным номенклатуры");
	ВариантыВыбора.Добавить(Истина, "Произвольный выбор");
	
	РезультатВыбора = ВыбратьИзСписка(ВариантыВыбора, Элемент, 0);
	
    Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = РезультатВыбора.Значение;
	
	Если СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	ФормаВыбора = Справочники.НоменклатураГТД.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.ПараметрВыборПоВладельцу = ТекущаяСтрокаТоваров.Номенклатура;
	ФормаВыбора.ПараметрОтборПоВладельцу = ТекущаяСтрокаТоваров.Номенклатура;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаТоваров.КодУКТВЭД);
	Запрос.УстановитьПараметр("НомерГТД",  ТекущаяСтрокаТоваров.НомерГТД);
	Запрос.УстановитьПараметр("Владелец",  ФормаВыбора.ПараметрВыборПоВладельцу);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД = &КодУКТВЭД
	               |	И НоменклатураГТД.НомерГТД = &НомерГТД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // НачалоВыбораНоменклатурыГТД

Процедура КодУКТВЭДОбработкаВыбора(ИмяТабличногоПоля, Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаДанных = ЭлементыФормы[ИмяТабличногоПоля].ТекущиеДанные;
		Если НЕ ТекущаяСтрокаДанных = Неопределено Тогда
			ТекущаяСтрокаДанных.КодУКТВЭД = ВыбранноеЗначение.КодУКТВЭД;
		КонецЕсли;

		ВыбранноеЗначение = ВыбранноеЗначение.КодУКТВЭД;	
		
	КонецЕсли;
	
КонецПроцедуры // КодУКТВЭДОбработкаВыбора

Процедура НомерГТДОбработкаВыбора(ИмяТабличногоПоля, Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаДанных = ЭлементыФормы[ИмяТабличногоПоля].ТекущиеДанные;
		Если НЕ ТекущаяСтрокаДанных = Неопределено Тогда
			ТекущаяСтрокаДанных.НомерГТД = ВыбранноеЗначение.НомерГТД;
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.НомерГТД;	
		
	КонецЕсли;
	
КонецПроцедуры // НомерГТДОбработкаВыбора

Процедура ТоварыКодУКТВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура ТоварыКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КодУКТВЭДОбработкаВыбора("Товары", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

Процедура ТоварыНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НомерГТДОбработкаВыбора("Товары", Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры

Процедура ОСКодУКТВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, "ОС");
КонецПроцедуры

Процедура ОСКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КодУКТВЭДОбработкаВыбора("ОС", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОСНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, "ОС");
КонецПроцедуры

Процедура ОСНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НомерГТДОбработкаВыбора("ОС", Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры

Процедура НематериальныеАктивыКодУКТВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, "НематериальныеАктивы");
КонецПроцедуры

Процедура НематериальныеАктивыКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КодУКТВЭДОбработкаВыбора("НематериальныеАктивы", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

Процедура НематериальныеАктивыНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, "НематериальныеАктивы");
КонецПроцедуры

Процедура НематериальныеАктивыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НомерГТДОбработкаВыбора("НематериальныеАктивы", Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры

Процедура НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрокаУслуг = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрокаУслуг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаУслуг.Номенклатура) Тогда
		Возврат;
	КонецЕсли; 
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать по данным номенклатуры';uk='Вибрати по даним номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Произвольный выбор';uk='Довільний вибір'"));
	
	РезультатВыбора = ВыбратьИзСписка(ВариантыВыбора, Элемент, 0);
	
    Если РезультатВыбора = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = РезультатВыбора.Значение;
	
	Если СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	ФормаВыбора = Справочники.НоменклатураГТД.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.ПараметрВыборПоВладельцу = ТекущаяСтрокаУслуг.Номенклатура;
	ФормаВыбора.ПараметрОтборПоВладельцу = ТекущаяСтрокаУслуг.Номенклатура;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаУслуг.КодУКТВЭД);
	Запрос.УстановитьПараметр("Владелец", ФормаВыбора.ПараметрВыборПоВладельцу);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД = &КодУКТВЭД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура УслугиКодУКТВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УслугиКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаУслуг = ЭлементыФормы.Услуги.ТекущиеДанные;
		Если НЕ ТекущаяСтрокаУслуг = Неопределено Тогда
			ТекущаяСтрокаУслуг.КодУКТВЭД = ВыбранноеЗначение.КодУКТВЭД;
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.КодУКТВЭД;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыДействиеПеренестиТоварыПоНДС7ВОтдельнуюНакладную(Кнопка)
	
	НоваяНакладная = ВыделитьСтавкуНДС7ВОтдельныйДокумент();
	
	Если НЕ НоваяНакладная = Неопределено Тогда
		Форма7 = НоваяНакладная.ПолучитьФорму("ФормаДокумента",, Новый УникальныйИдентификатор);	
		Форма7.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаРегистрацииПокупателемВЕРННПриИзменении(Элемент)
	ВключенаВЕдиныйРеестрНалоговыхНакладных = ЗначениеЗаполнено(ДатаВключенияВЕдиныйРеестрНалоговыхНакладных);
КонецПроцедуры // ДатаРегистрацииПокупателемВЕРННПриИзменении

Процедура ДатаРегистрацииПокупателемВЕРННОчистка(Элемент, СтандартнаяОбработка)
	ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь;
КонецПроцедуры // ДатаРегистрацииПокупателемВЕРННОчистка

Процедура ВключенаВЕдиныйРеестрНалоговыхНакладныхПриИзменении(Элемент)
	
	Если ВключенаВЕдиныйРеестрНалоговыхНакладных Тогда
		
		ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = Дата;	
		
	Иначе	
		
		ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = '0001-01-01';	
		
	КонецЕсли;
	
КонецПроцедуры // ВключенаВЕдиныйРеестрНалоговыхНакладныхПриИзменении

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВидимостьРеквизитаДатаРегистрацииВЕРНН();
КонецПроцедуры

Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВидимостьРеквизитаДатаРегистрацииВЕРНН();
КонецПроцедуры

Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВидимостьРеквизитаДатаРегистрацииВЕРНН();
КонецПроцедуры

Процедура НематериальныеАктивыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВидимостьРеквизитаДатаРегистрацииВЕРНН();
КонецПроцедуры

Процедура ВидимостьРеквизитаДатаРегистрацииВЕРНН()
	
	НДСОтрицательный = (Товары.Итог("ИзменениеСуммыНДС")+Услуги.Итог("ИзменениеСуммыНДС")+ОС.Итог("ИзменениеСуммыНДС")+НематериальныеАктивы.Итог("ИзменениеСуммыНДС") < 0);
	ЭлементыФормы.НадписьДатаРегистрацииПокупателемВЕРНН.Видимость = НДСОтрицательный И Дата >= '2015-01-07';
	ЭлементыФормы.ДатаРегистрацииПокупателемВЕРНН.Видимость = НДСОтрицательный И Дата >= '2015-01-07';
	
	ЭлементыФормы.ДатаРегистрацииПокупателемВЕРНН.Формат = ?(Дата >= '2016-01-01', "ДФ=MM.yyyy", "ДФ=dd.MM.yy");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Дата >= '2016-01-01' Тогда
		Если НачалоМесяца(Дата) = НачалоМесяца(ДатаВключенияВЕдиныйРеестрНалоговыхНакладных) Тогда
			ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = Дата;
		Иначе	
			ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = НачалоМесяца(ДатаВключенияВЕдиныйРеестрНалоговыхНакладных);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.КодУКТВЭД) Тогда
		ОформлениеСтроки.Ячейки.ВидКода.УстановитьТекст(ДанныеСтроки.КодУКТВЭД.Вид);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость реквизитов субконто и подписей к ним.
Процедура УстановитьВидимостьСубконто(СчетУчета, Префикс = "СубконтоДт", Постфикс="")

	Для Ном = 1 по 3 Цикл

		Если (Ном <= СчетУчета.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетУчета)) Тогда
			ЭлементыФормы["Надпись"+Префикс+Ном+Постфикс].Заголовок = Строка(СчетУчета.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["Надпись"+Префикс+Ном+Постфикс].Видимость = Истина;
			ЭлементыФормы[Префикс+Ном+Постфикс].Видимость      		= Истина;
		Иначе
			ЭлементыФормы["Надпись"+Префикс+Ном+Постфикс].Видимость = Ложь;
			ЭлементыФормы[Префикс+Ном+Постфикс].Видимость       	= Ложь;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьСубконо()

Процедура СчетДтПриИзменении(Элемент)
	
	УстановитьВидимостьСубконто(СчетДт, "СубконтоДт");
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СчетДт, СубконтоДт1, ЭлементыФормы.СубконтоДт1,
						   СубконтоДт2, ЭлементыФормы.СубконтоДт2,
						   СубконтоДт3, ЭлементыФормы.СубконтоДт3);
	
КонецПроцедуры

Процедура СчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетДтНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь)
	
КонецПроцедуры

Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоДт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоДт"+н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

//***AL Start
Процедура ЗаполнитьСвод(Элемент)
    Если ЭлементыФормы.НалоговаяНакладная.Значение=Документы.НалоговаяНакладная.ПустаяСсылка()
        ИЛИ ЭлементыФормы.НалоговаяНакладная.Значение=неопределено тогда
        Предупреждение("Не указана налоговая накладная для коррекции!");
        возврат;
    КонецЕсли;    
    
    Возвраты.Очистить();
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ
                   |    ВозвратТоваровОтПокупателя.ДокументПартии КАК Отгрузка,
                   |    ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
                   |    КОЛИЧЕСТВО(ВозвратТоваровОтПокупателя.Ссылка) КАК шт,
                   |    СУММА(ВЫБОР
                   |            КОГДА ВозвратТоваровОтПокупателя.Ссылка.СуммаВключаетНДС = ИСТИНА
                   |                ТОГДА ВозвратТоваровОтПокупателя.Сумма
                   |            ИНАЧЕ ВозвратТоваровОтПокупателя.Сумма + ВозвратТоваровОтПокупателя.СуммаНДС
                   |        КОНЕЦ) КАК Сумма,
                   |    ВозвратТоваровОтПокупателя.Ссылка.Дата КАК Дата,
                   |    ВозвратТоваровОтПокупателя.Ссылка.Номер КАК Номер
                   |ПОМЕСТИТЬ возвраты
                   |ИЗ
                   |    Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателя
                   |ГДЕ
                   |    ВозвратТоваровОтПокупателя.Ссылка.ПометкаУдаления = ЛОЖЬ
                   |    И ВозвратТоваровОтПокупателя.Ссылка.Дата >= &НачДата
                   |    И ВозвратТоваровОтПокупателя.Ссылка.Дата <= &КонДата
                   |    И ВозвратТоваровОтПокупателя.Ссылка.Контрагент = &Контрагент
                   |    И ВозвратТоваровОтПокупателя.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    ВозвратТоваровОтПокупателя.ДокументПартии,
                   |    ВозвратТоваровОтПокупателя.Ссылка
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ РАЗЛИЧНЫЕ
                   |    НалоговаяНакладная.Ссылка,
                   //|    возвраты.Отгрузка,
                   |    возвраты.Ссылка КАК ДокВН,
                   //|    возвраты.шт,
                   |    возвраты.Дата,возвраты.Номер,
                   //|    НалоговаяНакладная.Ссылка.Номер,
                   //|    НалоговаяНакладная.Ссылка.Дата,
                   //|    НалоговаяНакладная.Ссылка.СуммаДокумента,
                   |    НалоговаяНакладная.Ссылка КАК СсылкаНН
                   //|    возвраты.Отгрузка.СуммаДокумента КАК СуммаОтгрузки,
                   //|    возвраты.Сумма КАК СуммаВозврата
                   |ИЗ
                   |    возвраты КАК возвраты
                   |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НалоговаяНакладная.Расходные КАК НалоговаяНакладная
                   |        ПО возвраты.Отгрузка.Ссылка = НалоговаяНакладная.Документ.Ссылка
                   |ГДЕ
                   |    НалоговаяНакладная.Ссылка = &Ссылка
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    возвраты.Дата,возвраты.Номер"; 

	Запрос.УстановитьПараметр("Контрагент", Контрагент.Ссылка); 
    Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента.Ссылка); 
    Запрос.УстановитьПараметр("НачДата",НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",КонецДня(Дата));
    Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.НалоговаяНакладная.Ссылка);
	
	Результат = Запрос.Выполнить(); 
	Выборка = Результат.Выбрать(); 
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ДокВН.Проведен = Истина Тогда
		 ЭлементыФормы.ТабличноеПолеРН.ДобавитьСтроку();
		 СтрокаПоля = ЭлементыФормы.ТабличноеПолеРН.ТекущаяСтрока;
		 СтрокаПоля.Документ = Выборка.ДокВН;
		 СтрокаПоля.Учитывать = 1;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры
//***
Процедура ВыгрузитьНоменклатуруНажатие(Элемент)
	Товары.Очистить();
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура");
    ТЗ.Колонки.Добавить("ХарактеристикаНоменклатуры");
    ТЗ.Колонки.Добавить("Коэффициент");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СчетУчетаНДС");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("СуммаБезСкидки");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("ИзменениеКоличества");
	ТЗ.Колонки.Добавить("ИзменениеЦены");
	ТЗ.Колонки.Добавить("ИзменениеСуммы");
	ТЗ.Колонки.Добавить("ИзменениеСуммыНДС");
	
    Для Каждого ТекСтр Из Возвраты Цикл
    	Если ТекСтр.Учитывать=Истина Тогда
    	 	Документ = ТекСтр.Документ;
            Для Каждого СтрДок Из Документ.Товары Цикл
                Если СтрДок.ДокументПартии.Дата>=НачалоМесяца(ЭтотОбъект.НалоговаяНакладная.Дата) И
                      СтрДок.ДокументПартии.Дата<=КонецМесяца(ЭтотОбъект.НалоговаяНакладная.Дата) тогда
    			  Строка = ТЗ.Добавить();
    			  Строка.Номенклатура = СтрДок.Номенклатура;
                  Строка.ХарактеристикаНоменклатуры=СтрДок.ХарактеристикаНоменклатуры;
    			  Строка.ЕдиницаИзмерения = СтрДок.ЕдиницаИзмерения;
    			  Строка.Коэффициент = СтрДок.Коэффициент;				  
    			  Строка.Количество  = СтрДок.Количество;
                  Строка.Цена        = Окр(?(Документ.СуммаВключаетНДС,СтрДок.Цена,СтрДок.Цена*1.2),2,1);
                  //Окр(?(Документ.СуммаВключаетНДС,СтрДок.Сумма,СтрДок.Сумма+СтрДок.СуммаНДС)/СтрДок.Количество,2,1);
    			  Строка.Сумма       = ?(Документ.СуммаВключаетНДС,СтрДок.Сумма,СтрДок.Сумма+СтрДок.СуммаНДС);
    			  Строка.СтавкаНДС   = СтрДок.СтавкаНДС;
    			  Строка.СуммаНДС    = СтрДок.СуммаНДС;
    			  Строка.Изменениеколичества = -СтрДок.Количество;
    			  Строка.ИзменениеСуммы = -?(Документ.СуммаВключаетНДС,СтрДок.Сумма,СтрДок.Сумма+СтрДок.СуммаНДС);
    			  Строка.ИзменениеСуммыНДС = -СтрДок.СуммаНДС;
               КонецЕсли;   
    		КонецЦикла;
    	КонецЕсли;
     КонецЦикла;
    
	 тз.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,Цена","Сумма,Количество,СуммаНДС,ИзменениеКоличества,ИзменениеСуммы,ИзменениеСуммыНДС");
     //Цена,
	 тз.Сортировать("Номенклатура");
	 Для Каждого СтрТз из Тз Цикл
		ЭлементыФормы.Товары.ДобавитьСтроку();
		СтрокаПоля = ЭлементыФормы.Товары.ТекущаяСтрока;
		СтрокаПоля.Номенклатура = СтрТз.Номенклатура;
		СтрокаПоля.КодУКТВЭД	 = СтрТз.Номенклатура.НоменклатураГТД.КодУКТВЭД;//***170405		
        СтрокаПоля.ХарактеристикаНоменклатуры= СтрТз.ХарактеристикаНоменклатуры;
		СтрокаПоля.ЕдиницаИзмерения = СтрТз.ЕдиницаИзмерения;
		СтрокаПоля.Коэффициент = СтрТз.Коэффициент;
		СтрокаПоля.Цена = ?(СтрТз.Количество<>0,СтрТз.Сумма/СтрТз.Количество,0);
		СтрокаПоля.СтавкаНДС = СтрТз.СтавкаНДС;
		СтрокаПоля.Сумма = СтрТз.Сумма;
		СтрокаПоля.Количество = СтрТз.Количество;
		СтрокаПоля.СуммаНДС = СтрТз.СуммаНДС;
		СтрокаПоля.ИзменениеКоличества = СтрТз.ИзменениеКоличества;
		СтрокаПоля.ИзменениеСуммы = СтрТз.ИзменениеСуммы;
		СтрокаПоля.ИзменениеСуммыНДС = СтрТз.ИзменениеСуммыНДС;
		СтрокаПоля.ДатаКорректировки = Дата;
		СтрокаПоля.Причина ="Повернення товару";
		СтрокаПоля.СтатьяКнигиПродаж  = Справочники.СтатьиНалоговыхДеклараций.НайтиПоКоду("00213");
		СтрокаПоля.НалоговоеНазначение= Справочники.НалоговыеНазначенияАктивовИЗатрат.НайтиПоКоду("000027");

	 КонецЦикла;
КонецПроцедуры
//***//
Процедура КоманднаяПанельТоварыЗаполнитьПоДокументуОснованию(Кнопка)
	ТабличнаяЧасть=Товары;
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ТекстПредупреждения = "Не выбран документ основание . Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Очистить табличную часть?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТабличнаяЧасть.Очистить();
        //Иначе
        //	Возврат;
		КонецЕсли; 
		
    КонецЕсли;
    Если ТипЗНЧ(ДокументОснование)= Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда 
	    ЗаполнитьПоВозвратуТоваровОтПокупателя();
    ИначеЕсли ТипЗНЧ(ДокументОснование)= Тип("ДокументСсылка.РеализацияТоваровУслуг")  тогда 
        ЗаполнитьПоРеализации();
        //Найти налоговую накладную по реализации
        ЭтотОбъект.НалоговаяНакладная=ДополнительныеФункции.НайтиНалоговуюПоРеализации(ДокументОснование);
    КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТоварыЗаписатьНомераСтрокИзНН(Кнопка)
	ЗаполнитьНомераСтрокИзНН(НалоговаяНакладная);
КонецПроцедуры
//***AL End

// Признак перерасчета сумм НДС с учетом ошибок округления
мПерерасчетПроизведен = ЛОЖЬ;

мСписокВыбораТипПричиныНевыдачиПокупателю = Новый СписокЗначений();
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(0, " - Податкова накладна видається покупцю");
//мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(1, "01-Виписана на суму перевищення звичайної ціни над фактичною");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(1, "01-Складена на суму збільшення компенсації вартості поставлених товарів/послуг (для податкових накладних, особливості заповнення яких викладені в пункті 13 цього Порядку)");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(2, "02-Постачання неплатнику податку");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(3, "03-Натуральна виплата в рахунок оплати праці фізичним особам");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(4, "04-Постачання у межах балансу для невиробничого використання");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(5, "05-Ліквідація основних фондів за самостійним рішенням платника податку");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(6, "06-Переведення основних фондів до складу невиробничих");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(7, "07-Експортні постачання");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(8, "08-Постачання для операцій, які не є об'єктом оподаткування податком на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(9, "09-Постачання для операцій, які звільнені від оподаткування податком на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(10, "10-Визнання умовного постачання товарних залишків та/або основних фондів, що перебувають 
													   	|в обліку платника податку на день анулювання його реєстрації як платника податку на додану вартість,
													  	|щодо яких був нарахований податковий кредит у минулих або поточному податкових періодах
														|при анулюванні реєстрації платника податку на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(11, "11-Виписана за щоденними підсумками операцій"); 
//мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(12, "12-Виписана на вартість безоплатно поставлених товарів/послуг, обчислену виходячи з рівня звичайних цін"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(12, "12-Складена на постачання неплатнику, в якій зазначається назва покупця (для податкових накладних, особливості заповнення яких викладені в пункті 10 цього Порядку)");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(13, "13-Використання виробничих або невиробничих засобів, інших товарів/послуг не у господарській діяльності"); 

мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(14, "14-Виписана покупцем (отримувачем) послуг від нерезидента"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(15, "15-Складена на суму перевищення ціни придбання товарів/послуг над фактичною ціною їх постачання"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(16, "16-Складена на суму перевищення балансової (залишкової) вартості необоротних активів над фактичною ціною їх постачання"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(17, "17-складена на суму перевищення собівартості самостійно виготовлених товарів/послуг над фактичною ціною їх постачання"); 

мСписокВыбораСпецРежимНалогообложения = НалоговыйУчет.ПолучитьСписокВыбораСпецРежимНалогообложения();
