Перем мВалютаРегламентированногоУчета Экспорт;

Перем мНеОткрыватьФормуДокумента Экспорт;

Перем КонтрагентНеРезидент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с регламентированной печатной формой 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Ложь
						, ИмяМакета = "Приложение2КНалоговойНакладной"
						) Экспорт	
						
						
	Если РабочаяДата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа1307") Тогда
		
		// начиная с 04.2016 выгрузка в ЕРНН должна осуществляется по форме НА ДАТУ РЕГИСТРАЦИИ??!!
		// проверим соответствующую настройку (возможно данное положение со временем будет отменено)
		ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь;
		УчетнаяПолитикаРегл	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(РабочаяДата, Организация);
		Если УчетнаяПолитикаРегл <> Неопределено Тогда
			ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = УчетнаяПолитикаРегл.ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
		КонецЕсли;
		
		Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь Тогда
		    // печатную форму выбираем в зависимости не от даты док, а от рабочей даты
			Если РабочаяДата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа1307") Тогда
				
				Возврат ПечатьДокументаНалоговыйКодекс2016(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета);
				
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Дата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа1307") Тогда
		
		Возврат ПечатьДокументаНалоговыйКодекс2016(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета);
	
	ИначеЕсли Дата >= '2015-01-01' Тогда						
		
		Возврат ПечатьДокументаНалоговыйКодекс2015(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета);	
						
	ИначеЕсли Дата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа957") Тогда 
		
		Возврат ПечатьДокументаНалоговыйКодекс2014Мес12(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета);			
						
	ИначеЕсли Дата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа10") Тогда
		
		Возврат ПечатьДокументаНалоговыйКодекс2014(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета);
		
	ИначеЕсли Дата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа1379")   Тогда
		
	    Возврат ПечатьДокументаНалоговыйКодекс2012(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы
													, ИмяМакета
													);
	Иначе	
		Возврат ПечатьДокументаНалоговыйКодекс(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
	КонецЕсли;

КонецФункции // ПечатьДокумента()

Функция ПечатьДокументаНалоговыйКодекс2016(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета = "Приложение2КНалоговойНакладной") Экспорт	
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	КонтрагентНеРезидент = Контрагент.НеЯвляетсяРезидентом;	
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
	
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G001");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		
		Если     ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
			 
			Сообщить(НСтр("ru='Документ является служебным и не может быть выгружен в XML!';uk='Документ є службовим та не може бути вивантажений в XML!'"));
			 
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	
	|	ВидОперации,
	
	|	Контрагент,
	|	Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
	|	Контрагент.КодФилиала КАК ФилиалПокупателя,
	
	|	Организация,
	|	Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	
	|	ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции КАК СоглашениеОРазделеПродукции, 
	
	|	РегистрируетсяВЕРННПокупателем,
	
	|   ТипПричиныНевыдачиПокупателю,
	
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	
	|	НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены КАК ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены,
	
	|   НалоговаяНакладная.Сводная   КАК Сводная,
	|   НалоговаяНакладная.ЛьготаНДС КАК ЛьготаНДС,
	|   НалоговаяНакладная.ВидОперации КАК ВидОперацииНалоговой,
	
	
	
	|	КтоВыписалНалоговуюНакладную 			КАК КтоВыписалНалоговуюНакладную,
	|	КтоВыписалНалоговуюНакладную.КодПоДРФО  КАК ИННКтоВыписалНН,
	|   Приложение2.СуммаВключаетНДС                    
	
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2
	|
	|ГДЕ
	|	Приложение2.Ссылка = &ТекущийДокумент";
	//***|   Приложение2.СуммаВключаетНДС                    //*** Е.Г. 13-05-13	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// получим "печатную форму" исходной НН для определения номера корректируемой строки
	СтруктураПоискаНомераСтрокиННПолная      = Новый Структура("Номенклатура,ЦенаБезНДС,ЕдиницаИзмеренияКод");
	СтруктураПоискаНомераСтрокиННСокращенная = Новый Структура("Номенклатура,ЦенаБезНДС");
	Попытка
		
		ИспользоватьДанныеЗЦ = Ложь;
		Если ЗначениеЗаполнено(Шапка.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
			НалоговыйДокументОбъект = Шапка.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();	
		    ИспользоватьДанныеЗЦ = Истина;
		Иначе	
			НалоговыйДокументОбъект = Шапка.НалоговаяНакладная.ПолучитьОбъект();	
		КонецЕсли;
	
		ПечатнаяФормаНН = НалоговыйДокументОбъект.ПечатьДокумента(Истина);
		Если ИспользоватьДанныеЗЦ Тогда
			ПечатнаяФормаНН 	= ПечатнаяФормаНН.НалоговыйДокументЗЦ.R;	
		Иначе	
			ПечатнаяФормаНН 	= ПечатнаяФормаНН.НалоговыйДокумент.R;	
		КонецЕсли;	
		
		Если ПечатнаяФормаНН.Колонки.Найти("G3S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("Номенклатура");
		Иначе	
			ПечатнаяФормаНН.Колонки.G3S.Имя = "Номенклатура";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G105_2S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
		Иначе	
			ПечатнаяФормаНН.Колонки.G105_2S.Имя = "ЕдиницаИзмеренияКод";
		КонецЕсли;
			
		Если ПечатнаяФормаНН.Колонки.Найти("G6") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
		Иначе	
			ПечатнаяФормаНН.Колонки.G6.Имя = "ЦенаБезНДС";
		КонецЕсли;
		
	Исключение 
		ПечатнаяФормаНН = Новый ТаблицаЗначений;
		ПечатнаяФормаНН.Колонки.добавить("Номенклатура");
		ПечатнаяФормаНН.Колонки.добавить("ЕдиницаИзмеренияКод");
		ПечатнаяФормаНН.Колонки.добавить("ЦенаБезНДС");
	КонецПопытки;
	
	ДополнениеКНаименованиюОрганизации = "";
	Если ЗначениеЗаполнено(Шапка.ГоловнаяОрганизация) Тогда
		СведенияОГоловнойОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнаяОрганизация, Шапка.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ПолноеНаименование,",Ложь) + ", " ;
	КонецЕсли;
	Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
		СведенияОГоловномКонтрагентеПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнойКонтрагент, Шапка.Дата);	
	КонецЕсли;
	
	// Подготовим таблицы
	Отказ = Ложь;
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ); 
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// свернем подобные строки
	//ТаблицаНоменклатуры.Свернуть(
	//	"Причина, Номенклатура, Характеристика, КодУКТВЭД, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, ЦенаМестаБезНДСБезСкидкиРегл,  Количество, СтавкаНДС, КодЛьготы, НомерСтрокиНН", 
	//	"ИзменениеКоличества, ИзменениеЦеныБезНДССоСкидкойРегл, ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл"
	//);   	***
	
	ТаблицаНоменклатуры.Свернуть(                                                                                                                                                                        //***//Е.Г. 13-05-13
		"ДатаКорректировки, Причина, Номенклатура, Характеристика, КодУКТВЭД, НомерГТД, ДатаГТД, ТекстДляПечатиВКолонкеКоличество, ЕдиницаИзмерения,ЕдиницаИзмеренияКод, ЦенаМестаБезНДСБезСкидкиРегл,  Количество, СтавкаНДС,Цена,ПроцентСкидкиНаценки,КодЛьготы,НомерСтрокиНН", 
		"ИзменениеКоличества, ИзменениеЦеныБезНДССоСкидкойРегл, ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл"
		);  
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМестаБезНДСБезСкидкиРегл.Имя 	 = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеЦеныБезНДССоСкидкойРегл.Имя = "ИзменениеЦеныБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыБезНДСРегл.Имя		 = "ИзменениеСуммыБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыНДСРегл.Имя		 	 = "ИзменениеСуммыНДС";
	
	// Для служебных целей понадобится исходная таблица
	ТаблицаНоменклатурыКопия = ТаблицаНоменклатуры.Скопировать();
	
	ТабДокумент = Новый ТабличныйДокумент;                                                           
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени2КНалоговойНакладной_Приложение2_2016_"+ИмяМакета;

	Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2016");
	Если ИмяМакета = "Приложение2КНалоговойНакладнойАльбом" Тогда
		Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2016Альбом");
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	Макет.КодЯзыкаМакета = "ru";
	
	// определим параметры шапки документа

	//Дата налоговой
	ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(Шапка.Префикс), Прав("    " + Формат(Число(Шапка.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если Шапка.ДатаНалоговойНакладной < глЗначениеПеременной("ДатаВступленияВСилуПриказа1307") Тогда	
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
	Иначе	
	    ТекНомерФилиал = КодСпецРежима;
		Если Шапка.СоглашениеОРазделеПродукции = Истина Тогда
			ТекНомерФилиал = "5";
		КонецЕсли;
	КонецЕсли;
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	
	//Дата
	ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект)), 7);
		
	// филиал/спецрежим
	КодСпецРежима    = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если Шапка.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	Если КодСпецРежима = "7" Тогда
		КодСпецРежима = "";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(Шапка.Префикс), Прав("    " + Формат(Число(Шапка.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	Если ЗначениеЗаполнено(Шапка.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(Шапка.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(Шапка.ФилиалПокупателя, 1, ПозицияСобачки - 1);
		Иначе
			ФилиалПокупателя = Шапка.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Номер свидетельства, Наименование, Адрес
	Если  Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		// налоговые реквизиты не указыватюся
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		                                                                                  				   
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,",Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеОрганизации         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь) 		
										  + ", " + НазваниеОрганизации;
		КонецЕсли;
		
		Страна = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Запрос.УстановитьПараметр("Объект", Шапка.Контрагент);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	КонтактнаяИнформация.Поле1,
		               |	КонтактнаяИнформация.Поле10
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Объект = &Объект
		               |	И КонтактнаяИнформация.Тип = &Тип
		               |	И КонтактнаяИнформация.Вид = &Вид";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Поле1  = РезультатЗапроса.Выгрузить()[0].Поле1;
			Поле10 = РезультатЗапроса.Выгрузить()[0].Поле10;
			Если  ЗначениеЗаполнено(Поле1) Тогда
				Если Найти("0123456789", Лев(СокрЛ(Поле1), 1)) > 0 Тогда
					// в Поле1 находится индекс
					Страна = Поле10;
				Иначе
					Страна = Поле1;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Поле10) Тогда
				Страна = Поле10;
			КонецЕсли;
			Страна = СокрЛП(Страна);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + Шапка.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна		
		КонецЕсли;
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		
	Иначе	
		
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации				= ДополнениеКНаименованиюОрганизации 
										+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
	КонецЕсли;
	ИННОрганизации = Прав("            " + ИННОрганизации, 12);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, адрес, номер свидетельства, ИНН
	Если    Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат
		ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		НазваниеКонтрагента				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если Шапка.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			
			ФилиалПокупателя = "";			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
	Иначе
		
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		
		НазваниеКонтрагента				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеКонтрагента         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь)
										  + ", " + НазваниеКонтрагента;
		КонецЕсли;
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		
		Если  Шапка.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  Шапка.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли Шапка.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// вместо адреса - просто страна нерезидента
			Страна = "";
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			Запрос.УстановитьПараметр("Объект", Шапка.Контрагент);
			Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	КонтактнаяИнформация.Поле1,
			               |	КонтактнаяИнформация.Поле10
			               |ИЗ
			               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			               |ГДЕ
			               |	КонтактнаяИнформация.Объект = &Объект
			               |	И КонтактнаяИнформация.Тип = &Тип
			               |	И КонтактнаяИнформация.Вид = &Вид";
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Поле1  = РезультатЗапроса.Выгрузить()[0].Поле1;
				Поле10 = РезультатЗапроса.Выгрузить()[0].Поле10;
				Если  ЗначениеЗаполнено(Поле1) Тогда
					Если Найти("0123456789", Лев(СокрЛ(Поле1), 1)) > 0 Тогда
						// в Поле1 находится индекс
						Страна = Поле10;
					Иначе
						Страна = Поле1;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(Поле10) Тогда
					Страна = Поле10;
				КонецЕсли;
				Страна = СокрЛП(Страна);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + Шапка.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
							
		ИначеЕсли НЕ ЗначениеЗаполнено(ИННКонтрагента)
				 ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли; 
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	
	// кто выписал налоговую накладную нужно формировать в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = "";
	ФИОКтоВыписалНалоговуюНакладную = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", Шапка.КтоВыписалНалоговуюНакладную));
	Если ФИОКтоВыписалНалоговуюНакладную.Количество() > 0 Тогда
		ПечКтоВыписалНалоговуюНакладную =  ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Имя), 1))
										 + ". "
										 + ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Отчество), 1))
										 + ". "
										 + СокрЛП(ФИОКтоВыписалНалоговуюНакладную[0].Фамилия); 
	Иначе
		ПечКтоВыписалНалоговуюНакладную = "" + Шапка.КтоВыписалНалоговуюНакладную;									 
	КонецЕсли;
	
	Для Страница = 1 По 1 Цикл
	
		// Выводим область оригинал/копия
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
		
		// П2 с отрицательной суммой, которые выдаются покупателю и которые выписанны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
		Если Шапка.РегистрируетсяВЕРННПокупателем = Истина Тогда
		    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
		Иначе
			ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом = "Х";
		КонецЕсли;
		
		
		Если (    Шапка.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации
			  ИЛИ Шапка.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
			  ИЛИ Шапка.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
			  ИЛИ Шапка.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС) Тогда
			  
			  ОбластьМакетаЗаголовок.Параметры.Сводная = ?(Шапка.Сводная = Истина, "X", "");	
			  
		КонецЕсли;
		
		Если    Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат 
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		
			ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
		
		КонецЕсли;
		
		// оригинал
		Если  Шапка.ТипПричиныНевыдачиПокупателю > 0 Тогда
			
			// накладная остается у поставщика
			ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
			ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
			ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
			
			// такие П2, даже с отрицательной суммой регистрирует продавец
			ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
			ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом   = "Х";
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата налоговой
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		Для Инд = 1 По 5 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
		КонецЦикла;		
		
		//Дата
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		КонецЦикла; 
		
		// Номер
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
		КонецЦикла; 
		
		// код спец. режима
		ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
		
		ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		// ИНН продавца
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
		КонецЦикла; 
		// филиал
		Для Инд = 1 По 4 Цикл                                                                 
			ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
		КонецЦикла; 
		
		// название покупателя
		ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
		// ИНН покупателя
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
		КонецЦикла; 
		// Филиал
		Для Инд = 1 По 4 Цикл                                                                 
			ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
		КонецЦикла; 
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку накладной вместе с итогами
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ВремТаблица = ТаблицаНоменклатурыКопия.Скопировать();
		ВремТаблица.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС, ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ВремТаблица Цикл
			КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС));
			Если  Шапка.СоглашениеОРазделеПродукции = Истина Тогда
				// данные не заполняются
			ИначеЕсли КолонкаДляСуммы = "20" Тогда
				
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС);
				ОбластьМакета.Параметры.ИзменениеСуммыНДС20    = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС);
				
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.ИзменениеСуммыБезНДС);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9", СтрокаТаблицы.ИзменениеСуммыНДС);
				КонецЕсли;
				
			ИначеЕсли КолонкаДляСуммы = "7" Тогда
				
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДС7 = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС);
				ОбластьМакета.Параметры.ИзменениеСуммыНДС7    = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС);
				
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G111", СтрокаТаблицы.ИзменениеСуммыБезНДС);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111", СтрокаТаблицы.ИзменениеСуммыНДС);
				КонецЕсли;
				
			ИначеЕсли КолонкаДляСуммы = "902" Тогда
				
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Укр = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС);
				
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R007G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				КонецЕсли;
				
			ИначеЕсли КолонкаДляСуммы = "901" Тогда
				
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Эксп = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС);
				
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R006G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				КонецЕсли;
				
			ИначеЕсли КолонкаДляСуммы = "903" Тогда
				
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС);
				
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G11", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ИтогНДС   = 0;
		ВремТаблица.Свернуть("", "ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы из ВремТаблица Цикл
			ИтогНДС    = СтрокаТаблицы.ИзменениеСуммыНДС;
		КонецЦикла;
		ОбластьМакета.Параметры.ИзменениеСуммыНДС  = ОбщегоНазначения.ФорматСумм(ИтогНДС);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R001G03", ИтогНДС);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// рассчитаем поля для подвала заранее
		ПечЛьготаНДС = "";
		Если    Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
			
			// выводим информацию только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			ВремТаблица = ТаблицаНоменклатурыКопия.Скопировать();	
			ВремТаблица.Свернуть("КодЛьготы");
			Для каждого СтрокаТаблицы Из ВремТаблица Цикл
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.КодЛьготы)
					ИЛИ СтрокаТаблицы.КодЛьготы = "99999999" Тогда
					ПечЛьготаНДС = Шапка.ЛьготаНДС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ИННКтоВыписалНН = СокрЛП(Шапка.ИННКтоВыписалНН);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN0", ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",  ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H03",      ОбластьМакетаЗаголовок.Параметры.Сводная);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",  ОбластьМакетаЗаголовок.Параметры.Освобожденная);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	Шапка.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
			
		КонецЕсли;
		
		// Выводим табличную часть
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено наименование номенклатуры - проверьте заполнение документа!';uk='В одному з рядків не заповнене найменування номенклатури - перевірте заповнення документа!'"), СтатусСообщения.Важное);
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если СтрокаТаблицы.ИзменениеКоличества = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеКоличества  = "";
				ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
			КонецЕсли;
			Если СтрокаТаблицы.ИзменениеЦеныБезНДС = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
				ОбластьМакета.Параметры.Количество  		 = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НалоговыйУчет.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
			
			ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
			
			// номенклатура с учетом характеристики
			ОбластьМакета.Параметры.Номенклатура = СокрП("" + СтрокаТаблицы.Номенклатура) 
												 + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")")
			                                     ;
			
			// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
			ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС));
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если    Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат
				ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка
				ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
				ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
				
				Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
					ОбластьМакета.Параметры.КодЛьготы = "99999999";
				КонецЕсли;
				
			Иначе
				
				ОбластьМакета.Параметры.КодЛьготы = "";	
				
			КонецЕсли;
			
			// определим номер строки исходной НН
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НомерСтрокиНН) Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоискаНомераСтрокиННПолная, ОбластьМакета.Параметры);
				СтруктураПоискаНомераСтрокиННПолная.ЦенаБезНДС = Окр(СтрокаТаблицы.ЦенаБезНДС,2);
				
				НайденныеСтроки = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаНомераСтрокиННПолная);
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					ЗаполнитьЗначенияСвойств(СтруктураПоискаНомераСтрокиННСокращенная, ОбластьМакета.Параметры);
					СтруктураПоискаНомераСтрокиННСокращенная.ЦенаБезНДС = Окр(СтрокаТаблицы.ЦенаБезНДС,2);
					
					НайденныеСтроки = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаНомераСтрокиННСокращенная);
				    Если НайденныеСтроки.Количество() > 0 Тогда
						ОбластьМакета.Параметры.НомерСтрокиНН = ПечатнаяФормаНН.Индекс(НайденныеСтроки[0]) + 1;
					КонецЕсли;
				Иначе	
					ОбластьМакета.Параметры.НомерСтрокиНН = ПечатнаяФормаНН.Индекс(НайденныеСтроки[0]) + 1;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеОСумме = СтрокаТаблицы.ИзменениеСуммыБезНДС;
			
			Если Шапка.СоглашениеОРазделеПродукции = Истина Тогда
				
				ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
				ОбластьМакета.Параметры.КодУКТВЭД = "";
				ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
				ОбластьМакета.Параметры.Количество = "";
				ОбластьМакета.Параметры.ЦенаБезНДС = "";
				ОбластьМакета.Параметры.КодСтавки = "";
				ОбластьМакета.Параметры.КодЛьготы = "";
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = "";
				
				ДанныеОСумме = 0;
				
			ИначеЕсли Шапка.Сводная = Истина И Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
				
				ОбластьМакета.Параметры.КодУКТВЭД = "";
				ОбластьМакета.Параметры.Количество = "";
				ОбластьМакета.Параметры.ЦенаБезНДС = "";
				ОбластьМакета.Параметры.КодСтавки = "";
				ОбластьМакета.Параметры.КодЛьготы = "";
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				
				СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
				
				СтрокаСтруктуры.G001		= ОбластьМакета.Параметры.НомерСтрокиНН;
				СтрокаСтруктуры.G2S 		= ОбластьМакета.Параметры.Причина;
				
				СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
				СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
				
				СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
				СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
				
				
				СтрокаСтруктуры.G5  = СтрокаТаблицы.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТаблицы.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				СтрокаСтруктуры.G7  = СтрокаТаблицы.ИзменениеЦеныБезНДС;
				СтрокаСтруктуры.G8  = СтрокаТаблицы.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
				
				СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
				СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
				СтрокаСтруктуры.G010  		= ДанныеОСумме;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
		
		// ДРФО того, кто выписал НН
		Для Инд = 1 По 10 Цикл
			ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
		КонецЦикла; 
		
		ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
		
		ТабДокумент.Вывести(ОбластьМакета);

 	
	КонецЦикла; 

	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Возврат ТабДокумент;
		
	КонецЕсли;

КонецФункции // ПечатьДокументаНалоговыйКодекс2016()

Функция ПечатьДокументаНалоговыйКодекс2015(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета = "Приложение2КНалоговойНакладной") Экспорт	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
	
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G1D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G42");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G9");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G111");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11");
		
		Если     ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
			 
			Сообщить(НСтр("ru = 'Документ является служебным и не может быть выгружен в XML!'; uk = 'Документ є службовим та не може бути вивантажений в XML!'"));
			 
			 // такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	|	ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции КАК СоглашениеОРазделеПродукции, 
	
	|	ВидОперации,
	|	Контрагент,
	|	Организация,
	|	Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	
	|	Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
	
	|	ВидДоговора,
	|   ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	ЭлектронныйДокумент,
	|	РегистрируетсяВЕРННПокупателем,
	
	|   ТипПричиныНевыдачиПокупателю,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	|	ДатаОплаты КАК ДатаОплаты,
	|	НалоговаяНакладная.УслугиНерезидентаДляНехозДеят КАК УслугиНерезидентаДляНехозДеят,
	
	|	ФормаРасчетов,
	|	НалоговаяНакладная.ПоставкаДипПредставительству КАК ПоставкаДипПредставительству,
	|
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную,
	|   Приложение2.СуммаВключаетНДС                  
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2
	|
	|ГДЕ
	|	Приложение2.Ссылка = &ТекущийДокумент";
	//***|   Приложение2.СуммаВключаетНДС                    //*** Е.Г. 13-05-13		
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	УчетнаяПолитикаНеЗадана = Ложь;
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной = Ложь;
	
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	УчетнаяПолитикаНеЗадана = (УчетнаяПолитика = Неопределено);
	
	Если НЕ УчетнаяПолитикаНеЗадана тогда
		ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной  = УчетнаяПолитика.ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной; 
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = УчетнаяПолитика.ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	ДополнениеКНаименованиюОрганизации = "";
	ДополнениеКАдресуОрганизации = "";
	Если  ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Истина
		И ЗначениеЗаполнено(Шапка.ГоловнаяОрганизация) Тогда
		
		СведенияОГоловнойОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнаяОрганизация, Шапка.Дата);
		
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ПолноеНаименование,",Ложь) 			+ " - " ;
		ДополнениеКАдресуОрганизации       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ЮридическийАдресПочтовый,",  Ложь)  + " - " ;
	
	КонецЕсли;
	Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
		СведенияОГоловномКонтрагентеПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнойКонтрагент, Шапка.Дата);	
	КонецЕсли;
	
	// Подготовим таблицы
	Отказ = Ложь;
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ); 
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// свернем подобные строки
	//ТаблицаНоменклатуры.Свернуть(
	//	"ДатаКорректировки, Причина, Номенклатура, Характеристика, КодУКТВЭД, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, ЦенаМестаБезНДСБезСкидкиРегл,  Количество, СтавкаНДС", 
	//	"ИзменениеКоличества, ИзменениеЦеныБезНДССоСкидкойРегл, ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл"
	//);   	***
		ТаблицаНоменклатуры.Свернуть(                                                                                                                                                                        //***//Е.Г. 13-05-13
		"ДатаКорректировки, Причина, Номенклатура, Характеристика, КодУКТВЭД, НомерГТД, ДатаГТД, ТекстДляПечатиВКолонкеКоличество, ЕдиницаИзмерения,ЕдиницаИзмеренияКод, ЦенаМестаБезНДСБезСкидкиРегл,  Количество, СтавкаНДС,Цена,ПроцентСкидкиНаценки", 
		"ИзменениеКоличества, ИзменениеЦеныБезНДССоСкидкойРегл, ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл"
		);  
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМестаБезНДСБезСкидкиРегл.Имя 	 = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеЦеныБезНДССоСкидкойРегл.Имя = "ИзменениеЦеныБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыБезНДСРегл.Имя		 = "ИзменениеСуммыБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыНДСРегл.Имя		 	 = "ИзменениеСуммыНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;                                                           
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени2КНалоговойНакладной_Приложение2_2015_"+ИмяМакета;

	Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2015");
	Если ИмяМакета = "Приложение2КНалоговойНакладнойАльбом" Тогда
		Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2015Альбом");	
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	Макет.КодЯзыкаМакета = "ru";
	
	// определим параметры шапки документа

	//Дата налоговой
	ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(Шапка.Префикс), Прав("    " + Формат(Число(Шапка.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
	КонецЕсли;
	
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	ТекНомерФилиалПриложения = ТекНомерФилиал;
	// если исходная налоговая накладная была с условным спец. режимом "7" или
	// со спец. режимом 4, который в 2015 году не действует
	// то в номере самого приложения 2 этот спец. режим не должен отображаться
	Если    Лев(ТекНомерФилиалПриложения, 1) = "7"
		ИЛИ Лев(ТекНомерФилиалПриложения, 1) = "4" Тогда
		ТекНомерФилиалПриложения = " " + Сред(ТекНомерФилиалПриложения,2);
	КонецЕсли;
		
	//Дата
	ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		
	// Номер
	ТекНомер = Прав("        " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект)), 8);
		
	// номер договора
	ТекНомерДоговора = СокрЛП("" + Шапка.НомерДоговора);
	
	// дата договора
	ТекДатаДоговора = Шапка.ДатаДоговора;
	Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
		ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
	Иначе
		ТекДатаДоговора = "";
	КонецЕсли;
	
	//Дата оплаты
	ТекДатаОплаты = Формат(Шапка.ДатаОплаты, "ДФ=ddMMyyyy");
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Номер свидетельства, Наименование, Адрес
	Если   Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		ИННОрганизации					= ?(Шапка.УслугиНерезидентаДляНехозДеят = Истина, "200000000000", "500000000000");
		
		НазваниеОрганизации				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		АдресОрганизации 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеОрганизации         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь) 		
										  + " - " + НазваниеОрганизации;
		КонецЕсли;

		// вместо адреса - просто страна нерезидента
		АдресОрганизации = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Запрос.УстановитьПараметр("Объект", Шапка.Контрагент);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	КонтактнаяИнформация.Поле1,
		               |	КонтактнаяИнформация.Поле10
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Объект = &Объект
		               |	И КонтактнаяИнформация.Тип = &Тип
		               |	И КонтактнаяИнформация.Вид = &Вид";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Поле1  = РезультатЗапроса.Выгрузить()[0].Поле1;
			Поле10 = РезультатЗапроса.Выгрузить()[0].Поле10;
			Если ЗначениеЗаполнено(Поле1) 
				И Найти("0123456789", Лев(СокрЛ(Поле1), 1)) > 0 Тогда
				// в Поле1 находится индекс
				СтранаНерезидента = Поле10;
			Иначе
				СтранаНерезидента = Поле1;
			КонецЕсли;
			АдресОрганизации = СокрЛП(СтранаНерезидента);
		КонецЕсли;
		
		Если ПустаяСтрока(АдресОрганизации) Тогда
				Сообщить("" + Шапка.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Адрес в налоговой накладной заполнен не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Адреса в податковій накладній заповнена не буде!'"));
		КонецЕсли; 
		
		// остальные данные (телефон) не заполняется
		ТекТелефоныОрганизации = "";
		
	Иначе	
		
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		АдресОрганизации 				= ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
		ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
		
	КонецЕсли;
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	
	// телефон
	ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
	ДлинаСтрокиТелефоновОрганизации = СтрДлина(ТекТелефоныОрганизации);
		
		
	////////////////////////////////////////////
	// покупатель
	
	// Название, адрес, номер свидетельства, ИНН
	Если    Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка
		ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат 
		Тогда
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		НазваниеКонтрагента				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		АдресКонтрагента 				= ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			ИННКонтрагента 				  = "400000000000";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
		ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
		
	Иначе
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		
		НазваниеКонтрагента				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		АдресКонтрагента 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеКонтрагента         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь)
										  + " - " + НазваниеКонтрагента;
			АдресКонтрагента 			= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ЮридическийАдресПочтовый,",  Ложь)	
										  + " - " + АдресКонтрагента;
		КонецЕсли;
		
		НомерСвидетельстваКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		ТекТелефоныКонтрагента        = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
		
		Если  Шапка.ПоставкаДипПредставительству = Истина 
			И Шапка.ТипПричиныНевыдачиПокупателю <=2 Тогда
			
			ИННКонтрагента = "400000000000";
			
		ИначеЕсли Шапка.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// вместо адреса - просто страна нерезидента
			АдресКонтрагента = "";
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			Запрос.УстановитьПараметр("Объект", Шапка.Контрагент);
			Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	КонтактнаяИнформация.Поле1,
			               |	КонтактнаяИнформация.Поле10
			               |ИЗ
			               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			               |ГДЕ
			               |	КонтактнаяИнформация.Объект = &Объект
			               |	И КонтактнаяИнформация.Тип = &Тип
			               |	И КонтактнаяИнформация.Вид = &Вид";
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Поле1  = РезультатЗапроса.Выгрузить()[0].Поле1;
				Поле10 = РезультатЗапроса.Выгрузить()[0].Поле10;
				Если ЗначениеЗаполнено(Поле1) 
				   И Найти("0123456789", Лев(СокрЛ(Поле1), 1)) > 0 Тогда
					// в Поле1 находится индекс
					СтранаНерезидента = Поле10;
				Иначе
					СтранаНерезидента = Поле1;
				КонецЕсли;
				АдресКонтрагента = СокрЛП(СтранаНерезидента);
			КонецЕсли;
			
			Если ПустаяСтрока(АдресКонтрагента) Тогда
				Сообщить("" + Шапка.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Адрес в налоговой накладной заполнен не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Адреса в податковій накладній заповнена не буде!'"));
			КонецЕсли; 
							
			ТекТелефоныКонтрагента = "";

		ИначеЕсли НЕ ЗначениеЗаполнено(ИННКонтрагента)
			     ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			АдресКонтрагента = "";
			ТекТелефоныКонтрагента = "";
			
		КонецЕсли;
		
		
	КонецЕсли; 
	ИННКонтрагента 				  = Прав("            " + ИННКонтрагента, 12);

	// телефон
	ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
	ДлинаСтрокиТелефоновКонтрагентов = СтрДлина(ТекТелефоныКонтрагента);
	
	// кто выписал налоговую накладную нужно формировать в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = "";
	ФИОКтоВыписалНалоговуюНакладную = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", Шапка.КтоВыписалНалоговуюНакладную));
	Если ФИОКтоВыписалНалоговуюНакладную.Количество() > 0 Тогда
		ПечКтоВыписалНалоговуюНакладную =  ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Имя), 1))
										 + ". "
										 + ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Отчество), 1))
										 + ". "
										 + СокрЛП(ФИОКтоВыписалНалоговуюНакладную[0].Фамилия); 
	Иначе
		ПечКтоВыписалНалоговуюНакладную = "" + Шапка.КтоВыписалНалоговуюНакладную;									 
	КонецЕсли;
	
	Для Страница = 1 По 1 Цикл
		
		// Выводим область оригинал/копия
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");

		// П2 с отрицательной суммой, которые выдаются покупателю и которые выписанны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
		Если Шапка.РегистрируетсяВЕРННПокупателем = Истина Тогда
		    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
		КонецЕсли;
		
		ОбластьМакетаЗаголовок.Параметры.СоглашениеОРазделеПродукции = ?(Шапка.СоглашениеОРазделеПродукции = Истина, "Х", "");
		
		// оригинал
		Если  Шапка.ТипПричиныНевыдачиПокупателю > 0 Тогда
			// накладная остается у поставщика
			ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
			ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
			ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
			
			// такие П2, даже с отрицательной суммой регистрирует продавец
			ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата налоговой
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		Для Инд = 1 По 5 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиал_"+Инд]    			= Сред(ТекНомерФилиалПриложения, Инд, 1);
			ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
		КонецЦикла;		
		
		//Дата
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		КонецЦикла; 
		
		// Номер
		Для Инд = 1 По 8 Цикл                                                                 
			ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
		КонецЦикла; 
		
		// название продавца
		ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		
		// адрес продавца
		//ОбластьМакета.Параметры.АдресОрганизации = АдресОрганизации;
		ОбластьМакета.Параметры.АдресОрганизации = "вул.Роганська, будинок 151, м.Харкiв, 61172"; //*** Е.Г. 27-02-2014
		
		// телефон продавца
		Для НомерСимвола = 1 По ДлинаСтрокиТелефоновОрганизации ЦИкл
			ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] =  Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
		КонецЦикла;

		//ИНН продавца
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
		КонецЦикла; 
		
		// название покупателя
		ОбластьМакета.Параметры.НазваниеКонтрагента           = НазваниеКонтрагента;
		
		// адрес покупателя
		ОбластьМакета.Параметры.АдресКонтрагента              = АдресКонтрагента;
		
		// телефон покупателя
		Для НомерСимвола = 1 По ДлинаСтрокиТелефоновКонтрагентов ЦИкл
			ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
		КонецЦикла;
		
		// ИНН покупателя		
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
		КонецЦикла; 
		
		// номер договора
		ОбластьМакета.Параметры.НомерДоговора = ТекНомерДоговора;
		
		// дата договора
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
		КонецЦикла; 
		
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
		КонецЕсли;
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
			
            СтруктураПоказателей.НалоговыйДокумент.Вставить("H_1", ОбластьМакетаЗаголовок.Параметры.СоглашениеОРазделеПродукции);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H_2", ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	 Лев(ТекНомерФилиалПриложения, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	Сред(ТекНомерФилиалПриложения, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	Шапка.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	 Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G1D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G2S",	ТекНомерДоговора);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	ОбластьМакета.Параметры.НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	ОбластьМакета.Параметры.НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCSEL",	ОбластьМакета.Параметры.АдресОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCBUY",	ОбластьМакета.Параметры.АдресКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELSEL",	ТекТелефоныОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELBUY",	ТекТелефоныКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G1S",	ОбластьМакета.Параметры.ВидДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G2D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G3S",	ТекНомерДоговора);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G2S",	ПечКтоВыписалНалоговуюНакладную);
			
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим табличную часть
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если СтрокаТаблицы.ИзменениеКоличества = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеКоличества  = "";
				ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
			КонецЕсли;
			Если СтрокаТаблицы.ИзменениеЦеныБезНДС = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
				ОбластьМакета.Параметры.Количество  		 = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НалоговыйУчет.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
			
			// дата отгрузки/оплаты
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаКорректировки) Тогда
				
				// укажем дату выписки накладной
				ОбластьМакета.Параметры.ДатаКорректировки = Шапка.Дата;
				
			КонецЕсли;
			
			// номенклатура с учетом характеристики
			ОбластьМакета.Параметры.Номенклатура = СокрП("" + СтрокаТаблицы.Номенклатура) 
												 + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")")
			                                     ;
												 
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			////***//Е.Г. 13-05-13
			//Если СтрокаТаблицы.ПроцентСкидкиНаценки=0 тогда
			//	//ЭтотОбъект.СуммаВключаетНДС
			//	ОбластьМакета.Параметры.ЦенаБезНДС=?(Шапка.СуммаВключаетНДС,СтрокаТаблицы.Цена/6*5,СтрокаТаблицы.Цена);
			//КонецЕсли;    
			////***//Конец Е.Г. 13-05-13
            //***//Е.Г. 13-05-13
            Если СтрокаТаблицы.ПроцентСкидкиНаценки=0 тогда
                //ЭтотОбъект.СуммаВключаетНДС
                ОбластьМакета.Параметры.ЦенаБезНДС=?(Шапка.СуммаВключаетНДС,Окр(СтрокаТаблицы.Цена/6*5,2,2),СтрокаТаблицы.Цена);
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
					СтрокаТаблицы.ЦенаБезНДС=?(Шапка.СуммаВключаетНДС,Окр(СтрокаТаблицы.Цена/6*5,2,2) ,СтрокаТаблицы.Цена);
					СтрокаТаблицы.ИзменениеЦеныБезНДС=Окр(СтрокаТаблицы.ИзменениеЦеныБезНДС,2,2);
				КонецЕсли;    	
			Иначе  //***15-01-21 Т.Овчаренко и Е.Г.
				//СтрокаТаблицы.ЦенаБезНДС=Окр(СтрокаТаблицы.ЦенаБезНДС,2,2);
				СтрокаТаблицы.ЦенаБезНДС=Окр(СтрокаТаблицы.Цена/1.2*(100-СтрокаТаблицы.ПроцентСкидкиНаценки)/100,2,2);
				СтрокаТаблицы.ИзменениеЦеныБезНДС=Окр(СтрокаТаблицы.ИзменениеЦеныБезНДС,2,2);
			КонецЕсли;  
			ОбластьМакета.Параметры.ЦенаБезНДС=СтрокаТаблицы.ЦенаБезНДС;
			//СтрокаТаблицы.
            //***//Конец Е.Г. 13-05-13			
					
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
				
				СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
				СтрокаСтруктуры.G1D = ОбластьМакета.Параметры.ДатаКорректировки;
				СтрокаСтруктуры.G2S = ОбластьМакета.Параметры.Причина;
				СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
				
				СтрокаСтруктуры.G4 = ОбластьМакета.Параметры.КодУКТВЭД;
				
				СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
				СтрокаСтруктуры.G42 = ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
				
				СтрокаСтруктуры.G5  = СтрокаТаблицы.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТаблицы.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				СтрокаСтруктуры.G7  = СтрокаТаблицы.ИзменениеЦеныБезНДС;
				СтрокаСтруктуры.G8  = СтрокаТаблицы.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
				
				КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
				Если КолонкаДляСуммы = "20" Тогда
					СтрокаСтруктуры.G9    = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "7" Тогда
					СтрокаСтруктуры.G111  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "0" Тогда
					СтрокаСтруктуры.G10   = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
					СтрокаСтруктуры.G11   = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
		// итоговые строки
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		
		ТаблицаИтогов = ТаблицаНоменклатуры.Скопировать();
		ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС,ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
		
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
		
		КонецЦикла;
		
		ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
			
			КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			Если КолонкаДляСуммы = "20" Тогда
				ОбластьМакета.Параметры["ИзменениеСуммыНДС" + КолонкаДляСуммы] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9",	СтрокаТаблицы.ИзменениеСуммыНДС);
				КонецЕсли;
			ИначеЕсли КолонкаДляСуммы = "7" Тогда
				ОбластьМакета.Параметры["ИзменениеСуммыНДС" + КолонкаДляСуммы] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111",	СтрокаТаблицы.ИзменениеСуммыНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла; 

	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Возврат ТабДокумент;
		
	КонецЕсли;

КонецФункции // ПечатьДокументаНалоговыйКодекс2015

Функция ПечатьДокументаНалоговыйКодекс2014Мес12(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета = "Приложение2КНалоговойНакладной") Экспорт	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
	
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G1D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G9");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G111");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11");
		
		Если     ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
				// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	
	|	ВидОперации,
	|	Контрагент,
	|	Организация,
	|	Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	
	|	Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
	
	|	ВидДоговора,
	|   ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	ЭлектронныйДокумент,
	
	|   ТипПричиныНевыдачиПокупателю,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	|	ДатаОплаты КАК ДатаОплаты,
	|	НалоговаяНакладная.УслугиНерезидентаДляНехозДеят КАК УслугиНерезидентаДляНехозДеят,
	
	|	ФормаРасчетов,
	|	НалоговаяНакладная.ПоставкаДипПредставительству КАК ПоставкаДипПредставительству,
	|
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2
	|
	|ГДЕ
	|	Приложение2.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	УчетнаяПолитикаНеЗадана = Ложь;
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной = Ложь;
	
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	УчетнаяПолитикаНеЗадана = (УчетнаяПолитика = Неопределено);
	
	Если НЕ УчетнаяПолитикаНеЗадана тогда
		ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной  = УчетнаяПолитика.ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной; 
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = УчетнаяПолитика.ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	ДополнениеКНаименованиюОрганизации = "";
	ДополнениеКАдресуОрганизации = "";
	Если  ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Истина
		И ЗначениеЗаполнено(Шапка.ГоловнаяОрганизация) Тогда
		
		СведенияОГоловнойОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнаяОрганизация, Шапка.Дата);
		
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ПолноеНаименование,",Ложь) 			+ " - " ;
		ДополнениеКАдресуОрганизации       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ЮридическийАдресПочтовый,",  Ложь)  + " - " ;
	
	КонецЕсли;
	Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
		СведенияОГоловномКонтрагентеПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнойКонтрагент, Шапка.Дата);	
	КонецЕсли;
	
	// Подготовим таблицы
	Отказ = Ложь;
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ); 
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// свернем подобные строки
	ТаблицаНоменклатуры.Свернуть(
		"ДатаКорректировки, Причина, Номенклатура, Характеристика, КодУКТВЭД, ЕдиницаИзмерения, ЦенаМестаБезНДСБезСкидкиРегл,  Количество, СтавкаНДС", 
		"ИзменениеКоличества, ИзменениеЦеныБезНДССоСкидкойРегл, ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл"
	);   	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМестаБезНДСБезСкидкиРегл.Имя 	 = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеЦеныБезНДССоСкидкойРегл.Имя = "ИзменениеЦеныБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыБезНДСРегл.Имя		 = "ИзменениеСуммыБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыНДСРегл.Имя		 	 = "ИзменениеСуммыНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;                                                           
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени2КНалоговойНакладной_Приложение2_2014_Мес12_"+ИмяМакета;

	Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2014Мес12");
	Если ИмяМакета = "Приложение2КНалоговойНакладнойАльбом" Тогда
		Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2014Мес12Альбом");	
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	Макет.КодЯзыкаМакета = "ru";
	
	// определим параметры шапки документа

	//Дата налоговой
	ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(Шапка.Префикс), Прав("    " + Формат(Число(Шапка.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
	КонецЕсли;
	
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	ТекНомерФилиалПриложения = ТекНомерФилиал;
	// если исходная налоговая накладная была с условным спец. режимом "7"
	// то в номере самого приложения 2 этот спец. режим не должен отображаться
	Если    Лев(ТекНомерФилиалПриложения, 1) = "7" Тогда
		ТекНомерФилиалПриложения = " " + Сред(ТекНомерФилиалПриложения,2);
	КонецЕсли;
		
	//Дата
	ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		
	// Номер
	ТекНомер = Прав("        " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект)), 8);
		
	// номер договора
	ТекНомерДоговора = СокрЛП("" + Шапка.НомерДоговора);
	
	// дата договора
	ТекДатаДоговора = Шапка.ДатаДоговора;
	Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
		ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
	Иначе
		ТекДатаДоговора = "";
	КонецЕсли;
	
	//Дата оплаты
	ТекДатаОплаты = Формат(Шапка.ДатаОплаты, "ДФ=ddMMyyyy");
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Номер свидетельства, Наименование, Адрес
	Если  Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		ИННОрганизации					= ?(Шапка.УслугиНерезидентаДляНехозДеят = Истина, "200000000000", "300000000000");
		НазваниеОрганизации				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		АдресОрганизации 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеОрганизации         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь) 		
										  + " - " + НазваниеОрганизации;
		КонецЕсли;

		// вместо адреса - просто страна нерезидента
		АдресОрганизации = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Запрос.УстановитьПараметр("Объект", Шапка.Контрагент);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	КонтактнаяИнформация.Поле1,
		               |	КонтактнаяИнформация.Поле10
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Объект = &Объект
		               |	И КонтактнаяИнформация.Тип = &Тип
		               |	И КонтактнаяИнформация.Вид = &Вид";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Поле1  = РезультатЗапроса.Выгрузить()[0].Поле1;
			Поле10 = РезультатЗапроса.Выгрузить()[0].Поле10;
			Если ЗначениеЗаполнено(Поле1) 
				И Найти("0123456789", Лев(СокрЛ(Поле1), 1)) > 0 Тогда
				// в Поле1 находится индекс
				СтранаНерезидента = Поле10;
			Иначе
				СтранаНерезидента = Поле1;
			КонецЕсли;
			АдресОрганизации = СокрЛП(СтранаНерезидента);
		КонецЕсли;
		
		Если ПустаяСтрока(АдресОрганизации) Тогда
				Сообщить("" + Шапка.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Адрес в налоговой накладной заполнен не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Адреса в податковій накладній заповнена не буде!'"));
		КонецЕсли; 
		
		// остальные данные (телефон) не заполняется
		ТекТелефоныОрганизации = "";
		
	Иначе	
		
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		АдресОрганизации 				= ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
		ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
		
	КонецЕсли;
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	
	// телефон
	ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
	ДлинаСтрокиТелефоновОрганизации = СтрДлина(ТекТелефоныОрганизации);
		
		
	////////////////////////////////////////////
	// покупатель
	
	// Название, адрес, номер свидетельства, ИНН
	Если    Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		НазваниеКонтрагента				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		АдресКонтрагента 				= ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			ИННКонтрагента 				  = "400000000000";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
		ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
		
	Иначе
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		
		НазваниеКонтрагента				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		АдресКонтрагента 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеКонтрагента         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь)
										  + " - " + НазваниеКонтрагента;
			АдресКонтрагента 			= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ЮридическийАдресПочтовый,",  Ложь)	
										  + " - " + АдресКонтрагента;
		КонецЕсли;
		
		НомерСвидетельстваКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		ТекТелефоныКонтрагента        = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
		
		Если  Шапка.ПоставкаДипПредставительству = Истина 
			И Шапка.ТипПричиныНевыдачиПокупателю <=2 Тогда
			
			ИННКонтрагента = "400000000000";
			
		ИначеЕсли Шапка.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// вместо адреса - просто страна нерезидента
			АдресКонтрагента = "";
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			Запрос.УстановитьПараметр("Объект", Шапка.Контрагент);
			Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	КонтактнаяИнформация.Поле1,
			               |	КонтактнаяИнформация.Поле10
			               |ИЗ
			               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			               |ГДЕ
			               |	КонтактнаяИнформация.Объект = &Объект
			               |	И КонтактнаяИнформация.Тип = &Тип
			               |	И КонтактнаяИнформация.Вид = &Вид";
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Поле1  = РезультатЗапроса.Выгрузить()[0].Поле1;
				Поле10 = РезультатЗапроса.Выгрузить()[0].Поле10;
				Если ЗначениеЗаполнено(Поле1) 
				   И Найти("0123456789", Лев(СокрЛ(Поле1), 1)) > 0 Тогда
					// в Поле1 находится индекс
					СтранаНерезидента = Поле10;
				Иначе
					СтранаНерезидента = Поле1;
				КонецЕсли;
				АдресКонтрагента = СокрЛП(СтранаНерезидента);
			КонецЕсли;
			
			Если ПустаяСтрока(АдресКонтрагента) Тогда
				Сообщить("" + Шапка.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Адрес в налоговой накладной заполнен не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Адреса в податковій накладній заповнена не буде!'"));
			КонецЕсли; 
							
			ТекТелефоныКонтрагента = "";

		ИначеЕсли НЕ ЗначениеЗаполнено(ИННКонтрагента)
			     ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
			
			ИННКонтрагента = "400000000000";
			НазваниеКонтрагента = "Неплатник";
			АдресКонтрагента = "";
			ТекТелефоныКонтрагента = "";
			
		КонецЕсли;
		
		
	КонецЕсли; 
	ИННКонтрагента 				  = Прав("            " + ИННКонтрагента, 12);

	// телефон
	ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
	ДлинаСтрокиТелефоновКонтрагентов = СтрДлина(ТекТелефоныКонтрагента);
	
	// кто выписал налоговую накладную нужно формировать в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = "";
	ФИОКтоВыписалНалоговуюНакладную = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", Шапка.КтоВыписалНалоговуюНакладную));
	Если ФИОКтоВыписалНалоговуюНакладную.Количество() > 0 Тогда
		ПечКтоВыписалНалоговуюНакладную =  ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Имя), 1))
										 + ". "
										 + ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Отчество), 1))
										 + ". "
										 + СокрЛП(ФИОКтоВыписалНалоговуюНакладную[0].Фамилия); 
	Иначе
		ПечКтоВыписалНалоговуюНакладную = "" + Шапка.КтоВыписалНалоговуюНакладную;									 
	КонецЕсли;
	
	Для Страница = 1 По 2 Цикл
		
		Если  Страница = 2 Тогда
			Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка 
				ИЛИ Шапка.ЭлектронныйДокумент Тогда
				// печатаем в одном экземпляре
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
	
		// Выводим область оригинал/копия
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
		ОбластьМакетаЗаголовок.Параметры.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Шапка.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
		ОбластьМакетаЗаголовок.Параметры.ЭлектронныйДокумент 							 = Шапка.ЭлектронныйДокумент;
		Если Шапка.ЭлектронныйДокумент = Ложь Тогда
			Если Страница = 2 Тогда
				// копия - всегда остается у продавца
				ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца  = "Х";
				
			Иначе
				
				// оргинал
				Если  Шапка.ТипПричиныНевыдачиПокупателю = 0 ИЛИ Шапка.ТипПричиныНевыдачиПокупателю = 1 Тогда
					
					// НН, для которой тип причины невыдачи - продажа ниже обычных цен выдается покупателю, вторая пара накладных (собстенно на превышение) - нет
					ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
				Иначе
					
					// накладная остается у поставщика
					ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
					ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
					ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата налоговой
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		Для Инд = 1 По 5 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиал_"+Инд]    			= Сред(ТекНомерФилиалПриложения, Инд, 1);
			ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
		КонецЦикла;		
		
		//Дата
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		КонецЦикла; 
		
		// Номер
		Для Инд = 1 По 8 Цикл                                                                 
			ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
		КонецЦикла; 
		
		// название продавца
		ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		
		// адрес продавца
		//ОбластьМакета.Параметры.АдресОрганизации = АдресОрганизации;
		ОбластьМакета.Параметры.АдресОрганизации = "вул.Роганська, будинок 151, м.Харкiв, 61172"; //*** Е.Г. 27-02-2014
		
		// телефон продавца
		Для НомерСимвола = 1 По ДлинаСтрокиТелефоновОрганизации ЦИкл
			ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] =  Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
		КонецЦикла;

		//ИНН продавца
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
		КонецЦикла; 
		
		// название покупателя
		ОбластьМакета.Параметры.НазваниеКонтрагента           = НазваниеКонтрагента;
		
		// адрес покупателя
		ОбластьМакета.Параметры.АдресКонтрагента              = АдресКонтрагента;
		
		// телефон покупателя
		Для НомерСимвола = 1 По ДлинаСтрокиТелефоновКонтрагентов ЦИкл
			ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
		КонецЦикла;
		
		// ИНН покупателя		
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
		КонецЦикла; 
		
		// номер договора
		ОбластьМакета.Параметры.НомерДоговора = ТекНомерДоговора;
		
		// дата договора
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
		КонецЦикла; 
		
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
		КонецЕсли;
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG",	ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HEL",	Формат(ОбластьМакетаЗаголовок.Параметры.ЭлектронныйДокумент, "БЛ=; БИ=Х"));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HCOPY",	ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	 Лев(ТекНомерФилиалПриложения, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	Сред(ТекНомерФилиалПриложения, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	Шапка.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	 Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G1D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G2S",	ТекНомерДоговора);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	ОбластьМакета.Параметры.НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	ОбластьМакета.Параметры.НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCSEL",	ОбластьМакета.Параметры.АдресОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCBUY",	ОбластьМакета.Параметры.АдресКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELSEL",	ТекТелефоныОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELBUY",	ТекТелефоныКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G1S",	ОбластьМакета.Параметры.ВидДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G2D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G3S",	ТекНомерДоговора);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G1D",	Шапка.Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G2S",	ПечКтоВыписалНалоговуюНакладную);
			
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим табличную часть
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если СтрокаТаблицы.ИзменениеКоличества = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеКоличества  = "";
				ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
			КонецЕсли;
			Если СтрокаТаблицы.ИзменениеЦеныБезНДС = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
				ОбластьМакета.Параметры.Количество  		 = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
			
			// дата отгрузки/оплаты
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаКорректировки) Тогда
				
				// укажем дату выписки накладной
				ОбластьМакета.Параметры.ДатаКорректировки = Шапка.Дата;
				
			КонецЕсли;
			
			// номенклатура с учетом характеристики
			ОбластьМакета.Параметры.Номенклатура = СокрП("" + СтрокаТаблицы.Номенклатура) 
												 + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")")
			                                     ;
												 
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
					
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
				
				СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
				СтрокаСтруктуры.G1D = ОбластьМакета.Параметры.ДатаКорректировки;
				СтрокаСтруктуры.G2S = ОбластьМакета.Параметры.Причина;
				СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
				
				СтрокаСтруктуры.G4 = ОбластьМакета.Параметры.КодУКТВЭД;
				
				СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
				
				СтрокаСтруктуры.G5  = СтрокаТаблицы.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТаблицы.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				СтрокаСтруктуры.G7  = СтрокаТаблицы.ИзменениеЦеныБезНДС;
				СтрокаСтруктуры.G8  = СтрокаТаблицы.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
				
				КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
				Если КолонкаДляСуммы = "20" Тогда
					СтрокаСтруктуры.G9  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "0" Тогда
					СтрокаСтруктуры.G111  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "7" Тогда
					СтрокаСтруктуры.G10  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
					СтрокаСтруктуры.G11 = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
		// итоговые строки
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		
		ТаблицаИтогов = ТаблицаНоменклатуры.Скопировать();
		ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС,ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
		
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
		
		КонецЦикла;
		
		ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
			
			КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			Если КолонкаДляСуммы = "20" Тогда
				ОбластьМакета.Параметры["ИзменениеСуммыНДС" + КолонкаДляСуммы] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9",	СтрокаТаблицы.ИзменениеСуммыНДС);
				КонецЕсли;
			ИначеЕсли КолонкаДляСуммы = "7" Тогда
				ОбластьМакета.Параметры["ИзменениеСуммыНДС" + КолонкаДляСуммы] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111",	СтрокаТаблицы.ИзменениеСуммыНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;
		
		ОбластьМакета.Параметры.Дата  					= Формат(Шапка.Дата, "ДФ=dd.MM.yyyy" );
		ОбластьМакета.Параметры.ДатаНалоговойНакладной  = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=dd.MM.yyyy" );
		
		ТекНомерФилиалПодвалПриложение = "";
		ТекНомерФилиалПодвалНалоговая = "";
		Если ЗначениеЗаполнено(НомерФилиала) Тогда
			ТекНомерФилиалПодвалПриложение = "/" + СокрЛ(НомерФилиала);
			ТекНомерФилиалПодвалНалоговая  = "/" + СокрЛ(НомерФилиала);
		КонецЕсли;
		
		КодСпецРежимаНалоговая  = КодСпецРежима;
		КодСпецРежимаПриложение = ?(КодСпецРежима = "7", " ", КодСпецРежима);
		
		Если ЗначениеЗаполнено(КодСпецРежимаПриложение + ТекНомерФилиалПодвалПриложение) Тогда
			ТекНомерФилиалПодвалПриложение = "/" + КодСпецРежимаПриложение + ТекНомерФилиалПодвалПриложение;
		КонецЕсли;
		Если ЗначениеЗаполнено(КодСпецРежимаНалоговая + ТекНомерФилиалПодвалНалоговая) Тогда
			ТекНомерФилиалПодвалНалоговая = "/" + КодСпецРежимаНалоговая + ТекНомерФилиалПодвалНалоговая;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Номер  					 = СокрЛП(ТекНомер 		    + ТекНомерФилиалПодвалПриложение);
		ОбластьМакета.Параметры.НомерНалоговойНакладной  = СокрЛП(ТекНомерНалоговой + ТекНомерФилиалПодвалНалоговая);
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
	КонецЦикла; 

	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Возврат ТабДокумент;
		
	КонецЕсли;

КонецФункции // ПечатьДокументаНалоговыйКодекс2014Мес12()

Функция ПечатьДокументаНалоговыйКодекс2014(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ИмяМакета = "Приложение2КНалоговойНакладной") Экспорт	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
	
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G1D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G9");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11");
		
		Если     ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
				// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
			
		КонецЕсли;
		
		Если глЗначениеПеременной("ДатаНачалаИспользованияФормыННПоЛекарствам") > Дата  Тогда
			Если ВДокументеЕстьСтавкаНДС7ИДругиеСтавки() Тогда
				Возврат СтруктураПоказателей;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	
	|	ВидОперации,
	|	Контрагент,
	|	Организация,
	|	Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	
	|	Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
	
	|	ВидДоговора,
	|   ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	ЭлектронныйДокумент,
	
	|   ТипПричиныНевыдачиПокупателю,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	|	ДатаОплаты КАК ДатаОплаты,
	|	НалоговаяНакладная.УслугиНерезидентаДляНехозДеят КАК УслугиНерезидентаДляНехозДеят,
	
	|	ФормаРасчетов,
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2
	|
	|ГДЕ
	|	Приложение2.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	УчетнаяПолитикаНеЗадана = Ложь;
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной = Ложь;
	
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	УчетнаяПолитикаНеЗадана = (УчетнаяПолитика = Неопределено);
	
	Если НЕ УчетнаяПолитикаНеЗадана тогда
		ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной  = УчетнаяПолитика.ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной; 
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = УчетнаяПолитика.ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	ДополнениеКНаименованиюОрганизации = "";
	ДополнениеКАдресуОрганизации = "";
	Если  ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Истина
		И ЗначениеЗаполнено(Шапка.ГоловнаяОрганизация) Тогда
		
		СведенияОГоловнойОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнаяОрганизация, Шапка.Дата);
		
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ПолноеНаименование,",Ложь) 			+ " - " ;
		ДополнениеКАдресуОрганизации       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ЮридическийАдресПочтовый,",  Ложь)  + " - " ;
	
	КонецЕсли;
	Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
		СведенияОГоловномКонтрагентеПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнойКонтрагент, Шапка.Дата);	
	КонецЕсли;
	
	// Подготовим таблицы
	Отказ = Ложь;
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ); 
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// свернем подобные строки
	ТаблицаНоменклатуры.Свернуть(
		"ДатаКорректировки, Причина, Номенклатура, Характеристика, КодУКТВЭД, ЕдиницаИзмерения, ЦенаМестаБезНДСБезСкидкиРегл,  Количество, СтавкаНДС", 
		"ИзменениеКоличества, ИзменениеЦеныБезНДССоСкидкойРегл, ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл"
	);   	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМестаБезНДСБезСкидкиРегл.Имя 	 = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеЦеныБезНДССоСкидкойРегл.Имя = "ИзменениеЦеныБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыБезНДСРегл.Имя		 = "ИзменениеСуммыБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыНДСРегл.Имя		 	 = "ИзменениеСуммыНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;                                                           
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени2КНалоговойНакладной_Приложение2_2014_"+ИмяМакета;

	Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2014");
	Если ИмяМакета = "Приложение2КНалоговойНакладнойАльбом" Тогда
		Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2014Альбом");	
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	Макет.КодЯзыкаМакета = "ru";
	
	// определим параметры шапки документа

	//Дата налоговой
	ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(Шапка.Префикс), Прав("    " + Формат(Число(Шапка.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
	КонецЕсли;
		
	//Дата
	ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		
	// Номер
	ТекНомер = Прав("        " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект)), 8);
		
	// номер договора
	ТекНомерДоговора = СокрЛП("" + Шапка.НомерДоговора);
	
	// дата договора
	ТекДатаДоговора = Шапка.ДатаДоговора;
	Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
		ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
	Иначе
		ТекДатаДоговора = "";
	КонецЕсли;
	
	//Дата оплаты
	ТекДатаОплаты = Формат(Шапка.ДатаОплаты, "ДФ=ddMMyyyy");
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Номер свидетельства, Наименование, Адрес
	Если  Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		ИННОрганизации					= ?(Шапка.УслугиНерезидентаДляНехозДеят = Истина, "200000000000", "300000000000");
		НазваниеОрганизации				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		АдресОрганизации 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеОрганизации         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь) 		
										  + " - " + НазваниеОрганизации;
			АдресОрганизации 			= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ЮридическийАдресПочтовый,",  Ложь)	
										  + " - " + АдресОрганизации;
		КонецЕсли;
		
	Иначе	
		
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		АдресОрганизации 				= ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
	КонецЕсли;
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	
	// телефон
	ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
	ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
	ДлинаСтрокиТелефоновОрганизации = СтрДлина(ТекТелефоныОрганизации);
		
		
	////////////////////////////////////////////
	// покупатель
	
	// Название, адрес, номер свидетельства, ИНН
	Если    Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		НазваниеКонтрагента				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		АдресКонтрагента 				= ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			ИННКонтрагента 				  = "400000000000";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
	Иначе
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		
		НазваниеКонтрагента				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		АдресКонтрагента 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеКонтрагента         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь)
										  + " - " + НазваниеКонтрагента;
			АдресКонтрагента 			= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ЮридическийАдресПочтовый,",  Ложь)	
										  + " - " + АдресКонтрагента;
		КонецЕсли;
		
		НомерСвидетельстваКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		
		Если НЕ ЗначениеЗаполнено(ИННКонтрагента)
			ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
			ИННКонтрагента = "400000000000";
		КонецЕсли; 
		
	КонецЕсли; 
	ИННКонтрагента 				  = Прав("            " + ИННКонтрагента, 12);

	// телефон
	ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
	ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
	ДлинаСтрокиТелефоновКонтрагентов = СтрДлина(ТекТелефоныКонтрагента);
	
	// кто выписал налоговую накладную нужно формировать в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = "";
	ФИОКтоВыписалНалоговуюНакладную = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", Шапка.КтоВыписалНалоговуюНакладную));
	Если ФИОКтоВыписалНалоговуюНакладную.Количество() > 0 Тогда
		ПечКтоВыписалНалоговуюНакладную =  ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Имя), 1))
										 + ". "
										 + ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Отчество), 1))
										 + ". "
										 + СокрЛП(ФИОКтоВыписалНалоговуюНакладную[0].Фамилия); 
	Иначе
		ПечКтоВыписалНалоговуюНакладную = "" + Шапка.КтоВыписалНалоговуюНакладную;									 
	КонецЕсли;
	
	Для Страница = 1 По 2 Цикл
		
		Если  Страница = 2 Тогда
			Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка 
				ИЛИ Шапка.ЭлектронныйДокумент Тогда
				// печатаем в одном экземпляре
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
	
		// Выводим область оригинал/копия
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
		ОбластьМакетаЗаголовок.Параметры.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Шапка.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
		ОбластьМакетаЗаголовок.Параметры.ЭлектронныйДокумент 							 = Шапка.ЭлектронныйДокумент;
		Если Шапка.ЭлектронныйДокумент = Ложь Тогда
			Если Страница = 2 Тогда
				// копия - всегда остается у продавца
				ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца  = "Х";
				
			Иначе
				
				// оргинал
				Если  Шапка.ТипПричиныНевыдачиПокупателю = 0 ИЛИ Шапка.ТипПричиныНевыдачиПокупателю = 1 Тогда
					
					// НН, для которой тип причины невыдачи - продажа ниже обычных цен выдается покупателю, вторая пара накладных (собстенно на превышение) - нет
					ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
				Иначе
					
					// накладная остается у поставщика
					ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
					ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
					ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата налоговой
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		Для Инд = 1 По 5 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиал_"+Инд]    			= Сред(ТекНомерФилиал, Инд, 1);
			ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиал, Инд, 1);
		КонецЦикла;		
		
		//Дата
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		КонецЦикла; 
		
		// Номер
		Для Инд = 1 По 8 Цикл                                                                 
			ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
		КонецЦикла; 
		
		// название продавца
		ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		
		// адрес продавца
		//ОбластьМакета.Параметры.АдресОрганизации = АдресОрганизации;
		ОбластьМакета.Параметры.АдресОрганизации = "вул.Роганська, будинок 151, м.Харкiв, 61172"; //*** Е.Г. 27-02-2014
		
		// телефон продавца
		Для НомерСимвола = 1 По ДлинаСтрокиТелефоновОрганизации ЦИкл
			ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] =  Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
		КонецЦикла;

		//ИНН продавца
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
		КонецЦикла; 
		
		// название покупателя
		ОбластьМакета.Параметры.НазваниеКонтрагента           = НазваниеКонтрагента;
		
		// адрес покупателя
		ОбластьМакета.Параметры.АдресКонтрагента              = АдресКонтрагента;
		
		// телефон покупателя
		Для НомерСимвола = 1 По ДлинаСтрокиТелефоновКонтрагентов ЦИкл
			ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
		КонецЦикла;
		
		// ИНН покупателя		
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
		КонецЦикла; 
		
		// номер договора
		ОбластьМакета.Параметры.НомерДоговора = ТекНомерДоговора;
		
		// дата договора
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
		КонецЦикла; 
		
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаОплаты_"+Инд]    = Сред(ТекДатаОплаты, Инд, 1);
		КонецЦикла; 
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
		КонецЕсли;
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG",	ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HEL",	Формат(ОбластьМакетаЗаголовок.Параметры.ЭлектронныйДокумент, "БЛ=; БИ=Х"));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	Лев(ТекНомерФилиал, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	Сред(ТекНомерФилиал, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	Шапка.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиал, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиал, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G1D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G2S",	ТекНомерДоговора);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	ОбластьМакета.Параметры.НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	ОбластьМакета.Параметры.НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCSEL",	ОбластьМакета.Параметры.АдресОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCBUY",	ОбластьМакета.Параметры.АдресКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELSEL",	ТекТелефоныОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELBUY",	ТекТелефоныКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G1S",	ОбластьМакета.Параметры.ВидДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G2D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G3S",	ТекНомерДоговора);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H03G1S",	ОбластьМакета.Параметры.ФормаРасчетов);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H04G1D",	Шапка.ДатаОплаты);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G1D",	Шапка.Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G2S",	ПечКтоВыписалНалоговуюНакладную);
			
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим табличную часть
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если СтрокаТаблицы.ИзменениеКоличества = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеКоличества  = "";
				ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
			КонецЕсли;
			Если СтрокаТаблицы.ИзменениеЦеныБезНДС = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
				ОбластьМакета.Параметры.Количество  		 = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
			
			// дата отгрузки/оплаты
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаКорректировки) Тогда
				
				// укажем дату выписки накладной
				ОбластьМакета.Параметры.ДатаКорректировки = Шапка.Дата;
				
			КонецЕсли;
			
			// номенклатура с учетом характеристики
			ОбластьМакета.Параметры.Номенклатура = СокрП("" + СтрокаТаблицы.Номенклатура) 
												 + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")")
			                                     ;
												 
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
					
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
				
				СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
				СтрокаСтруктуры.G1D = ОбластьМакета.Параметры.ДатаКорректировки;
				СтрокаСтруктуры.G2S = ОбластьМакета.Параметры.Причина;
				СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
				
				СтрокаСтруктуры.G4 = ОбластьМакета.Параметры.КодУКТВЭД;
				
				СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
				
				СтрокаСтруктуры.G5  = СтрокаТаблицы.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТаблицы.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				СтрокаСтруктуры.G7  = СтрокаТаблицы.ИзменениеЦеныБезНДС;
				СтрокаСтруктуры.G8  = СтрокаТаблицы.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
				
				КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
				Если КолонкаДляСуммы = "20" Тогда
					СтрокаСтруктуры.G9  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "0" Тогда
					СтрокаСтруктуры.G10  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
					СтрокаСтруктуры.G11 = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
		// итоговые строки
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		
		ТаблицаИтогов = ТаблицаНоменклатуры.Скопировать();
		ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС,ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
		
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
		
		КонецЦикла;
		
		ТаблицаИтогов.Свернуть("", "ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
			ОбластьМакета.Параметры.ИзменениеСуммыНДС = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9",	СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;
		
		ОбластьМакета.Параметры.Дата  					= Формат(Шапка.Дата, "ДФ=dd.MM.yyyy" );
		ОбластьМакета.Параметры.ДатаНалоговойНакладной  = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=dd.MM.yyyy" );
		
		ТекНомерФилиалПодвал = "";
		Если ЗначениеЗаполнено(НомерФилиала) Тогда
			ТекНомерФилиалПодвал = "/" + СокрЛ(НомерФилиала);
		КонецЕсли;
		Если ЗначениеЗаполнено(КодСпецРежима + ТекНомерФилиалПодвал) Тогда
			ТекНомерФилиалПодвал = "/" + КодСпецРежима + ТекНомерФилиалПодвал;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Номер  					 = СокрЛП(ТекНомер 		    + ТекНомерФилиалПодвал);
		ОбластьМакета.Параметры.НомерНалоговойНакладной  = СокрЛП(ТекНомерНалоговой + ТекНомерФилиалПодвал);
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
	КонецЦикла; 

	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Возврат ТабДокумент;
		
	КонецЕсли;

КонецФункции // ПечатьДокументаНалоговыйКодекс2014()

// Функция формирует табличный документ с регламентированной печатной формой 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокументаНалоговыйКодекс2012(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы
											,ИмяМакета = "Приложение2КНалоговойНакладной"
											) Экспорт	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	Если НЕ ТолькоФормироватьСтруктуруПоказателейПечатнойФормы 	= Истина
		  И ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных 	= Истина
		  И ВключенаВЕдиныйРеестрНалоговыхНакладных 			= Ложь Тогда
	
		Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ %1 должна быть зарегистрирована в Едином реестре!
				                       |Нельзя выдавать покупателю печатный документ до регистрации в Едином реестре!'; uk = 'Документ %1 має бути зареєстрована у Єдиному реєстрі податкових накладних!
				                       |Не можна видавати покупцю друкований документ до реєстрації у Єдиному реєстрі!'")
									   , Ссылка)
			   , СтатусСообщения.ОченьВажное);			
	
	КонецЕсли;

	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
	
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G1D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G9");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11");
		
		Если     ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	
	|	ВидОперации,
	|	Контрагент,
	|	Организация,
	|	Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	
	|	ВидДоговора,
	|   ВключенаВЕдиныйРеестрНалоговыхНакладных,
	|   ТипПричиныНевыдачиПокупателю,
	|	СпецРежимНалогообложения,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	
	|	НалоговаяНакладная.УслугиНерезидентаДляНехозДеят КАК УслугиНерезидентаДляНехозДеят,
	|	ДатаОплаты КАК ДатаОплаты,
	|	Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
	|	ФормаРасчетов,
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную.Представление КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2
	|
	|ГДЕ
	|	Приложение2.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СимволДляПустыхПоказателей = "X";
	ВыводитьНомерДоговораБезКлеточек = Истина;
	ПечататьКодУКТВЭДБезПробелов = Ложь;
	ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной = Ложь;
	ПечататьДатыБезРазделителей = Ложь;
	ДополнитьНазваниеНомеромГТД = Ложь;
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	УчетнаяПолитикаНеЗадана = (УчетнаяПолитика = Неопределено);
	Если НЕ УчетнаяПолитикаНеЗадана тогда
		СимволДляПустыхПоказателей = УчетнаяПолитика.СимволПустыхПоказателейВНалоговойНакладной; 
		ПечататьКодУКТВЭДБезПробелов = УчетнаяПолитика.ПечататьКодУКТВЭДБезПробелов; 
		ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной = УчетнаяПолитика.ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной; 
		ПечататьДатыБезРазделителей    	 = НЕ УчетнаяПолитика.ПечататьДатыВНалоговыхНакладныхСРазделителями; 
		ДополнитьНазваниеНомеромГТД    	 = НЕ УчетнаяПолитика.НеДополнятьНаименованиеНомеромГТДВНалоговыхДокументах; 
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = УчетнаяПолитика.ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	ДополнениеКНаименованиюОрганизации = "";
	ДополнениеКАдресуОрганизации = "";
	Если  ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Истина
		И ЗначениеЗаполнено(Шапка.ГоловнаяОрганизация) Тогда
		
		СведенияОГоловнойОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнаяОрганизация, Шапка.Дата, Истина, Неопределено, "uk");
		
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ПолноеНаименование,",Ложь) 			+ " - " ;
		ДополнениеКАдресуОрганизации       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации,    "ЮридическийАдресПочтовый,",  Ложь)  + " - " ;
	
	КонецЕсли;
	Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
		СведенияОГоловномКонтрагентеПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ГоловнойКонтрагент, Шапка.Дата, Истина, Неопределено, "uk");	
	КонецЕсли;
	
	// Подготовим таблицы
	Отказ = Ложь;
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ); 
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// свернем подобные строки
	ТаблицаНоменклатуры.Свернуть(
		"ДатаКорректировки, Причина, Номенклатура, Характеристика, КодУКТВЭД, НомерГТД, ДатаГТД, ТекстДляПечатиВКолонкеКоличество, ЕдиницаИзмерения, ЦенаМестаБезНДСБезСкидкиРегл,  Количество, СтавкаНДС", 
		"ИзменениеКоличества, ИзменениеЦеныБезНДССоСкидкойРегл, ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл"
	);   	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМестаБезНДСБезСкидкиРегл.Имя 	 = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеЦеныБезНДССоСкидкойРегл.Имя = "ИзменениеЦеныБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыБезНДСРегл.Имя		 = "ИзменениеСуммыБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыНДСРегл.Имя		 	 = "ИзменениеСуммыНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;                                                               
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени2КНалоговойНакладной_Приложение2_2011_"+ИмяМакета;
	
	Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2012");
	Если ИмяМакета = "Приложение2КНалоговойНакладнойАльбом" Тогда
		Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2012Альбом");
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	Макет.КодЯзыкаМакета = "ru";
	

	//Дата налоговой
	ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(Шапка.Префикс), Прав("0000" + СокрЛП(Шапка.Префикс), 4), "");  //число, сведущими нулями, 4 символа 
	Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
	КонецЕсли;
		
	//Дата
	ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		
	// Номер
	ТекНомер = Прав("        " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект)), 8);
		
	// номер договора
	ТекНомерДоговора = СокрЛП("" + Шапка.НомерДоговора);
	
	// дата договора
	ТекДатаДоговора = Шапка.ДатаДоговора;
	Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
		ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
	Иначе
		ТекДатаДоговора = "";
	КонецЕсли;
	
	//Дата оплаты
	ТекДатаОплаты = Формат(Шапка.ДатаОплаты, "ДФ=ddMMyyyy");
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Номер свидетельства, Наименование, Адрес
	Если  Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		// налоговые реквизиты не указыватюся
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, Истина, Неопределено, "uk");
		ИННОрганизации					= ?(Шапка.УслугиНерезидентаДляНехозДеят = Истина, "200000000000", "300000000000");
		НомерСвидетельстваОрганизации	= "0";
		НазваниеОрганизации				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		АдресОрганизации 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеОрганизации         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь) 		
										  + " - " + НазваниеОрганизации;
			АдресОрганизации 			= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ЮридическийАдресПочтовый,",  Ложь)	
										  + " - " + АдресОрганизации;
		КонецЕсли;
		
	Иначе	
		
		СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, Истина, Неопределено, "uk");
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НомерСвидетельстваОрганизации 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "НомерСвидетельства,",Ложь);	
		НазваниеОрганизации				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		АдресОрганизации 				= ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
	КонецЕсли;
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	НомерСвидетельстваОрганизации = Прав("            " + НомерСвидетельстваОрганизации, 10);
	
	// телефон
	ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
	ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
	ДлинаСтрокиТелефоновОрганизации = СтрДлина(ТекТелефоныОрганизации);
		
		
	////////////////////////////////////////////
	// покупатель
	
	// Название, адрес, номер свидетельства, ИНН
	Если    Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, Истина, Неопределено, "uk");
		НазваниеКонтрагента				= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		АдресКонтрагента 				= ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
			НомерСвидетельстваКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
		    НомерСвидетельстваКонтрагента = "0";
			ИННКонтрагента 				  = "0";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + Шапка.НаименованиеФилиала;	
		КонецЕсли;
		
	Иначе
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, Истина, Неопределено, "uk");
		
		НазваниеКонтрагента				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ПолноеНаименование,",Ложь);
		АдресКонтрагента 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		Если Шапка.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
			НазваниеКонтрагента         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ПолноеНаименование,",Ложь)
										  + " - " + НазваниеКонтрагента;
			АдресКонтрагента 			= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагентеПокупателя,  "ЮридическийАдресПочтовый,",  Ложь)	
										  + " - " + АдресКонтрагента;
		КонецЕсли;
		
		НомерСвидетельстваКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		
		Если НЕ ЗначениеЗаполнено(НомерСвидетельстваКонтрагента)
			ИЛИ Найти("0123456789",Лев(СокрЛ(НомерСвидетельстваКонтрагента),1)) = 0 Тогда
			НомерСвидетельстваКонтрагента = "0";
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(ИННКонтрагента)
			ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
			ИННКонтрагента = "0";
		КонецЕсли; 
		
	КонецЕсли; 
	НомерСвидетельстваКонтрагента = Прав("            " + НомерСвидетельстваКонтрагента, 10);
	ИННКонтрагента 				  = Прав("            " + ИННКонтрагента, 12);
	Если  Дата >= '2014-01-01'
		И СокрЛП(НомерСвидетельстваКонтрагента) = "0"
		И НЕ СокрЛП(ИННКонтрагента) = "0" Тогда
		НомерСвидетельстваКонтрагента = "";	
	КонецЕсли;
	
	// телефон
	ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
	ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
	ДлинаСтрокиТелефоновКонтрагентов = СтрДлина(ТекТелефоныКонтрагента);
	
    Для Страница = 1 По 2 Цикл
		
		Если  Страница = 2
			И ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
			// печатаем в одном экземпляре
			Продолжить;
		КонецЕсли;
	
		// Выводим область оригинал/копия
		Если Страница = 1 Тогда
			ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
			
			ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = Шапка.ВключенаВЕдиныйРеестрНалоговыхНакладных;
			
			Если Шапка.ТипПричиныНевыдачиПокупателю = 0  Тогда
				
				ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
			ИначеЕсли Шапка.ТипПричиныНевыдачиПокупателю = 1  Тогда	
				
				// это ошибка, может быть из-за того, что по изначальной накладной стоял такой тип причины
				ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
			Иначе
				
				// накладная остается у поставщика
				ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца = "Х";
				ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
				ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		ИначеЕсли Страница = 2 Тогда
			ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("ПерваяКопия");
			ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = Шапка.ВключенаВЕдиныйРеестрНалоговыхНакладных;
			ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		КонецЕсли;

		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		
		//Дата налоговой
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		Для Инд = 1 По 5 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиал_"+Инд]    			= Сред(ТекНомерФилиал, Инд, 1);
			ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиал, Инд, 1);
		КонецЦикла;		
		
		//Дата
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		КонецЦикла; 
		
		// Номер
		Для Инд = 1 По 8 Цикл                                                                 
			ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
		КонецЦикла; 
		
		// название продавца
		ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		
		// адрес продавца
		//ОбластьМакета.Параметры.АдресОрганизации = АдресОрганизации;
		ОбластьМакета.Параметры.АдресОрганизации = "вул.Роганська, будинок 151, м.Харкiв, 61172"; //*** Е.Г. 27-02-2014
		
		// телефон продавца
		Для НомерСимвола = 1 По ДлинаСтрокиТелефоновОрганизации ЦИкл
			ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] =  Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
		КонецЦикла;

		//ИНН продавца
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
		КонецЦикла; 
		
		// номер свидетельства продавца
		ОбластьМакета.Параметры["НомерСвидетельстваОрганизации"] = НомерСвидетельстваОрганизации;
		
		
		// название покупателя
		ОбластьМакета.Параметры.НазваниеКонтрагента           = НазваниеКонтрагента;
		
		// адрес покупателя
		ОбластьМакета.Параметры.АдресКонтрагента              = АдресКонтрагента;
		
		// телефон покупателя
		Для НомерСимвола = 1 По ДлинаСтрокиТелефоновКонтрагентов ЦИкл
			ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
		КонецЦикла;
		
		// номер свидетельства покупателя
		ОбластьМакета.Параметры.НомерСвидетельстваКонтрагента = НомерСвидетельстваКонтрагента;

		// ИНН покупателя		
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
		КонецЦикла; 
		
		// номер договора
		ОбластьМакета.Параметры.НомерДоговора = ТекНомерДоговора;
		
		// дата договора
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
		КонецЦикла; 
		
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаОплаты_"+Инд]    = Сред(ТекДатаОплаты, Инд, 1);
		КонецЦикла; 

		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
		КонецЕсли;
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG",	ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	""+ОбластьМакетаЗаголовок.Параметры.ТипПричины1+ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HCOPY",	"");
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	Лев(ТекНомерФилиал, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	Сред(ТекНомерФилиал, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	Шапка.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиал, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиал, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G1D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G2S",	ТекНомерДоговора);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	ОбластьМакета.Параметры.НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	ОбластьМакета.Параметры.НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVSEL",НомерСвидетельстваОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVBUY",НомерСвидетельстваКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCSEL",	ОбластьМакета.Параметры.АдресОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCBUY",	ОбластьМакета.Параметры.АдресКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELSEL",	ТекТелефоныОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELBUY",	ТекТелефоныКонтрагента);

			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G1S",	ОбластьМакета.Параметры.ВидДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G2D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G3S",	ТекНомерДоговора);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H03G1S",	ОбластьМакета.Параметры.ФормаРасчетов);
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("H04G1D",	Шапка.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H04G1D",	Шапка.ДатаОплаты);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G1D",	Шапка.Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G2S",	Шапка.КтоВыписалНалоговуюНакладную);
			
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Если ПечататьДатыБезРазделителей Тогда
			ОбластьМакета.Области.ДатаОтгрузкиОплаты.Формат = "ДФ=ddMMyyyy";	
		КонецЕсли;
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если ПечататьКодУКТВЭДБезПробелов Тогда
				ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество) Тогда
				ОбластьМакета.Параметры.Количество = СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество;
			КонецЕсли;
			
			// дата отгрузки/оплаты
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаКорректировки) Тогда
				// укажем дату выписки накладной
				ОбластьМакета.Параметры.ДатаКорректировки = Шапка.Дата;
			КонецЕсли;
			
			// номенклатура с учетом характеристики
			ОбластьМакета.Параметры.Номенклатура = СокрП("" + СтрокаТаблицы.Номенклатура) 
												 + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")")
												 + ?(ДополнитьНазваниеНомеромГТД И ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД), ". ВМД №: " + СтрокаТаблицы.НомерГТД + ", дата ВМД: " + Формат(СтрокаТаблицы.ДатаГТД, ?(ПечататьДатыБезРазделителей,"ДФ=ddMMyyyy","ДФ=dd.MM.yyyy")), "");
												 ;
			
			
			// "обнулим" значения неиспользуемого типа корректировки 
			// колонки 5...8
			Если СтрокаТаблицы.ИзменениеКоличества = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеКоличества  = СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.ЦенаБезНДС  		 = СимволДляПустыхПоказателей;
			КонецЕсли;
			Если СтрокаТаблицы.ИзменениеЦеныБезНДС = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.Количество  		 = СимволДляПустыхПоказателей;
			КонецЕсли;
			
			// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма изменения базы НДС
			// колонки 9...11
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 		= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0 		= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС	= СимволДляПустыхПоказателей;
			
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
					
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
				
				СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
				СтрокаСтруктуры.G1D = ОбластьМакета.Параметры.ДатаКорректировки;
				СтрокаСтруктуры.G2S = ОбластьМакета.Параметры.Причина;
				СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
				
				СтрокаСтруктуры.G4 = ОбластьМакета.Параметры.КодУКТВЭД;
				
				СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
				
				СтрокаСтруктуры.G5  = СтрокаТаблицы.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТаблицы.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				СтрокаСтруктуры.G7  = СтрокаТаблицы.ИзменениеЦеныБезНДС;
				СтрокаСтруктуры.G8  = СтрокаТаблицы.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
				
				КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
				Если КолонкаДляСуммы = "20" Тогда
					СтрокаСтруктуры.G9  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "0" Тогда
					СтрокаСтруктуры.G10  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
					СтрокаСтруктуры.G11 = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
		// итоговые строки
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 		= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0 		= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС	= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.ИзменениеСуммыНДС			= СимволДляПустыхПоказателей;
		
		
		ТаблицаИтогов = ТаблицаНоменклатуры.Скопировать();
		ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС,ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
		
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
		
		КонецЦикла;
		ТаблицаИтогов.Свернуть("", "ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
			ОбластьМакета.Параметры.ИзменениеСуммыНДС = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9",	СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.Дата  					= Формат(Шапка.Дата, "ДФ=dd.MM.yyyy" );
		ОбластьМакета.Параметры.ДатаНалоговойНакладной  = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=dd.MM.yyyy" );
		
		ОбластьМакета.Параметры.Номер  					 = СокрЛП(ТекНомер 		    + ?(ЗначениеЗаполнено(ТекНомерФилиал), "/" + ТекНомерФилиал, ""));
		ОбластьМакета.Параметры.НомерНалоговойНакладной  = СокрЛП(ТекНомерНалоговой + ?(ЗначениеЗаполнено(ТекНомерФилиал), "/" + ТекНомерФилиал, ""));
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
	КонецЦикла; 

	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Возврат ТабДокумент;
		
	КонецЕсли;

КонецФункции // ПечатьДокументаНалоговыйКодекс()

// Функция формирует табличный документ с регламентированной печатной формой 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокументаНалоговыйКодекс(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы) Экспорт	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;

	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
	
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G1D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G9");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11");
		
		Если     ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	
	|	ВидОперации,
	|	Контрагент,
	|	Организация,
	
	|	ВидДоговора,
	|   ВключенаВЕдиныйРеестрНалоговыхНакладных,
	|   ТипПричиныНевыдачиПокупателю,
	|	СпецРежимНалогообложения,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложенияНалоговойНакладной,
	
	|	ФормаРасчетов,
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную.Представление КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2
	|
	|ГДЕ
	|	Приложение2.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СимволДляПустыхПоказателей = "X";
	ВыводитьНомерДоговораБезКлеточек = Ложь;
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	УчетнаяПолитикаНеЗадана = (УчетнаяПолитика = Неопределено);
	Если НЕ УчетнаяПолитикаНеЗадана тогда
		СимволДляПустыхПоказателей = УчетнаяПолитика.СимволПустыхПоказателейВНалоговойНакладной; 
		ВыводитьНомерДоговораБезКлеточек = УчетнаяПолитика.ВыводитьНомерДоговораБезКлеточек; 
	КонецЕсли;
	
	// Подготовим таблицы
	Отказ = Ложь;
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ); 
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// свернем подобные строки
	ТаблицаНоменклатуры.Свернуть(
		"ДатаКорректировки, Причина, Номенклатура, Характеристика, ТекстДляПечатиВКолонкеКоличество, ЕдиницаИзмерения, ЦенаМестаБезНДСБезСкидкиРегл,  Количество, СтавкаНДС", 
		"ИзменениеКоличества, ИзменениеЦеныБезНДССоСкидкойРегл, ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл"
	);   	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМестаБезНДСБезСкидкиРегл.Имя 	 = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеЦеныБезНДССоСкидкойРегл.Имя = "ИзменениеЦеныБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыБезНДСРегл.Имя		 = "ИзменениеСуммыБезНДС";
	ТаблицаНоменклатуры.Колонки.ИзменениеСуммыНДСРегл.Имя		 	 = "ИзменениеСуммыНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени2КНалоговойНакладной_Приложение2_2011";

	Макет = ПолучитьОбщийМакет("Приложение2КНалоговойНакладной2011");
	
    Для Страница = 1 По 2 Цикл
	
		// Выводим область оригинал/копия
		Если Страница = 1 Тогда
			ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
			
			ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = Шапка.ВключенаВЕдиныйРеестрНалоговыхНакладных;
			
			Если Шапка.ТипПричиныНевыдачиПокупателю = 0  Тогда
				
				ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
			ИначеЕсли Шапка.ТипПричиныНевыдачиПокупателю = 1  Тогда	
				
				// это ошибка, может быть из-за того, что по изначальной накладной стоял такой тип причины
				ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
			Иначе
				
				// накладная остается у поставщика
				ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца = "Х";
				ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
				ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		ИначеЕсли Страница = 2 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПерваяКопия");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата налоговой
		ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
		ТекНомерНалоговой = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная)), 7);
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		ТекНомерФилиалНалоговой = "";
		Если ЗначениеЗаполнено(Шапка.СпецРежимНалогообложенияНалоговойНакладной) Тогда
			ТекНомерФилиалНалоговой	= "" + Шапка.СпецРежимНалогообложенияНалоговойНакладной + ТекНомерФилиалНалоговой; 
		КонецЕсли;
		Для Инд = 1 По 4 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
		КонецЦикла;		
		
		//Дата
		ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		// даты в шапке нет!
		//Для Инд = 1 По 8 Цикл
		//	ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		//КонецЦикла; 
		
		// Номер
		ТекНомер = Прав("        " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект)), 8);
		Для Инд = 1 По 8 Цикл                                                                 
			ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим
		ТекНомерФилиал = "";
		Если ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения) Тогда
			ТекНомерФилиал	= "" + Шапка.СпецРежимНалогообложения + ТекНомерФилиал; 
		КонецЕсли;
		Для Инд = 1 По 4 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиал_"+Инд]    = Сред(ТекНомерФилиал, Инд, 1);
		КонецЦикла;		

		СведенияОПродавце   = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, Истина, Неопределено, "uk");
		ОбластьМакета.Параметры.НазваниеОрганизации           = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		//ОбластьМакета.Параметры.АдресОрганизации              = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		ОбластьМакета.Параметры.АдресОрганизации = "вул.Роганська, будинок 151, м.Харкiв, 61172"; //*** Е.Г. 27-02-2014
		
		
		// телефон
		ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
		ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
		ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныОрганизации);

		Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
			ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] = Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
		КонецЦикла;

		Если  Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
			// налоговые реквизиты не указыватюся
			ИННОрганизации					= "0";
			НомерСвидетельстваОрганизации	= "0"	
		Иначе	
			ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
			НомерСвидетельстваОрганизации 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "НомерСвидетельства,",Ложь);	
		КонецЕсли;
		ИННОрганизации = Прав("            " + ИННОрганизации, 12);
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
		КонецЦикла; 
		ОбластьМакета.Параметры["НомерСвидетельстваОрганизации"] = НомерСвидетельстваОрганизации;
		
		
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
			// в этом случае контрагентом выступает организация
			СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, Истина, Неопределено, "uk");
		Иначе
			СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, Истина, Неопределено, "uk");
		КонецЕсли; 
		
		ОбластьМакета.Параметры.НазваниеКонтрагента           = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		ОбластьМакета.Параметры.АдресКонтрагента              = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ЮридическийАдресПочтовый,",  Ложь);
 		
		// телефон
		ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
		ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныКонтрагента);

		Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
			ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
		КонецЦикла;
		
		НомерСвидетельстваКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
		Если НЕ ЗначениеЗаполнено(НомерСвидетельстваКонтрагента)
			ИЛИ Найти("0123456789",Лев(СокрЛ(НомерСвидетельстваКонтрагента),1)) = 0 Тогда
			НомерСвидетельстваКонтрагента = "0";
		КонецЕсли; 
		ОбластьМакета.Параметры["НомерСвидетельстваКонтрагента"] = НомерСвидетельстваКонтрагента;

		ИННКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если НЕ ЗначениеЗаполнено(ИННКонтрагента)
			ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
			ИННКонтрагента = "0";
		КонецЕсли; 
		ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
		КонецЦикла; 
		
		ТекНомерДоговора = СокрЛП("" + Шапка.НомерДоговора);
		Если ЗначениеЗаполнено(ТекНомерДоговора) Тогда
			Для Инд = 1 По 6 Цикл
				ОбластьМакета.Параметры["НомерДоговора_"+Инд]    = Сред(ТекНомерДоговора, Инд, 1);
			КонецЦикла; 
		КонецЕсли;
		
		Если ВыводитьНомерДоговораБезКлеточек = Истина Тогда
			ОбластьНомера = ОбластьМакета.Область("НомерДоговора1");	
		    ОбластьНомера.Объединить();
			ОбластьНомера = ОбластьМакета.Область("НомерДоговора2");	
		    ОбластьНомера.Объединить();
			ОбластьМакета.Параметры.НомерДоговора_1 = ТекНомерДоговора;
		КонецЕсли;
		
		ТекДатаДоговора = Шапка.ДатаДоговора;
		Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
			ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
			КонецЦикла; 
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG",	ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	""+ОбластьМакетаЗаголовок.Параметры.ТипПричины1+ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HCOPY",	"");
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	Лев(ТекНомерФилиал, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	Сред(ТекНомерФилиал, 2,3));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	Шапка.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2,3));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G1D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G2S",	ТекНомерДоговора);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	ОбластьМакета.Параметры.НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	ОбластьМакета.Параметры.НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVSEL",НомерСвидетельстваОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVBUY",НомерСвидетельстваКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCSEL",	ОбластьМакета.Параметры.АдресОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCBUY",	ОбластьМакета.Параметры.АдресКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELSEL",	ТекТелефоныОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELBUY",	ТекТелефоныКонтрагента);

			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G1S",	ОбластьМакета.Параметры.ВидДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G2D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G3S",	ТекНомерДоговора);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H03G1S",	ОбластьМакета.Параметры.ФормаРасчетов);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H04G1D",	Шапка.ДатаНалоговойНакладной);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G1D",	Шапка.Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G2S",	Шапка.КтоВыписалНалоговуюНакладную);
			
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество) Тогда
				ОбластьМакета.Параметры.Количество = СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество;
			КонецЕсли;
			
			// дата отгрузки/оплаты
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаКорректировки) Тогда
				// укажем дату выписки накладной
				ОбластьМакета.Параметры.ДатаКорректировки = Шапка.Дата;
			КонецЕсли;
			
			// номенклатура с учетом характеристики
			ОбластьМакета.Параметры.Номенклатура = СокрП("" + СтрокаТаблицы.Номенклатура + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")"));
			
			
			// "обнулим" значения неиспользуемого типа корректировки 
			// колонки 5...8
			Если СтрокаТаблицы.ИзменениеКоличества = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеКоличества  = СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.ЦенаБезНДС  		 = СимволДляПустыхПоказателей;
			КонецЕсли;
			Если СтрокаТаблицы.ИзменениеЦеныБезНДС = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.Количество  		 = СимволДляПустыхПоказателей;
			КонецЕсли;
			
			// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма изменения базы НДС
			// колонки 9...11
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 		= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0 		= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС	= СимволДляПустыхПоказателей;
			
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
					
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
				
				СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
				СтрокаСтруктуры.G1D = ОбластьМакета.Параметры.ДатаКорректировки;
				СтрокаСтруктуры.G2S = ОбластьМакета.Параметры.Причина;
				СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
				СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
				
				СтрокаСтруктуры.G5  = СтрокаТаблицы.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТаблицы.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				СтрокаСтруктуры.G7  = СтрокаТаблицы.ИзменениеЦеныБезНДС;
				СтрокаСтруктуры.G8  = СтрокаТаблицы.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
				
				КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
				Если КолонкаДляСуммы = "20" Тогда
					СтрокаСтруктуры.G9  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "0" Тогда
					СтрокаСтруктуры.G10  = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
					СтрокаСтруктуры.G11 = СтрокаТаблицы.ИзменениеСуммыБезНДС;	
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
		// итоговые строки
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 		= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0 		= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС	= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.ИзменениеСуммыНДС			= СимволДляПустыхПоказателей;
		
		
		ТаблицаИтогов = ТаблицаНоменклатуры.Скопировать();
		ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС,ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
		
			Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
		
		КонецЦикла;
		ТаблицаИтогов.Свернуть("", "ИзменениеСуммыНДС");
		Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
			ОбластьМакета.Параметры.ИзменениеСуммыНДС = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9",	СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.Дата  					= Формат(Шапка.Дата, "ДФ=dd.MM.yyyy" );
		ОбластьМакета.Параметры.ДатаНалоговойНакладной  = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=dd.MM.yyyy" );
		
		ОбластьМакета.Параметры.Номер  					 = СокрЛП(ТекНомер 		 + ?(ЗначениеЗаполнено(ТекНомерФилиал), "/" + ТекНомерФилиал, ""));
		ОбластьМакета.Параметры.НомерНалоговойНакладной  = СокрЛП(ТекНомерНалоговой + ?(ЗначениеЗаполнено(ТекНомерФилиалНалоговой), "/" + ТекНомерФилиалНалоговой, ""));
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
	КонецЦикла; 

	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Возврат ТабДокумент;
		
	КонецЕсли;

КонецФункции // ПечатьДокументаНалоговыйКодекс()

//Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если     ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
		// такие операции не предусматривают выписки налоговых накладных
		Возврат	
	КонецЕсли;
	
	Если глЗначениеПеременной("ДатаНачалаИспользованияФормыННПоЛекарствам") > Дата Тогда
		Если ВДокументеЕстьСтавкаНДС7ИДругиеСтавки() Тогда
			Возврат ;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

		// Получить экземпляр документа на печать
		Если  ИмяМакета = "Приложение2КНалоговойНакладной" 
		  ИЛИ ИмяМакета = "Приложение2КНалоговойНакладнойАльбом" 
		  Тогда
		ТабДокумент = ПечатьДокумента(, ИмяМакета);
		//***	
		ИначеЕсли 	 ИмяМакета = "РеестрНакладныхДляСводной"  ТОГДА
		ТабДокумент = ПечатьРеестраНакладных();

	КонецЕсли;

    УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));	
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураПечатныхФорм = Новый Структура("Приложение2КНалоговойНакладной", "Приложение 2 к налоговой накладной");
	СтруктураПечатныхФорм.Вставить("Приложение2КНалоговойНакладнойАльбом", "Приложение 2 к налоговой накладной (альбом. ориент.)");
	//***
	СтруктураПечатныхФорм.Вставить("РеестрНакладныхДляСводной", "Реестр расходных накладных");

	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Функция ВДокументеЕстьСтавкаНДС7ИДругиеСтавки(ВыдаватьСообщенение = Истина) Экспорт
                                                       
	Отбор = Новый Структура("СтавкаНДС", Перечисления.СтавкиНДС.НДС7);
	КоличествоНДС7 =   Товары.НайтиСтроки(Отбор).Количество()
					 + Услуги.НайтиСтроки(Отбор).Количество()
			 		 + ОС.НайтиСтроки(Отбор).Количество() 
			 		 + НематериальныеАктивы.НайтиСтроки(Отбор).Количество();
					 
	КоличествоВсего =  Товары.Количество()
					 + Услуги.Количество()
			 		 + ОС.Количество() 
			 		 + НематериальныеАктивы.Количество();
					 
	Если КоличествоНДС7 > 0 И (КоличествоНДС7 <> КоличествоВсего) Тогда
		
			Если ВыдаватьСообщенение = Истина Тогда
			
				Сообщить(НСтр("ru = 'Форма налоговой накладной, утвержденная 14.01.2014 приказом Миндоходов № 10, не предусматривает наличие ставки НДС  7%. 
                               |В данной налоговой накладной присутствует номенклатура, которая облагается как по ставке 7% так и по другим ставкам.
                               |Согласно рекомендации Миндоходов, изложенной в письме  от 04.04.2014  № 7860/7/99-99-19-04-02-17, на номенклатуру, облагаемую НДС по ставке 7%, необходимо выписывать отдельную налоговую накладную.
                               |Воспользуйтесь пунктом ""Перенести товары по ставке 7% в отдельную накладную"" меню ""Действия"" на форме документа!'; uk = 'Форма податкової накладню, що затверждена 14.01.2014 наказом Міндоходів № 10, не передбачає наявності ставки ПДВ 7%.
                               |В податковій накладній наявна номенклатура, що оподатковується ПДВ як за ставкою 7% так і за іншими ставками.
                               |Згідно рекомендації Міндоходів, що викладена у листі від 04.04.2014  № 7860/7/99-99-19-04-02-17, на номенклатуру, що оподатковується ПДВ за ставкою 7%, необхідно складати окрему податкову накладну.
                               |Скористайтеся пунктом ""Перенести товари за ставкою 7% до окремої накладної""  меню ""Дії"" на формі документа! '"), СтатусСообщения.ОченьВажное);
				
			КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции // ВДокументеЕстьСтавкаНДС7ИДругиеСтавки

Функция ВДокументеЕстьСтавкаНДС7() Экспорт
                                                       
	Отбор = Новый Структура("СтавкаНДС", Перечисления.СтавкиНДС.НДС7);
	
	Если    (Товары.НайтиСтроки(Отбор).Количество() > 0)
		ИЛИ (Услуги.НайтиСтроки(Отбор).Количество() > 0)
		ИЛИ (ОС.	НайтиСтроки(Отбор).Количество() > 0)
		ИЛИ (НематериальныеАктивы.НайтиСтроки(Отбор).Количество() > 0)
		Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции // ВДокументеЕстьСтавкаНДС7

Функция ВыделитьСтавкуНДС7ВОтдельныйДокумент(ВыдаватьСообщения = Истина) Экспорт
	
	НоваяНакладная = Неопределено;
	
	Если ВДокументеЕстьСтавкаНДС7() = Ложь Тогда
		Если ВыдаватьСообщения = Истина Тогда
			Сообщить(Нстр("ru = 'В данной накладной нет товаров по ставке 7%. Действие не выполнено!'; uk = 'В цій накладній немає товарів по ставці 7%. Дія не виконана!'"));
		КонецЕсли;
		Возврат НоваяНакладная;
	КонецЕсли;

	Если ВДокументеЕстьСтавкаНДС7ИДругиеСтавки(Ложь) = Ложь Тогда
		Если ВыдаватьСообщения = Истина Тогда
			Сообщить(Нстр("ru = 'В данной накладной все товары по ставке 7%. Действие не выполнено!'; uk = 'В цій накладній всі товари по ставці 7%. Дія не виконана!'"));
		КонецЕсли;
		Возврат НоваяНакладная;
	КонецЕсли;
	
	НоваяНакладная = ЭтотОбъект.Скопировать();
	НоваяНакладная.Дата = Дата;
	НоваяНакладная.УстановитьНовыйНомер();
	
	НДС7 = Перечисления.СтавкиНДС.НДС7;
	
	СписокТЧ = Новый Структура("Товары, Услуги, ОС, НематериальныеАктивы");
	
	ВсеСтрокиКУдалениюСтараяНакладная = Новый Структура;
	ВсеСтрокиКУдалениюНоваяНакладная  = Новый Структура;
	
	Для каждого ТЧ Из СписокТЧ Цикл
		
		ИмяТЧ = ТЧ.Ключ;
		
		СтрокиКУдалениюСтараяНакладная = Новый Массив;
		СтрокиКУдалениюНоваяНакладная  = Новый Массив;
		
		Для НомСтр = 1 По ЭтотОБъект[ИмяТЧ].Количество() Цикл
			
			ТекущаяСтрока = ЭтотОБъект[ИмяТЧ][НомСтр-1];
			
			Если ТекущаяСтрока.СтавкаНДС = НДС7 Тогда
				
				СтрокиКУдалениюСтараяНакладная.Добавить(ТекущаяСтрока);
				
			Иначе	
				
				СтрокиКУдалениюНоваяНакладная.Добавить(НоваяНакладная[ИмяТЧ][НомСтр-1]);	
				
			КонецЕсли;
			
		КонецЦикла;  	
		
		ВсеСтрокиКУдалениюСтараяНакладная.Вставить(ИмяТЧ, СтрокиКУдалениюСтараяНакладная);
		ВсеСтрокиКУдалениюНоваяНакладная.Вставить (ИмяТЧ, СтрокиКУдалениюНоваяНакладная);
		
	КонецЦикла;
	
	// удалим все строки в новой налоговой и попытаемся ее записать
	Для каждого ТекТЧ Из ВсеСтрокиКУдалениюНоваяНакладная Цикл
		
		ИмяТЧ 						  = ТекТЧ.Ключ;
		СтрокиКУдалениюНоваяНакладная = ТекТЧ.Значение;
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалениюНоваяНакладная Цикл
			
			НоваяНакладная[ИмяТЧ].Удалить(СтрокаКУдалению);
			
		КонецЦикла;
	
	КонецЦикла;	
		
	Попытка
		
		НоваяНакладная.Записать(РежимЗаписиДокумента.Запись);
		
	Исключение
		
		Если ВыдаватьСообщения = Истина Тогда
			Сообщить(НСтр("ru = 'Не удалось выделить товары по ставке НДС 7% в отдельную накладную:'; uk = 'Не вдалося перенести товари за ставкою ПДВ 7% до окремої накладної: '") + ОписаниеОшибки());
		КонецЕсли;
		
		НоваяНакладная = Неопределено;
		
		Возврат НоваяНакладная;
		
	КонецПопытки;
		
	// теперь окончательно "испортим" текущую накладную - так как новая уже записана
	Для каждого ТекТЧ Из ВсеСтрокиКУдалениюСтараяНакладная Цикл
		
		ИмяТЧ 						  = ТекТЧ.Ключ;
		СтрокиКУдалениюСтараяНакладная = ТекТЧ.Значение;
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалениюСтараяНакладная Цикл
			
			ЭтотОбъект[ИмяТЧ].Удалить(СтрокаКУдалению);
			
		КонецЦикла;
	
	КонецЦикла;	
	
	Возврат НоваяНакладная;
	
КонецФункции // ВыделитьСтавкуНДС7ВОтдельныйДокумент


Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНалоговогоУчетаНДСРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета) Экспорт

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	// Установим значения по умолчанию
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НалоговоеНазначение", МетаданныеДокумента, ИмяТабЧасти) Тогда
		СтрокаТЧ.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
	КонецЕсли;
	
	Если ИмяТабЧасти = "Товары" Тогда
		ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТЧ);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыНалоговогоУчетаНДСРегл

Процедура ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти) Экспорт

	НоменклатураГТДХарактеристики = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.НоменклатураГТД;
	
	Если СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.ОтечественныйНеподакцизныйТовар = Истина Тогда
		
		СтрокаТабличнойЧасти.КодУКТВЭД = Неопределено;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(НоменклатураГТДХарактеристики) Тогда
		СтрокаТабличнойЧасти.КодУКТВЭД = НоменклатураГТДХарактеристики.КодУКТВЭД;
		СтрокаТабличнойЧасти.НомерГТД  = НоменклатураГТДХарактеристики.НомерГТД;
	Иначе
		СтрокаТабличнойЧасти.КодУКТВЭД = СтрокаТабличнойЧасти.Номенклатура.НоменклатураГТД.КодУКТВЭД;
		СтрокаТабличнойЧасти.НомерГТД  = СтрокаТабличнойЧасти.Номенклатура.НоменклатураГТД.НомерГТД;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьУКТВЭДВСтрокеТоваров

Процедура ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, ИмяТабЧасти) Экспорт
	
	МетаданныеДокумента = Метаданные();
	
	Если НЕ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			Возврат
	КонецЕсли;

	СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости;
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
		СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти) Экспорт

	СчетаУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, СтрокаТЧ.Номенклатура, , Дата);

	ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета);
	ЗаполнитьРеквизитыНалоговогоУчетаНДСРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета);
    ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, ИмяТабЧасти);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()


Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()


Процедура ЗаполнитьПоОстаткам(ТабличнаяЧасть, МоментВремени = Неопределено) Экспорт
	ЭтоВозврат = ЭтоВозврат(ВидОперации);
	
	ВалютаВзаиморасчетовНУ = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Запрос = Новый Запрос;
	
	Если МоментВремени = Неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Иначе	
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	                                                                                      
	Если ТабличнаяЧасть = Товары Тогда
		Запрос.УстановитьПараметр("ВозвратнаяТара", Ложь);
		Запрос.УстановитьПараметр("СтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	Иначе
		Запрос.УстановитьПараметр("ВозвратнаяТара", Истина);
		Запрос.УстановитьПараметр("СтавкиНДС", Перечисления.СтавкиНДС.НеНДС);
	КонецЕсли;
	Если    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		Запрос.УстановитьПараметр("Сделка", Сделка);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
		
		Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат Тогда
		  
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.ВозвратРозница;		  
			ВалютаВзаиморасчетовНУ = мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		  
		Запрос.УстановитьПараметр("СобытиеНДС", СобытиеНДС);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат;
		Запрос.УстановитьПараметр("Сделка", 			Неопределено);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ВалютаВзаиморасчетовНУ = мВалютаРегламентированногоУчета;
		
		
	Иначе
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
		
		Если НалоговаяНакладная.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
			
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
			ВалютаВзаиморасчетовНУ = мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СобытиеНДС", СобытиеНДС);
		
	КонецЕсли;
	
	ДанныеОВалютеВзаиморасчетовНУ = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовНУ, Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкаНДС,
	|	НалоговоеНазначение,
	|	СуммаНДСОстаток,
	|	БазаНДСОстаток
	|ИЗ
	|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.Остатки(&МоментВремени, 
	|											  			Организация 		= &Организация 
	|											 		  И ДоговорКонтрагента 	= &ДоговорКонтрагента 
	|											 		  И Сделка				= &Сделка 
	|													  И СтавкаНДС 			В (&СтавкиНДС)
	|													  И СобытиеНДС  		= &СобытиеНДС 
	|													  И ВозвратнаяТара 		= &ВозвратнаяТара) КАК НДСПриобретенийОстатки"
	+ ?(ЭтоВозврат,"
	|ГДЕ
	|     СуммаНДСОстаток >= 0
	|   И БазаНДСОстаток >= 0
	|", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();
			
			Товар = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НоменклатураДляЗаполненияНалоговыхНакладных");	
			Если НЕ ЗначениеЗаполнено(Товар) Тогда
				Сообщить("Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!", СтатусСообщения.Важное);
			КонецЕсли; 

			СтрокаТабличнойЧасти.Номенклатура	  			= Товар;
			
			Если  ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  		И ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= Товар.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Количество		  			= 1;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти.СтавкаНДС       	 	 	= Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.НалоговоеНазначение		= Выборка.НалоговоеНазначение;
			
			ИзменениеСуммыНДС 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДСОстаток, 
													ВалютаВзаиморасчетовНУ, ВалютаДокумента, 
													ДанныеОВалютеВзаиморасчетовНУ.Курс, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
													ДанныеОВалютеВзаиморасчетовНУ.Кратность, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													
			СтрокаТабличнойЧасти.ИзменениеСуммыНДС = ИзменениеСуммыНДС;										
			
			ИзменениеСуммыБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.БазаНДСОстаток, 
													ВалютаВзаиморасчетовНУ, ВалютаДокумента, 
													ДанныеОВалютеВзаиморасчетовНУ.Курс, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
													ДанныеОВалютеВзаиморасчетовНУ.Кратность, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
			
			СтрокаТабличнойЧасти.ИзменениеСуммы = ИзменениеСуммыБезНДС + ?(СуммаВключаетНДС, ИзменениеСуммыНДС, 0);
			
			Если ЭтоВозврат ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
				// Нужно инвертировать суммы
				СтрокаТабличнойЧасти.ИзменениеСуммыНДС = -СтрокаТабличнойЧасти.ИзменениеСуммыНДС;
				СтрокаТабличнойЧасти.ИзменениеСуммы	   = -СтрокаТабличнойЧасти.ИзменениеСуммы;
			КонецЕсли;
			
			ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "Товары");
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары");
			
		ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти);
	
		Иначе
			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();
			
			СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;
			
			Если ЭтоВозврат Тогда
				СтрокаТабличнойЧасти.ИзменениеСуммы = -Выборка.БазаНДСОстаток;
			Иначе
				СтрокаТабличнойЧасти.ИзменениеСуммы	= Выборка.БазаНДСОстаток;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура СкопироватьТовары() Экспорт

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.ЕдиницаИзмеренияМест,
	|	Основание.Количество,
	|	Основание.КоличествоМест,
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.ХарактеристикаНоменклатуры,
	|	Основание.КодУКТВЭД,
	|	Основание.НомерГТД,
	|	Основание.Цена,
	|	Основание.ПроцентСкидкиНаценки,
	|	Основание.ПроцентАвтоматическихСкидок,
	|	Основание.НалоговоеНазначение,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ПроцентСкидкиНаценки             = Выборка.ПроцентСкидкиНаценки;		
		НоваяСтрока.ПроцентАвтоматическихСкидок      = Выборка.ПроцентАвтоматическихСкидок;		
		Если НоваяСтрока.ПроцентСкидкиНаценки + НоваяСтрока.ПроцентАвтоматическихСкидок = 100 Тогда
			НоваяСтрока.Цена = 0;
		ИначеЕсли НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / ((1 - (НоваяСтрока.ПроцентСкидкиНаценки + НоваяСтрока.ПроцентАвтоматическихСкидок)/ 100) * НоваяСтрока.Количество);
		КонецЕсли;	
		
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		Если    НЕ ЗначениеЗаполнено(Выборка.НалоговоеНазначение) Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары");
			
		Иначе
			
			НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
			ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
	
		КонецЕсли;
		
		НоваяСтрока.КодУКТВЭД                  = Выборка.КодУКТВЭД;
		НоваяСтрока.НомерГТД                   = Выборка.НомерГТД;
			
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()


Процедура СкопироватьВозвратнуюТару() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.Сумма,
	|	Основание.Цена,
	|	Основание.НалоговоеНазначение,
	|	Основание.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.НалоговаяНакладная.ВозвратнаяТара КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
							Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		Если НЕ ЗначениеЗаполнено(Выборка.НалоговоеНазначение) Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Тара");
			
		Иначе
			
			НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

Процедура ЗаполнитьПоПереоценкеТоваровОтданныхНаКомиссию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.ЕдиницаИзмеренияМест,
	|	Основание.Количество,
	|	Основание.КоличествоМест,
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.ХарактеристикаНоменклатуры,
	|	Основание.Цена,
	|	Основание.СуммаСтарая,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.НалоговоеНазначение,
	|	Основание.ИзменениеСуммыНДС,
	|	Истина      КАК СуммаВключаетНДС,
	|	Истина      КАК УчитыватьНДС
	|ИЗ
	|	Документ.ПереоценкаТоваровОтданныхНаКомиссию.Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|	И Основание.Сумма <> Основание.СуммаСтарая
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;		
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.НалоговоеНазначение 		= Выборка.НалоговоеНазначение;
		
		ЦенаСтарая = ?(Выборка.Сумма = 0, 0, Выборка.СуммаСтарая / Выборка.Сумма * Выборка.Цена);
		
		НоваяСтрока.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЦенаСтарая, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));		
		
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаСтарая, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ИзменениеСуммы = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма - Выборка.СуммаСтарая, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ИзменениеСуммыНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ИзменениеСуммыНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		НоваяСтрока.ИзменениеЦены = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена - ЦенаСтарая, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
														  
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
		ЗаполнитьУКТВЭДВСтрокеТоваров(НоваяСтрока);
		
		НоваяСтрока.Причина = "Коригування ціни " + ?(Дата >='20110110', "постачання", "поставки");
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоВозвратуТоваровОтПокупателя() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.ЕдиницаИзмеренияМест,
	|	Основание.Количество,
	|	Основание.КоличествоМест,
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.ХарактеристикаНоменклатуры,
	|	Основание.Цена,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.НалоговоеНазначение,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,
	|	Основание.ПроцентАвтоматическихСкидок
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
//***|	Основание.ПроцентАвтоматическихСкидок
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;		
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;
        НоваяСтрока.ПроцентАвтоматическихСкидок= Выборка.ПроцентАвтоматическихСкидок;//***		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.НалоговоеНазначение 		= Выборка.НалоговоеНазначение;
		
		НоваяСтрока.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));		
		
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
				
		НоваяСтрока.ИзменениеСуммы 		= -НоваяСтрока.Сумма;
		НоваяСтрока.ИзменениеСуммыНДС 	= -НоваяСтрока.СуммаНДС;
		НоваяСтрока.ИзменениеКоличества = -НоваяСтрока.Количество;
														  
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
		ЗаполнитьУКТВЭДВСтрокеТоваров(НоваяСтрока);
		
		НоваяСтрока.Причина = "Повернення товару";
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионераОПродажах() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.ЕдиницаИзмеренияМест,
	|	Основание.Количество,
	|	Основание.КоличествоМест,
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.ХарактеристикаНоменклатуры,
	|	Основание.Цена,
	|	Основание.ЦенаПередачи,
	|	Основание.СуммаПередачи,
	|	Основание.СуммаНДСПередачи,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.НалоговоеНазначение,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|	И Основание.Сумма <> Основание.СуммаПередачи
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;		
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.НалоговоеНазначение 		= Выборка.НалоговоеНазначение;
		
		НоваяСтрока.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ЦенаПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));		
		
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ИзменениеСуммы = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма - Выборка.СуммаПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ИзменениеСуммыНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС - Выборка.СуммаНДСПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
				
		НоваяСтрока.ИзменениеЦены = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена - Выборка.ЦенаПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
														  
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
		ЗаполнитьУКТВЭДВСтрокеТоваров(НоваяСтрока);
		
		НоваяСтрока.Причина = "Коригування ціни " + ?(Дата >='20110110', "постачання", "поставки");
		
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьУслуги() Экспорт
	
	#Если Не Клиент И Не ВнешнееСоединение Тогда
		
		глТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Содержание,
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.Цена,
	|	Основание.ПроцентСкидкиНаценки,
	|	Основание.НалоговоеНазначение,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.НалоговаяНакладная.Услуги КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки       = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		Если НоваяСтрока.Количество <> 0 Тогда
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"));
		Иначе
			НоваяСтрока.Количество = 1; 
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
		КонецЕсли;
		
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		Если    НЕ ЗначениеЗаполнено(Выборка.НалоговоеНазначение) Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги");
			
		Иначе
			
			НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
			ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Услуги");
	
		КонецЕсли;
			
	КонецЦикла;

	
КонецПроцедуры // СкопироватьУслуги()

Процедура СкопироватьОС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство,
	|	Основание.КодУКТВЭД,
	|	Основание.НомерГТД,
	|	Основание.НалоговоеНазначение,
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.НалоговаяНакладная.ОС 	   	   КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство           = Выборка.ОсновноеСредство;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													  
		НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "ОС");
		
		НоваяСтрока.КодУКТВЭД                  = Выборка.КодУКТВЭД;
		НоваяСтрока.НомерГТД                   = Выборка.НомерГТД;
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОС()

Процедура СкопироватьНематериальныеАктивы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.НематериальныйАктив,
	|	Основание.КодУКТВЭД,
	|	Основание.НомерГТД,
	|	Основание.НалоговоеНазначение,
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.НалоговаяНакладная.НематериальныеАктивы КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НематериальныеАктивы.Добавить();
		НоваяСтрока.НематериальныйАктив        = Выборка.НематериальныйАктив;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													  
		НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "НематериальныеАктивы");
	
		НоваяСтрока.КодУКТВЭД                  = Выборка.КодУКТВЭД;
		НоваяСтрока.НомерГТД                   = Выборка.НомерГТД;
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьНематериальныеАктивы()


// Процедура выполняет заполнение текста условий продажи.
//
// Параметры:
//   Нет.
//
Процедура ЗаполнитьУсловиеПродажи(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;
	
	
	Если  ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда

		УсловиеПродажи 	= НалоговаяНакладная.УсловиеПродажи;
		ФормаРасчетов 	= НалоговаяНакладная.ФормаРасчетов;	
		
	Иначе
		
		УсловиеПродажи 	=  НалоговаяНакладная.УсловиеПродажи;
		ФормаРасчетов  	= "Касовий чек";
		
	КонецЕсли;
	
	
	#Если Клиент Тогда
	
	// заполним текстовые реквизиты по-украински
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		УсловиеПродажи = УсловиеПродажи + ", накладна на повернення № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		
	КонецЕсли;	
	
	#КонецЕсли
	
	
КонецПроцедуры // ЗаполнитьУсловиеПродажи()


// Функция по СтавкеНДС определяет суффикс имени параметра табличного документа:
// фактически колонкку таблицы налоговой накладной 20%, 0%... где должна отображаться соответствующая сумма
//
Функция ОпределитьКолонкуТаблицы(СтавкаНДС=Неопределено)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат "0";
	ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат "БезНДС";
	ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
		Если глЗначениеПеременной("ДатаНачалаИспользованияФормыННПоЛекарствам") <= Дата Тогда
			Возврат "7";	
		Иначе	
			Возврат "0";	
		КонецЕсли;
	Иначе
		Возврат "20";	
	КонецЕсли;
	
КонецФункции

Функция ОпределитьКодСтавки(ИмяКолонки)

	Если ИмяКолонки = "0" Тогда
		Если НЕ ВалютаДокумента  = мВалютаРегламентированногоУчета
			ИЛИ КонтрагентНеРезидент = Истина 
			Тогда
			Возврат "901";//"0Эксп";
		Иначе       
			Возврат "902";//"0Укр";
		КонецЕсли;
	//Если ИмяКолонки = "0Эксп" Тогда
	//	Возврат "901";	
	//ИначеЕсли ИмяКолонки = "0Укр" Тогда
	//	Возврат "902";		
	ИначеЕсли ИмяКолонки = "БезНДС" Тогда
		Возврат "903";		
	ИначеЕсли ИмяКолонки = "7" Тогда
		Возврат "7";	
	Иначе
		Возврат "20";	
	КонецЕсли;	

КонецФункции // ОпределитьКодСтавки()

Функция ОпределитьДопустимыеСтавкиНДС() Экспорт
	СписокСтавокНДС = Новый СписокЗначений();
	
	Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда

		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НеНДС);
		
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат 
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка 	
	  	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда	
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
	КонецЕсли;
		
	Возврат СписокСтавокНДС;
	
КонецФункции

Функция ЭтоВозврат(ВидОперации)
	
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		Возврат Ложь
	Иначе
		Возврат Истина
	КонецЕсли;
		
КонецФункции


Процедура ЗаполнитьВидДоговора() Экспорт

	ВидДоговора = ДоговорКонтрагента.ВидДоговораПоГК;

КонецПроцедуры

Процедура УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		Если Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа1379") Тогда
		    ТипПричиныНевыдачиПокупателю = 2;
		Иначе	
			ТипПричиныНевыдачиПокупателю = 14;
		КонецЕсли;
	
	ИначеЕсли  НЕ ВалютаДокумента = мВалютаРегламентированногоУчета 
		И НЕ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		
		ТипПричиныНевыдачиПокупателю = 7;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат Тогда
		
	    ТипПричиныНевыдачиПокупателю = 11;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент.ИНН)
			ИЛИ Найти("0123456789",Лев(СокрЛ(Контрагент.ИНН),1)) = 0 Тогда		
		
		ТипПричиныНевыдачиПокупателю = 2;
		
	Иначе	
		
		ТипПричиныНевыдачиПокупателю = 0;
		
	КонецЕсли;
	
	Если ТипПричиныНевыдачиПокупателю > 0 Тогда
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений  и печати
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыБезНДСВал"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыСНДСВал"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Колонки, необходимые для печати документа
	ТаблицаТоваров.Колонки.Добавить("ЦенаМестаБезНДСБезСкидкиРегл"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,5)));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеЦеныБезНДССоСкидкойРегл"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,5)));
	
	Если ТаблицаТоваров.Колонки.Найти("ТекстДляПечатиВКолонкеКоличество") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("ТекстДляПечатиВКолонкеКоличество", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));	
		ТаблицаТоваров.ЗаполнитьЗначения("", "ТекстДляПечатиВКолонкеКоличество");	
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.ИзменениеСуммыСНДСВал    = СтрокаТаблицы.ИзменениеСуммы + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.ИзменениеСуммыНДС);
		СтрокаТаблицы.ИзменениеСуммыНДСВал     = СтрокаТаблицы.ИзменениеСуммыНДС;
		СтрокаТаблицы.ИзменениеСуммыБезНДСВал  = СтрокаТаблицы.ИзменениеСуммыСНДСВал - СтрокаТаблицы.ИзменениеСуммыНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ИзменениеСуммыСНДСРегл = СтрокаТаблицы.ИзменениеСуммыСНДСВал;
			СтрокаТаблицы.ИзменениеСуммыНДСРегл  = СтрокаТаблицы.ИзменениеСуммыНДСВал;
		Иначе
			СтрокаТаблицы.ИзменениеСуммыСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ИзменениеСуммыСНДСВал, 
																				СтруктураШапкиДокумента.ВалютаДокумента,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																				СтруктураШапкиДокумента.КурсДокумента, 
																				СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
																				СтруктураШапкиДокумента.КратностьДокумента,
																				СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
																				, ПогрешностиОкругления, "СуммаСНДСРегл");

			СтрокаТаблицы.ИзменениеСуммыНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ИзменениеСуммыНДСВал, 
																				СтруктураШапкиДокумента.ВалютаДокумента,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																				СтруктураШапкиДокумента.КурсДокумента, 
																				СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
																				СтруктураШапкиДокумента.КратностьДокумента,
																				СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
																				, ПогрешностиОкругления, СтрокаТаблицы.СтавкаНДС);
																				
		КонецЕсли;
		СтрокаТаблицы.ИзменениеСуммыБезНДСРегл = СтрокаТаблицы.ИзменениеСуммыСНДСРегл - СтрокаТаблицы.ИзменениеСуммыНДСРегл;
		
		// Поля, используемые при печати документа    
		Если НЕ СтрокаТаблицы.ИзменениеКоличества = 0 ИЛИ СтруктураШапкиДокумента.Дата >= '2015-01-01' Тогда
			Если     СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
				И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС 
				И СтрокаТаблицы.ПроцентСкидкиНаценки = 0 Тогда
				СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = СтрокаТаблицы.Цена;
			Иначе
				//СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = СтрокаТаблицы.ИзменениеСуммыБезНДСРегл / СтрокаТаблицы.ИзменениеКоличества;
				СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
				СуммаНДСВал     = СтрокаТаблицы.НДС;
				СуммаБезНДСВал  = СуммаСНДСВал - СуммаНДСВал;
				
				Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					СуммаБезНДСРегл = СуммаБезНДСВал;
				Иначе
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
						СуммаБезНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаБезНДСВал, 
															СтруктураШапкиДокумента.ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
															СтруктураШапкиДокумента.КурсДокумента, 
															СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
															СтруктураШапкиДокумента.КратностьДокумента,
															СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
															, ПогрешностиОкругления, "СуммаБезНДСРегл");
						
					Иначе										
						СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, 
															СтруктураШапкиДокумента.ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
															СтруктураШапкиДокумента.КурсДокумента, 
															СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
															СтруктураШапкиДокумента.КратностьДокумента,
															СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
															, ПогрешностиОкругления, "СуммаСНДСРегл");
															
						СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСВал, 
															СтруктураШапкиДокумента.ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
															СтруктураШапкиДокумента.КурсДокумента, 
															СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
															СтруктураШапкиДокумента.КратностьДокумента,
															СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
															, ПогрешностиОкругления, СтрокаТаблицы.СтавкаНДС);
															
						СуммаБезНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
					КонецЕсли;				
				КонецЕсли;				
				
				СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = ?(СтрокаТаблицы.Количество = 0, СуммаБезНДСРегл, СуммаБезНДСРегл / СтрокаТаблицы.Количество);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ИзменениеЦены = 0
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат Тогда
			СтрокаТаблицы.ИзменениеЦеныБезНДССоСкидкойРегл = 0;
		Иначе
			СтрокаТаблицы.ИзменениеЦеныБезНДССоСкидкойРегл = СтрокаТаблицы.ИзменениеСуммыБезНДСРегл / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);

	Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), "НалоговоеНазначение");
				
	КонецЕсли;

	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаПоУслугам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		
		Для Каждого СтрокаУслуги Из ТаблицаПоУслугам Цикл
		
			СтрокаУслуги.Количество = 0;	
			СтрокаУслуги.ЦенаМестаБезНДСБезСкидкиРегл = 0;
			СтрокаУслуги.ИзменениеКоличества = 0;
			СтрокаУслуги.ИзменениеЦеныБезНДССоСкидкойРегл = 0;
			СтрокаУслуги.ЕдиницаИзмеренияКод = "";
			СтрокаУслуги.ЕдиницаИзмерения = "грн";
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТаблицаПоУслугам;

КонецФункции // ПодготовитьТаблицуУслуг()


Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления)

	Возврат  ПодготовитьТаблицуТоваров(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецФункции // ПодготовитьТаблицуТоваров()


Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления)

	Возврат  ПодготовитьТаблицуТоваров(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецФункции // ПодготовитьТаблицуТоваров()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("СтавкаНДС", 	  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТары.Колонки.Добавить("ИзменениеСуммыСНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ИзменениеСуммыСНДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.ИзменениеСуммыСНДСВал = СтрокаТаблицы.ИзменениеСуммы;
		
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ИзменениеСуммыСНДСРегл = СтрокаТаблицы.ИзменениеСуммы;
		Иначе
			СтрокаТаблицы.ИзменениеСуммыСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ИзменениеСуммы, 
																				СтруктураШапкиДокумента.ВалютаДокумента,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																				СтруктураШапкиДокумента.КурсВалютыДокумента, 
																				СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
																				СтруктураШапкиДокумента.КратностьВалютыДокумента,
																				СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
																				,ПогрешностиОкругления, "СуммаСНДСРегл");

		КонецЕсли;

	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// по фирме не ведется учет НДС, проводить документ не имеет смысла
		ОбщегоНазначения.СообщитьОбОшибке("Фирма не является плательщиком НДС!", Отказ, Заголовок);
	КонецЕсли;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НалоговаяНакладная, ВидОперации, Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетНДС, СЧетУчетаНДС");
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
	
		Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		  
			СтруктураОбязательныхПолей.Удалить("Контрагент");  
			
		КонецЕсли;
		
		СтруктураОбязательныхПолей.Удалить("ДоговорКонтрагента");  
		СтруктураОбязательныхПолей.Удалить("КурсВзаиморасчетов");  
		СтруктураОбязательныхПолей.Удалить("КратностьВзаиморасчетов");  
		
  	КонецЕсли;
  
	Если    СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
	    СтруктураОбязательныхПолей.Вставить("Сделка");	
	КонецЕсли;
	
	Если ВключаетсяВУточняющийРасчет Тогда
		СтруктураОбязательныхПолей.Вставить("УточняемыйПериод");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, СтавкаНДС, НалоговоеНазначение, СтатьяКнигиПродаж");
	
	Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		
		СтруктураОбязательныхПолей.Удалить("НалоговоеНазначение");
				
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()


// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Содержание, Сумма, СтавкаНДС, НалоговоеНазначение, СтатьяКнигиПродаж");
	                                                                                                       
	Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		
		СтруктураОбязательныхПолей.Удалить("НалоговоеНазначение");
				
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()


// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
                                                          Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма, НалоговоеНазначение");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()


Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок)
   	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, НалоговоеНазначение, СтатьяКнигиПродаж");
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры


Процедура ПроверитьЗаполнениеТабличнойЧастиНематериальныеАктивы(ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "НематериальныеАктивы";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма, СтавкаНДС, НалоговоеНазначение, СтатьяКнигиПродаж");
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА,
							  Отказ, Заголовок)

	// П2 на отрицательную сумму, должна формировать движения на дату регистрации в ЕРНН в любом случае
	Если//СтруктураШапкиДокумента.РегистрируетсяВЕРННПокупателем
		СтруктураШапкиДокумента.СуммаНДСДокумента < 0
		И СтруктураШапкиДокумента.Дата >= глЗначениеПеременной("ДатаВступленияВСилуЗУ643")
		И СтруктураШапкиДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = '0001-01-01' Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru = 'Не указан период включения в Декларацию по НДС (реквизит ""Включить в Декларацию за:"")! Проводки не сформированы.'; uk = 'Не зазначений період включення до Декларації з ПДВ (реквізит ""Включити до Декларації за:"")! Проводки не сформовані.'"), , Заголовок);
		Возврат; 
	
	КонецЕсли;
							  
	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
	ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
	ДвиженияПоРегиструКнигаПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
						  
КонецПроцедуры // ДвиженияПоРегистрам()


Процедура ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
	
	Если ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка 
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат 
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат 
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка 
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		// По освобожденным от НДС операциям проводки не формируются
		Возврат
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;

	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС","ИзменениеСуммыНДСРегл");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС","ИзменениеСуммыНДСРегл");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС","ИзменениеСуммыНДСРегл");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// НематериальныеАктивы
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС","ИзменениеСуммыНДСРегл");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	
	ТаблицаДвижений.Свернуть("СделкаРегл,СчетУчетаНДС","ИзменениеСуммыНДСРегл");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ИзменениеСуммыНДСРегл <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ?(СтруктураШапкиДокумента.СуммаНДСДокумента < 0  И СтруктураШапкиДокумента.Дата >= глЗначениеПеременной("ДатаВступленияВСилуЗУ643"), 
														СтруктураШапкиДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных, 
														СтруктураШапкиДокумента.Дата
												  );
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ИзменениеСуммыНДСРегл;
			Проводка.Содержание                 = "НДС: налоговый кредит: корректировка (Приложение 2)";
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицы.СделкаРегл);

			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоКт3);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда 
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	
	ТаблицаДвиженийТара 	  = ТаблицаДвижений.Скопировать();
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);

	// НематериальныеАктивы
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);

	ТаблицаПродаж.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ТаблицаПродаж.Колонки.ИзменениеСуммыБезНДСВал.Имя = "БазаНДС";
	ТаблицаПродаж.Колонки.ИзменениеСуммыНДСВал   .Имя = "СуммаНДС";
	ТаблицаПродаж.Колонки.СделкаРегл   			 .Имя = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	Если ЭтоВозврат(СтруктураШапкиДокумента.ВидОперации) Тогда
		//возврат
		
		Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		  
		  	СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.ВозвратРозница;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
			
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат;	
			
		Иначе
			
		  	СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			
		КонецЕсли;		
		
		ТаблицаДвижений.ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
		
		//инвертируем суммы
		Для Каждого Строка Из ТаблицаДвижений Цикл
			Строка.БазаНДС 					= -Строка.БазаНДС;
			Строка.СуммаНДС 				= -Строка.СуммаНДС;
		КонецЦикла;
		
	Иначе
		
		Если СтруктураШапкиДокумента.НалоговаяНакладная.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
		Иначе
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
		КонецЕсли;
		
		// корректировка сумм НДС
		ТаблицаДвижений.ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС, "КодОперации");

	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС,НалоговоеНазначение","ИзменениеСуммыСНДСВал");
	ТаблицаКопия.Колонки.ИзменениеСуммыСНДСВал.Имя 	= "БазаНДС";
	ТаблицаКопия.Колонки.СделкаРегл.Имя 			= "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
	
	Если ЭтоВозврат(СтруктураШапкиДокумента.ВидОперации) Тогда
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат, "СобытиеНДС");
		
		//инвертируем суммы
		Для Каждого Строка Из ТаблицаДвиженийТара Цикл
			Строка.БазаНДС 	= -Строка.БазаНДС;
		КонецЦикла;
	Иначе
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
	КонецЕсли;
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС, "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод = ?(СтруктураШапкиДокумента.СуммаНДСДокумента < 0  И СтруктураШапкиДокумента.Дата >= глЗначениеПеременной("ДатаВступленияВСилуЗУ643"), 
									СтруктураШапкиДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных, 
									СтруктураШапкиДокумента.Дата
								);
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		НаборДвижений.мПериод = ?(СтруктураШапкиДокумента.СуммаНДСДокумента < 0  И СтруктураШапкиДокумента.Дата >= глЗначениеПеременной("ДатаВступленияВСилуЗУ643"), 
									СтруктураШапкиДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных, 
									СтруктураШапкиДокумента.Дата
								);
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж()							  


Процедура ДвиженияПоРегиструКнигаПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
	
	НаборДвижений = Движения.КнигаПродаж;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл");
	ТаблицаКопия.Колонки.ИзменениеСуммыБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.ИзменениеСуммыНДСРегл	 .Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл");
	ТаблицаКопия.Колонки.ИзменениеСуммыБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.ИзменениеСуммыНДСРегл	 .Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл");
	ТаблицаКопия.Колонки.ИзменениеСуммыБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.ИзменениеСуммыНДСРегл	 .Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// НематериальныеАктивы
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл");
	ТаблицаКопия.Колонки.ИзменениеСуммыБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.ИзменениеСуммыНДСРегл	 .Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ФормаРасчетов, "ФормаРасчетов");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод = ?(СтруктураШапкиДокумента.СуммаНДСДокумента < 0  И СтруктураШапкиДокумента.Дата >= глЗначениеПеременной("ДатаВступленияВСилуЗУ643"), 
									СтруктураШапкиДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных, 
									СтруктураШапкиДокумента.Дата
								);
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.КнигаПродаж.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструКнигаПродаж


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // предусмотрен только ввод на основании НалоговойНакладной
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапускатьОбработку = Истина;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	НалоговаяНакладная = Основание;
	ЗаполнитьУсловиеПродажи();
	ЗаполнитьВидДоговора();
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.НалоговаяНакладная")  Тогда
	
		ФормаРасчетов = Основание.ФормаРасчетов;
		
		ВидДоговора 						= Основание.ВидДоговора;
		
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Основание.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
	
		// определим вид операции если обработка формирования не запускается
		Если Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации Тогда 
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат;
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда	
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат;
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации Тогда	
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат;
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда	
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат;
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат;	
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка;	
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка;	
			ЗапускатьОбработку = Ложь;
			
		КонецЕсли;
	
	// изменения в комиссионной торговле в 2011 году. 
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		  ИЛИ ТипОснования = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию") 
		  ИЛИ ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Если Основание.Дата < '20110101' Тогда
			
			ТекстПредупреждения = "Приложение 2 к налоговой накладной можно вводить только на основании документов, оформленных начиная с 2011 года!";
			#Если Клиент Тогда
				Предупреждение(ТекстПредупреждения);
			#Иначе
				Сообщить(ТекстПредупреждения, СтатусСообщения.Информация);
			#КонецЕсли
			
			мНеОткрыватьФормуДокумента = Истина;
			Возврат;
			
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		//	И НЕ Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		//	
		//	
		//	Предупреждение("Приложение 2 к налоговой накладной можно вводить только на основании документов возврата от комиссионера");
		//	
		//	мНеОткрыватьФормуДокумента = Истина;
		//	Возврат;
			
		КонецЕсли;
		
		// возможно, в документе указаны облагаемые и не облагаемые НДС товары
		ЕстьОблагаемыеОперации = Истина;
		ЕстьНеОблагаемыеОперации = Истина;
		ЕстьНеНДСперации = Истина;
		
		Если ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  Тогда
			
			СтавкиНДС = Основание.Товары.Выгрузить(,"СтавкаНДС,Сумма, СуммаПередачи");
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию")  Тогда	
			
			СтавкиНДС = Основание.Товары.Выгрузить(,"СтавкаНДС,Сумма, СуммаСтарая");
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда	
			
			СтавкиНДС = Основание.Товары.Выгрузить(,"СтавкаНДС");
			
		КонецЕсли;
		
		Инд = 0;
		Пока Инд < СтавкиНДС.Количество() Цикл
			
			Строка = СтавкиНДС[Инд];
			
			Если (ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
				   И (Строка.Сумма = Строка.СуммаПередачи))
			
			ИЛИ  (ТипОснования = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию") 
				  И (Строка.Сумма = Строка.СуммаСтарая)) Тогда
				 
				 СтавкиНДС.Удалить(Строка);
			
			Иначе
			
				Инд = Инд + 1;
			
			КонецЕсли;
		
		КонецЦикла;
		
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС20) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС0) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС7) = Неопределено
			Тогда
			ЕстьОблагаемыеОперации = Ложь;	
		КонецЕсли;
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.БезНДС) = Неопределено Тогда
			ЕстьНеОблагаемыеОперации = Ложь;	
		КонецЕсли;
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.НеНДС) = Неопределено Тогда
			ЕстьНеНДСперации = Ложь;	
		КонецЕсли;
		
		Если  НЕ ЕстьОблагаемыеОперации 
			И НЕ ЕстьНеОблагаемыеОперации
			И НЕ ЕстьНеНДСперации Тогда
		
			//Сообщить("Нет данных для заполнения документа!");
			
			мНеОткрыватьФормуДокумента = Истина;
			Возврат;
		
		КонецЕсли;
		
		ТекущийДокументЗаполнен = Ложь;
		Если ЕстьОблагаемыеОперации Тогда
		
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
			ДокументОснование = Основание;
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка;
			Дата = Основание.Дата;
			// Этот документ всегда имеет установленный флаг УчитыватьНДС
			УчитыватьНДС = Истина;
			АвторасчетНДС = Ложь;
			
			СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
			
			//Заполним ТЧ
			Если ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  Тогда
				ЗаполнитьПоОтчетуКомиссионераОПродажах();
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию")  Тогда	
				ЗаполнитьПоПереоценкеТоваровОтданныхНаКомиссию()
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда	
				//ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат;
				//ЗаполнитьПоВозвратуТоваровОтПокупателя();
				//ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат;
				//ЗаполнитьПоВозвратуТоваровОтПокупателя();
				//***найти налоговую накладную по документу реализации  AL
				ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат;
				//ЗаполнитьПоВозвратуТоваровОтПокупателя();
				ЭтотОбъект.АвторасчетНДС=Ложь;//бедлместная 24-07-13
				ЗаполнитьПоВозвратуТоваровОтПокупателя();
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
				//Сообщить("ДокументОснование "+ДокументОснование);
				
				ТекстЗапроса =
				"ВЫБРАТЬ
				|    ВозвратТоваровОтПокупателяТовары.ДокументПартии
				|ПОМЕСТИТЬ Реализация
				|ИЗ
				|    Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
				|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
				|        ПО ВозвратТоваровОтПокупателя.Ссылка = ВозвратТоваровОтПокупателяТовары.Ссылка
				|ГДЕ
				|    ВозвратТоваровОтПокупателяТовары.НомерСтроки = 1
				|    И ВозвратТоваровОтПокупателя.Ссылка = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|    НалоговаяНакладная.Ссылка
				|ИЗ
				|    Реализация КАК Реализация
				|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НалоговаяНакладная КАК НалоговаяНакладная
				|        ПО Реализация.ДокументПартии = НалоговаяНакладная.ДокументОснование";
				
				Запрос.Текст = ТекстЗапроса;
				Выборка = Запрос.Выполнить().Выбрать();
				//Сообщить("Выборка.Количество() "+Выборка.Количество());
				Если Выборка.Количество()>0 тогда
					Выборка.Следующий();
					НалоговаяНакладная=Выборка.Ссылка;                    
					ЗаполнитьНомераСтрокИзНН(НалоговаяНакладная);
				Иначе
					Сообщить("Не найдена налоговая накладная... ");
				КонецЕсли;
				//***AL
			КонецЕсли;
			
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЕстьНеОблагаемыеОперации Тогда
			
			Если ТекущийДокументЗаполнен Тогда
				новДок = Документы.Приложение2КНалоговойНакладной.СоздатьДокумент();
			Иначе
				новДок = ЭтотОбъект;
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(новДок, Основание);
			новДок.ДокументОснование = Основание;
			новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка;
			новДок.Дата = Основание.Дата;
			
			// Этот документ всегда имеет установленный флаг УчитыватьНДС
			новДок.УчитыватьНДС = Истина;
			новДок.АвторасчетНДС = Ложь;
			
			новДок.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			новДок.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
			
			//Заполним ТЧ
			Если ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  Тогда
				новДок.ЗаполнитьПоОтчетуКомиссионераОПродажах();
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию")  Тогда	
				новДок.ЗаполнитьПоПереоценкеТоваровОтданныхНаКомиссию()
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда	
				новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат;
				новДок.ЗаполнитьПоВозвратуТоваровОтПокупателя();
			КонецЕсли;
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
			Иначе
				ФормаНовДок = НовДок.ПолучитьФорму(,,Новый УникальныйИдентификатор);
				ФормаНовДок.Открыть();
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЕстьНеНДСперации Тогда
			
			Если ТекущийДокументЗаполнен Тогда
				новДок = Документы.Приложение2КНалоговойНакладной.СоздатьДокумент();
			Иначе
				новДок = ЭтотОбъект;
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(новДок, Основание);
			новДок.ДокументОснование = Основание;
			новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка;
			новДок.Дата = Основание.Дата;
			
			// Этот документ всегда имеет установленный флаг УчитыватьНДС
			новДок.УчитыватьНДС = Истина;
			новДок.АвторасчетНДС = Ложь;
			
			НовДок.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
			
			Если ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  Тогда
				новДок.ЗаполнитьПоОтчетуКомиссионераОПродажах();
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию")  Тогда	
				новДок.ЗаполнитьПоПереоценкеТоваровОтданныхНаКомиссию()
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда	
				новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат;

			    новДок.ЗаполнитьПоВозвратуТоваровОтПокупателя();
			КонецЕсли;
			
			//Заполним ТЧ
			новДок.ЗаполнитьПоОтчетуКомиссионераОПродажах(Основание);
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
			Иначе
				ФормаНовДок = НовДок.ПолучитьФорму(,,Новый УникальныйИдентификатор);
				ФормаНовДок.Открыть();
			КонецЕсли;
		
		КонецЕсли;		
		
		Если НЕ ТекущийДокументЗаполнен Тогда
			ТекстПредупреждения = "Нет данных для заполнения документа!";
			#Если Клиент Тогда
				Предупреждение(ТекстПредупреждения);
			#Иначе
				Сообщить(ТекстПредупреждения, СтатусСообщения.Информация);
			#КонецЕсли
		КонецЕсли;
		
		Возврат	
		
	
	КонецЕсли;	
		
		
	Если ЗапускатьОбработку = Ложь Тогда
		
		СкопироватьТовары();
		СкопироватьВозвратнуюТару();
		СкопироватьУслуги();
		СкопироватьОС();
		СкопироватьНематериальныеАктивы();
		
		УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
		
		Возврат;
	КонецЕсли; 
	
	// при вводе на основании запускается специальная обработка, которая и
	// формирует приложения
	мНеОткрыватьФормуДокумента = Истина;

	ОбработкаФормированияНН = Обработки.ФормированиеНалоговыхНакладных.Создать();
	ОбработкаФормированияНН.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если НЕ ЗначениеЗаполнено(Основание.Организация) Тогда
		Сообщить("В документе не указана организация! Заполнение невозможно.");
		Возврат;
	Иначе
		ОбработкаФормированияНН.Организация = Основание.Организация;
	КонецЕсли;
	
	
	ОтборДоговоров = Новый ТаблицаЗначений;
	ОтборДоговоров.Колонки.Добавить("РасчетыВозврат");
	ОтборДоговоров.Колонки.Добавить("ДоговорКонтрагента");
	ОтборДоговоров.Колонки.Добавить("Сделка");                                           
	ОтборДоговоров.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата"));	
	ОтборДоговоров.Колонки.Добавить("ЗаТару", 		Новый ОписаниеТипов("Булево"));
	ОтборДоговоров.Колонки.Добавить("СтавкаНДС", 	Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ОтборДоговоров.Колонки.Добавить("НалоговоеНазначение", 	Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	
	Если НЕ ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда
		
		Сообщить("В документе не указан договор контрагента! Заполнение невозможно.");
		Возврат;
		
	Иначе	
		
		СтрокаОтбора 					= ОтборДоговоров.Добавить();
		
		СтрокаОтбора.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Возврат;
		СтрокаОтбора.Дата               = '00010101';
		
		ОбработкаФормированияНН.Дата 	= '00010101';	
		
		СделкаНалоговыйУчет = Основание.Сделка;	
					
		Если    Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			ИЛИ Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					
			СтрокаОтбора.Сделка = СделкаНалоговыйУчет
					
		Иначе
			
			СтрокаОтбора.Сделка = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;

	// получим данные регистра ОжидаемыйИПодтвержденныйНДСПродаж на текущий момент
	ОбработкаФормированияНН.ОбновитьДоговора(ОтборДоговоров);
	
	СтрокаИсточниковНоменклатуры = ОбработкаФормированияНН.ИсточникиНоменклатуры.Добавить();
	СтрокаИсточниковНоменклатуры.Документ 			= Основание;
	СтрокаИсточниковНоменклатуры.Сделка 			= СтрокаОтбора.Сделка;
	СтрокаИсточниковНоменклатуры.ДоговорКонтрагента = СтрокаОтбора.ДоговорКонтрагента;
	СтрокаИсточниковНоменклатуры.РасчетыВозврат 	= СтрокаОтбора.РасчетыВозврат;
	СтрокаИсточниковНоменклатуры.Дата			 	= СтрокаОтбора.Дата;
	
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Документ", 			Основание);
	СтруктураОтбора.Вставить("ДоговорКонтрагента", 	СтрокаОтбора.ДоговорКонтрагента);
	СтруктураОтбора.Вставить("Сделка", 				СтрокаОтбора.Сделка);
	СтруктураОтбора.Вставить("РасчетыВозврат", 		СтрокаОтбора.РасчетыВозврат);
	СтруктураОтбора.Вставить("Дата", 				СтрокаОтбора.Дата);
         
	ОбработкаФормированияНН.ЗаполнитьТабличныеЧасти(СтруктураОтбора);
	
	ТаблицаЧастичнойОтгрузки = Неопределено;
	МожноФормироватьНалоговыеНакладные = ОбработкаФормированияНН.МожноФормироватьНалоговыеНакладные(СтруктураОтбора, ТаблицаЧастичнойОтгрузки);
	Если МожноФормироватьНалоговыеНакладные Тогда
		
		ОбработкаФормированияНН.ОткрыватьДокументы = Истина;
		ОбработкаФормированияНН.СформироватьНалоговыеДокументы();	
		Возврат;	
		
	ИначеЕсли НЕ ОбработкаФормированияНН.БудутСформированыНалоговыеНакладные(ТаблицаЧастичнойОтгрузки) Тогда
		  
#Если Клиент Тогда
		Ответ = Вопрос("По данной налоговой накладной нет корректировок налоговых обязательств. Открыть форму обработки для заполнения документа ""Приложение 2"" номенклатурным составом?", РежимДиалогаВопрос.ДаНет);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
#Иначе
		Сообщить("По данной налоговой накладной нет корректировок налоговых обязательств!", СтатусСообщения.Информация);
		Возврат;
#КонецЕсли
		
		
	Иначе
#Если Клиент Тогда
	
		Ответ = Вопрос("На текущий момент сумма неподтвержденных корректировок налоговых обязательств по одной или нескольким ставкам НДС меньше соответствующей суммы документа. Заполнить документ ""Приложение 2"" номенклатурным составом невозможно. Открыть форму обработки заполнения номенклатурным составом?
			|
			|	Да		- будет открыта обработка заполнения налоговых накладных товарным составом 
			|	Нет		- будут сформированы налоговые накладные без товарного состава
			|	Отмена	- отказ от ввода налоговых накладных", РежимДиалогаВопрос.ДаНетОтмена);
			
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		
			// открываем НН заполненную строками "частичная отгрузка"
			ОбработкаФормированияНН.ПодготовитьНоменклатурныйСоставПриЧастичнойОтгрузке(СтруктураОтбора, ТаблицаЧастичнойОтгрузки);
			ОбработкаФормированияНН.ОткрыватьДокументы = Истина;
			ОбработкаФормированияНН.СформироватьНалоговыеДокументы();	
			Возврат;	
		ИначеЕсли НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
#Иначе
		Сообщить("На текущий момент сумма неподтвержденных корректировок налоговых обязательств по одной или нескольким ставкам НДС меньше соответствующей суммы документа. Заполнить налоговую накладную номенклатурным составом невозможно!", СтатусСообщения.Информация);
#КонецЕсли

	КонецЕсли;
	
	// необходимо подкорректировать номенклатурный состав.
	// откроем обработку. Но в ТЧ Договора может не быть строк - если остатков по регистру ОжидаемыйИПодтвержденныйНДСПродаж не текущий момент нет
	// Добавим строки при необходимости
	Для каждого СтрокаОтбораДоговоров Из ОтборДоговоров Цикл
		
		Если ОбработкаФормированияНН.Договора.НайтиСтроки(Новый Структура("ДоговорКонтрагента, Сделка",СтрокаОтбораДоговоров.ДоговорКонтрагента,СтрокаОтбораДоговоров.Сделка)).Количество() = 0 Тогда
			
			СтрокаДоговоров = ОбработкаФормированияНН.Договора.Добавить();
			СтрокаДоговоров.ДоговорКонтрагента 	= СтрокаОтбораДоговоров.ДоговорКонтрагента;
			СтрокаДоговоров.Сделка 				= СтрокаОтбораДоговоров.Сделка;
			СтрокаДоговоров.РасчетыВозврат 		= СтрокаОтбораДоговоров.РасчетыВозврат;
			СтрокаДоговоров.Дата 				= СтрокаОтбораДоговоров.Дата;

			
			СтрокаИсточниковНоменклатуры = ОбработкаФормированияНН.ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтрокаОтбораДоговоров.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 				= СтрокаОтбораДоговоров.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= СтрокаОтбораДоговоров.РасчетыВозврат;
			СтрокаИсточниковНоменклатуры.Дата 					= СтрокаОтбораДоговоров.Дата;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ФормаОбоработки =  ОбработкаФормированияНН.ПолучитьФорму();
	ФормаОбоработки.ВосстанавливатьЗначенияПриОткрытии = Ложь;
	ФормаОбоработки.ОткрыватьДокументы = Истина;
	ФормаОбоработки.Открыть();	
	ФормаОбоработки.ЭлементыФормы.Панель.ТекущаяСтраница = ФормаОбоработки.ЭлементыФормы.Панель.Страницы.Данные;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь;
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если Товары.Количество() > 0
		И (ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка) Тогда

		Товары.Очистить();

	КонецЕсли;

	// Если договор внешнеэкономический, то надо почистить закладку "ВозвратнаяТара".
	Если ВозвратнаяТара.Количество() > 0
		И (   ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка) Тогда

		ВозвратнаяТара.Очистить();

	КонецЕсли;
	
	Если Услуги.Количество() > 0 
		И (   ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат) Тогда
		  
		Услуги.Очистить();
		
	КонецЕсли;
	
	Если ОС.Количество() > 0 
		И (   ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка) Тогда
		  
		ОС.Очистить();
		
	КонецЕсли;

	Если НематериальныеАктивы.Количество() > 0 
		И (   ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка) Тогда
		  
		НематериальныеАктивы.Очистить();
		
	КонецЕсли;

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары              , ЭтотОбъект, ПогрешностиОкругления, "Товары"              , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги              , ЭтотОбъект, ПогрешностиОкругления, "Услуги"              , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(ОС                  , ЭтотОбъект, ПогрешностиОкругления, "ОС"                  , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(НематериальныеАктивы, ЭтотОбъект, ПогрешностиОкругления, "НематериальныеАктивы", "ИзменениеСуммы", "ИзменениеСуммыНДС");
	КонецЕсли;
	
	// Посчитать суммы документа и записать их в соответствующие реквизиты шапки для показа в журналах
	СуммаДокумента 	  = 0 + Товары.Итог("ИзменениеСуммы") 	 + Услуги.Итог("ИзменениеСуммы") 	+ ОС.Итог("ИзменениеСуммы")    + НематериальныеАктивы.Итог("ИзменениеСуммы");
	СуммаНДСДокумента = 0 + Товары.Итог("ИзменениеСуммыНДС") + Услуги.Итог("ИзменениеСуммыНДС") + ОС.Итог("ИзменениеСуммыНДС") + НематериальныеАктивы.Итог("ИзменениеСуммыНДС");;

	Если  НЕ ЗначениеЗаполнено(Сделка) 
		И НЕ Сделка = Неопределено Тогда
		Сделка = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента)
		И НЕ (    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		      ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	    И ЗначениеЗаполнено(Сделка) Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	Если ТипПричиныНевыдачиПокупателю > 1
		И Дата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа10") Тогда
		
		ЭлектронныйДокумент = Ложь;
	    ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
		
	КонецЕсли;
	
	// поставим флаг "Требует регистрация в реестре"
	Если Дата >= '2015-01-01' Тогда
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
		ЭлектронныйДокумент = Истина;
	ИначеЕсли НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных Тогда
		
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
		
	ИначеЕсли ЭлектронныйДокумент Тогда
		
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
	
		
	Иначе
		
		Если ТипПричиныНевыдачиПокупателю > 0 Тогда
			// мы не управляем флажком ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных
			// для налоговых накладных, которые не выдаются покупателю
			// согласно разъяснению ЕБНЗ такие налоговые не должны регистрироваться в Едином реестре
			
		Иначе	
			
			ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
		
			Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				НДСРегл = СуммаНДСДокумента;	
			Иначе 
				НДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСДокумента, ВалютаДокумента,
													мВалютаРегламентированногоУчета, 
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
													1,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
			КонецЕсли;
			
			Если Дата >= '20120101' Тогда
				// или сумма НДС в документе больше 10 000 грн
				Если НДСРегл > 10000 Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
					
				// или имеются подакцизные/импортированные товары
				// этот факт определим так - если в строке указан код УКТЗЭД - считаем что условие выполняется.
				ИначеЕсли   Товары.НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> Товары.Количество()
						ИЛИ ОС.    НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> ОС.Количество()
						ИЛИ НематериальныеАктивы.   НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> НематериальныеАктивы.Количество() Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
			ИначеЕсли Дата >= '20110701' Тогда
				// сумма НДС в документе больше 100 000 грн
				Если НДСРегл > 100000 Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
			ИначеЕсли Дата >= '20110401' Тогда
				// сумма НДС в документе больше 500 000 грн
				Если НДСРегл > 500000 Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
			ИначеЕсли Дата >= '20110101' Тогда
				// сумма НДС в документе больше 1 000 000 грн
				Если НДСРегл > 1000000 Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина
			   И НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь Тогда
			   
			   Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Перед выгрузкой документа: %1 в Единый реестр налоговых накладных
                                                    |необходимо также зарегистрировать исходную налоговую накладную: %2!'; uk = 'Перед вивантаженням документа: %1 до Єдиного реєстра податкових накладних
                                                    |необхідно також зареєструвати в ньому податкову накладну: %2!'"), Ссылка, НалоговаяНакладная), СтатусСообщения.Важное);
			   
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если глЗначениеПеременной("ДатаНачалаИспользованияФормыННПоЛекарствам") <= Дата Тогда
		// уже приняли новую форму, использование в спец. режиме особого значение - не допустимо.
		Если СпецРежимНалогообложения = 7 Тогда
			СпецРежимНалогообложения = 0;
		КонецЕсли;
	Иначе	
		// еще не приняли новую форму, для НН с НДС 7% нужно в спец. режиме указывать особое значение (7)
		Отбор = Новый Структура("СтавкаНДС", Перечисления.СтавкиНДС.НДС7);
		Если ВДокументеЕстьСтавкаНДС7() Тогда
			СпецРежимНалогообложения = 7;
		Иначе	
			Если СпецРежимНалогообложения = 7 Тогда
				СпецРежимНалогообложения = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Дата >= '2015-01-01' Тогда
		Если  НалоговаяНакладная.Дата >= '2015-02-01'
			И ТипПричиныНевыдачиПокупателю = 0
			И СуммаНДСДокумента < 0 Тогда
			РегистрируетсяВЕРННПокупателем = Истина;
		Иначе
			РегистрируетсяВЕРННПокупателем = Ложь;
		КонецЕсли;			
		
		Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
			ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
			ЭлектронныйДокумент = Ложь;
			РегистрируетсяВЕРННПокупателем = Ложь;
		КонецЕсли;
		
	Иначе
		РегистрируетсяВЕРННПокупателем = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью


Функция ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок = "")
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"                      , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора"                      , "ВидДоговора");		
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке,  "ДоговорКонтрагента", "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
		
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// дополним структуру значением виртуального реквизита
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	
	// Прежде всего, проверим заполнение реквизита Организация в шапке документа
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	// Теперь позовем общую процедуру проверки
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	// Организация не заполнена, получать учетную политику нет смысла
	Если Отказ Тогда
		Возврат СтруктураШапкиДокумента;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация,истина, Заголовок);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;

	Если НЕ Отказ Тогда		
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаРегл.ЕстьНДС);
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции


Процедура ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА)
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// ТОВАРЫ
	// Получим необходимые для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
    СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("Характеристика"			, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод"       , "ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код");
	СтруктураПолей.Вставить("КодЛьготы"                 , "Номенклатура.КодЛьготы");
	СтруктураПолей.Вставить("НомерСтрокиНН"             , "НомерСтрокиНН");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("ИзменениеКоличества"       , "ИзменениеКоличества");	
	СтруктураПолей.Вставить("ИзменениеЦены"             , "ИзменениеЦены");
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");	
	СтруктураПолей.Вставить("ИзменениеСуммыНДС"         , "ИзменениеСуммыНДС");	
	СтруктураПолей.Вставить("Причина"                 	, "Причина");	
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаКорректировки"  		, "ДатаКорректировки");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураСложныхПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентАвтоматическихСкидок + ПроцентСкидкиНаценки");	
	СтруктураПолей.Вставить("Цена", "Цена");	
	СтруктураПолей.Вставить("Сумма", "Сумма");	
	СтруктураПолей.Вставить("НДС", "СуммаНДС");	
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// УСЛУГИ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Содержание");
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("КодУКТВЭД"  		, "");
	СтруктураПростыхПолей.Вставить("НомерГТД"           , "");
	СтруктураПростыхПолей.Вставить("ДатаГТД"            , "");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.БазоваяЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод"       , "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("КодЛьготы"                 , "Номенклатура.КодЛьготы");
	СтруктураПолей.Вставить("НомерСтрокиНН"             , "НомерСтрокиНН");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("ИзменениеКоличества"       , "ИзменениеКоличества");	
	СтруктураПолей.Вставить("ИзменениеЦены"             , "ИзменениеЦены");
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");	
	СтруктураПолей.Вставить("ИзменениеСуммыНДС"         , "ИзменениеСуммыНДС");	
	СтруктураПолей.Вставить("Причина"                 	, "Причина");	
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаКорректировки"  		, "ДатаКорректировки");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");	
	СтруктураПолей.Вставить("Цена", "Цена");	
	СтруктураПолей.Вставить("Сумма", "Сумма");	
	СтруктураПолей.Вставить("НДС", "СуммаНДС");	

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Услуг для проведения или печати
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	
	// ОСНОВНЫЕ СРЕДСТВА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ОС".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "ОсновноеСредство.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмеренияКод", "2009");
	СтруктураПростыхПолей.Вставить("КодЛьготы"          , "");
	СтруктураПолей.Вставить("НомерСтрокиНН"    	        , "НомерСтрокиНН");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураПолей.Вставить("ИзменениеКоличества"       , "ИзменениеКоличества");	
	СтруктураПолей.Вставить("ИзменениеЦены"             , "ИзменениеЦены");
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");	
	СтруктураПолей.Вставить("ИзменениеСуммыНДС"         , "ИзменениеСуммыНДС");	
	СтруктураПолей.Вставить("Причина"                 	, "Причина");	
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаКорректировки"  		, "ДатаКорректировки");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");
	СтруктураПростыхПолей.Вставить("ПроцентСкидкиНаценки", 0);	
	СтруктураПолей.Вставить("Цена", "Сумма");	
	СтруктураПолей.Вставить("Сумма", "Сумма");	
	СтруктураПолей.Вставить("НДС", "СуммаНДС");	
		
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Основных Средств для проведения или печати
	ТаблицаПоОС = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// НЕМАТЕРИАЛЬНЫЕ АКТИВЫ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "НематериальныеАктивы".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "НематериальныйАктив.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмеренияКод" , "2009");
	СтруктураПростыхПолей.Вставить("КодЛьготы"          , "");
	СтруктураПолей.Вставить("НомерСтрокиНН"    	        , "НомерСтрокиНН");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураПолей.Вставить("ИзменениеКоличества"       , "ИзменениеКоличества");	
	СтруктураПолей.Вставить("ИзменениеЦены"             , "ИзменениеЦены");
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");	
	СтруктураПолей.Вставить("ИзменениеСуммыНДС"         , "ИзменениеСуммыНДС");	
	СтруктураПолей.Вставить("Причина"                 	, "Причина");	
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаКорректировки"  		, "ДатаКорректировки");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");
	СтруктураПростыхПолей.Вставить("ПроцентСкидкиНаценки", 0);	
	СтруктураПолей.Вставить("Цена", "Сумма");	
	СтруктураПолей.Вставить("Сумма", "Сумма");	
	СтруктураПолей.Вставить("НДС", "СуммаНДС");	
		
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Нематериальных активов для проведения или печати
	ТаблицаПоНМА = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// ТАРА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ВозвратнаяТара".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"  , ПланыСчетов.Хозрасчетный.ПустаяСсылка());

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);

	// Подготовим таблицу тары для проведения или печати.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	Если глЗначениеПеременной("ДатаНачалаИспользованияФормыННПоЛекарствам") > Дата Тогда
		Если ВДокументеЕстьСтавкаНДС7ИДругиеСтавки() Тогда
			Отказ = Истина;			   
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//*** Е.Г. 150911
	Если ДатаВключенияВЕдиныйРеестрНалоговыхНакладных=Дата(1,1,1) тогда
		 ЭтотОбъект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных= ЭтотОбъект.Дата;
		 ЭтотОбъект.ВключенаВЕдиныйРеестрНалоговыхНакладных		= Истина;
		 ЭтотОбъект.Записать();
	КонецЕсли;	 
	
	// Подготовим структуру шапки документа
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок); 
	
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицы
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиНематериальныеАктивы(ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ, Заголовок);


	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,
							ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

//***//***
Процедура ЗаполнитьПоРеализации() Экспорт
   Запрос = Новый Запрос;
   Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
   Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
   //Сообщить("ЗаполнитьПоВозвратуТоваровОтПокупателя ");
   ТекстЗапроса =
   "ВЫБРАТЬ
   |    РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
   |    РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест,
   |    РеализацияТоваровУслугТовары.Количество,
   |    РеализацияТоваровУслугТовары.КоличествоМест,
   |    РеализацияТоваровУслугТовары.Коэффициент,
   |    РеализацияТоваровУслугТовары.Номенклатура,
   |    РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
   |    РеализацияТоваровУслугТовары.Цена,
   |    РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
   |    ВЫБОР
   |        КОГДА РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента = РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
   |            ТОГДА РеализацияТоваровУслугТовары.Ссылка.КурсВзаиморасчетов
   |        ИНАЧЕ 1
   |    КОНЕЦ КАК КурсДокумента,
   |    ВЫБОР
   |        КОГДА РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента = РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
   |            ТОГДА РеализацияТоваровУслугТовары.Ссылка.КратностьВзаиморасчетов
   |        ИНАЧЕ 1
   |    КОНЕЦ КАК КратностьДокумента,
   |    РеализацияТоваровУслугТовары.Сумма,
   |    РеализацияТоваровУслугТовары.СтавкаНДС,
   |    РеализацияТоваровУслугТовары.НалоговоеНазначение,
   |    РеализацияТоваровУслугТовары.СуммаНДС,
   |    РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
   |    РеализацияТоваровУслугТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС
   |ИЗ
   |    Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
   |ГДЕ
   |    РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
   |    И РеализацияТоваровУслугТовары.СтавкаНДС В(&ДопустимыеСтавкиНДС)";

   Запрос.Текст = ТекстЗапроса;
   
   Выборка = Запрос.Выполнить().Выбрать();
   Пока Выборка.Следующий() Цикл
       НоваяСтрока = Товары.Добавить();
       НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
       НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
       НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
       НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;        
       НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
       НоваяСтрока.Количество                 = Выборка.Количество;
       НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;

       НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

       НоваяСтрока.НалоговоеНазначение         = Выборка.НалоговоеНазначение;
       
       НоваяСтрока.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
               МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
               Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
               Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
               Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
               Выборка.СуммаВключаетНДС,
               УчитыватьНДС,
               СуммаВключаетНДС,
               Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));        
       
       НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
               МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
               Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
               Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
               Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
               Выборка.СуммаВключаетНДС,
               УчитыватьНДС,
               СуммаВключаетНДС,
               Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
               
               
               
       НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
                                                         Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
                                                         Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
               
       НоваяСтрока.ИзменениеСуммы         = -НоваяСтрока.Сумма;
       НоваяСтрока.ИзменениеСуммыНДС     = -НоваяСтрока.СуммаНДС;
       НоваяСтрока.ИзменениеКоличества = -НоваяСтрока.Количество;
       //СсылкаРеализации=Выборка.ДокументПартии;                                                  
       ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
       
       НоваяСтрока.Причина = "Повернення товару";
       
   КонецЦикла;    
КонецПроцедуры    

Функция ПечатьРеестраНакладных() Экспорт
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", 	Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Приложение2КНалоговойНакладной.Дата КАК ДатаДокумента,
	|	Приложение2КНалоговойНакладной.Организация,
	|	Приложение2КНалоговойНакладной.Организация.ЮрФизЛицо КАК ЮрФизЛицо,
	|	Приложение2КНалоговойНакладной.Контрагент КАК Поставщик,
	|	Приложение2КНалоговойНакладной.Номер КАК Номер
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
	|ГДЕ
	|	Приложение2КНалоговойНакладной.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Приложение2КНалоговойНакладнойВозвраты.НомерСтроки,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК Сумма,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ.СуммаВключаетНДС,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ.Дата КАК ДокументДата,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ.Номер КАК ДокументНомер
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Возвраты КАК Приложение2КНалоговойНакладнойВозвраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ПО Приложение2КНалоговойНакладнойВозвраты.Документ = ВозвратТоваровОтПокупателяТовары.Ссылка
	|ГДЕ
	|	Приложение2КНалоговойНакладнойВозвраты.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Приложение2КНалоговойНакладнойВозвраты.Документ,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ.СуммаДокумента,
	|	Приложение2КНалоговойНакладнойВозвраты.НомерСтроки,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ.СуммаВключаетНДС,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ.Дата,
	|	Приложение2КНалоговойНакладнойВозвраты.Документ.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата,
	|	ДокументНомер";
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Реестр_документов_возврат";
	НазваниеМакета = "РеестрНакладныхДляСводной";
	Макет = ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаРеестра");
	ОбластьМакета.Параметры.Заголовок="Реєстр накладних  "+СокрЛП(Шапка.Поставщик.НаименованиеПолное);
	ОбластьМакета.Параметры.НомерДокумента	=	Шапка.Номер;
	ОбластьМакета.Параметры.ДатаДокумента	=	Шапка.ДатаДокумента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТалицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВсегоНДС=0;
	ВсегоБезНДС=0;
	Всего=0;
	ТекущаяСтрока=1;
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьМакета.Параметры.ДокументРеализации	= "     Повернення товарів № "+СокрЛП(ВыборкаСтрокТовары.ДокументНомер)+" від "+Формат(ВыборкаСтрокТовары.ДокументДата, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.Номер				= ТекущаяСтрока;
		ОбластьМакета.Параметры.Сумма 				= Формат(ВыборкаСтрокТовары.СуммаДокумента-ВыборкаСтрокТовары.СуммаНДС,"ЧЦ=12; ЧДЦ=2; ЧГ=0"); 
		ОбластьМакета.Параметры.НДС   				= Формат(ВыборкаСтрокТовары.СуммаНДС,"ЧЦ=12; ЧДЦ=2; ЧГ=0");
		ОбластьМакета.Параметры.Всего 				= Формат(ВыборкаСтрокТовары.СуммаДокумента,"ЧЦ=12; ЧДЦ=2; ЧГ=0");
		
		ТекущаяСтрока	= ТекущаяСтрока+1;
		ВсегоНДС		= ВсегоНДС+ВыборкаСтрокТовары.СуммаНДС;
		ВсегоБезНДС		= ВсегоБезНДС+ВыборкаСтрокТовары.СуммаДокумента-ВыборкаСтрокТовары.СуммаНДС;
		Всего			= Всего+ВыборкаСтрокТовары.СуммаДокумента;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСумма	= Формат(Ссылка.СуммаДокумента-Ссылка.СуммаНДСДокумента,"ЧЦ=12; ЧДЦ=2; ЧГ=0"); // ВсегоБезНДС
	ОбластьМакета.Параметры.ИтогоНДС   	= Формат(Ссылка.СуммаНДСДокумента,"ЧЦ=12; ЧДЦ=2; ЧГ=0");//ВсегоНДС
	ОбластьМакета.Параметры.ИтогоВсего 	= Формат(Ссылка.СуммаДокумента,"ЧЦ=12; ЧДЦ=2; ЧГ=0");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьРеестра()
//***

Процедура ЗаполнитьНомераСтрокИзНН(НалоговаяНакладная) Экспорт
	Если не ЗначениеЗаполнено(НалоговаяНакладная) тогда
		возврат;
	КонецЕсли;
	Для Каждого стр из Товары Цикл 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалоговаяНакладнаяТовары.НомерСтроки,
		|	НалоговаяНакладнаяТовары.Номенклатура,
		|	НалоговаяНакладнаяТовары.Количество,
		|	НалоговаяНакладнаяТовары.ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ.НалоговаяНакладная.Товары КАК НалоговаяНакладнаяТовары
		|ГДЕ
		|	НалоговаяНакладнаяТовары.Ссылка = &Ссылка
		|	И НалоговаяНакладнаяТовары.Номенклатура = &Номенклатура
		|	И НалоговаяНакладнаяТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
		//|	И НалоговаяНакладнаяТовары.Цена = &Цена";

		Запрос.УстановитьПараметр("Номенклатура", стр.Номенклатура);
		Запрос.УстановитьПараметр("Ссылка", НалоговаяНакладная);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", стр.ХарактеристикаНоменклатуры);
		// Запрос.УстановитьПараметр("Цена", стр.Цена);
		Результат = Запрос.Выполнить();
        Если не Результат.Пустой() тогда 
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			стр.НомерСтрокиНН=ВыборкаДетальныеЗаписи.НомерСтроки;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры
мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мНеОткрыватьФормуДокумента = Ложь;