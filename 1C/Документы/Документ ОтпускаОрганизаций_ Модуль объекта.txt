////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("ЕжегодныйОтпуск", Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("ПустаяДата",		 '00010101');
	Запрос.УстановитьПараметр("ПустойОтпуск",	 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизаций.Дата КАК ДатаДок,
		|	ОтпускаОрганизаций.Номер КАК НомерДок,
		|	ОтпускаОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КОНЕЦ КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо
		|ИЗ
		|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ОтпускаОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ОтпускаОрганизаций.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Праздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
		
		ОтборОрганизация = Новый Структура("Организация", Организация);
		ВестиУчетОстатковОтпусков = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.Получить(ОтборОрганизация).ВестиУчетОстатковОтпусков;
		
		Если ВестиУчетОстатковОтпусков Тогда
			Запрос.Текст =   "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИспользованиеОтпуска.Сотрудник								КАК Сотрудник,
			|	ИспользованиеОтпуска.Работник								КАК Работник,
			|	ИспользованиеОтпуска.ВидОтпуска								КАК ВидОтпуска,
			|	ИспользованиеОтпуска.ПодразделениеОрганизации				КАК ПодразделениеОрганизации,
			|	ИспользованиеОтпуска.Должность								КАК Должность,
			|	ИспользованиеОтпуска.Категория								КАК Категория,
			|	МИНИМУМ(ИспользованиеОтпуска.РабочийПериодНачало)			КАК РабочийПериодНачало,
			|	МАКСИМУМ(ИспользованиеОтпуска.РабочийПериодОкончание)		КАК РабочийПериодОкончание,
			|	МИНИМУМ(ИспользованиеОтпуска.ДатаНачала)					КАК ДатаНачала,            			
			|	МАКСИМУМ(ИспользованиеОтпуска.ДатаОкончания)				КАК ДатаОкончания,
			|	СУММА(ИспользованиеОтпуска.ИспользоватьДней)				КАК ИспользоватьДней
			|ПОМЕСТИТЬ
			|	ВТИспользованиеОтпусков
			|ИЗ			
			|(
			|ВЫБРАТЬ 
			|	ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование			КАК ПодразделениеОрганизации,		
			|	ДанныеОРаботникахОрганизации.ДолжностьНаименование							КАК Должность,
			|	ДанныеОРаботникахОрганизации.КатегорияНаименование							КАК Категория,
			|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник							КАК Сотрудник,
			|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Наименование) КАК Работник,
			|	ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.РабочийПериодНачало		КАК РабочийПериодНачало,
			|	ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.РабочийПериодОкончание		КАК РабочийПериодОкончание,
			|	ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.ИспользоватьДней			КАК ИспользоватьДней,
			|	ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.ВидОтпуска					КАК ВидОтпуска,
			|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала							КАК ДатаНачала,
			|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания						КАК ДатаОкончания
			|	
			|ИЗ
			|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
			|ЛЕВОЕ СОЕДИНЕНИЕ
    		|	Документ.ОтпускаОрганизаций.ИспользованиеЕжегодногоОтпуска КАК ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска
			|ПО
			|	ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.Ссылка = ОтпускаОрганизацийРаботникиОрганизации.Ссылка
			|	И ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.Сотрудник = ОтпускаОрганизацийРаботникиОрганизации.Сотрудник
			|	И ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.ВидОтпуска = ОтпускаОрганизацийРаботникиОрганизации.ВидОтпуска
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|			СписокДат.Сотрудник КАК Сотрудник,
			|			РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
			|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
			|			РаботникиОрганизации.Должность.Категория.Наименование	КАК КатегорияНаименование,
			|			СписокДат.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РаботникиВнутри.Сотрудник КАК Сотрудник,
			|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
			|				ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизаций
			|					ПО РаботникиВнутри.Период < ОтпускаОрганизаций.ДатаНачала
			|						И РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
			|			ГДЕ
			|				ОтпускаОрганизаций.Ссылка = &ТекущийДокумент
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ОтпускаОрганизаций.НомерСтроки,
			|				РаботникиВнутри.Сотрудник) КАК СписокДат
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
			|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
			|) КАК ДанныеОРаботникахОрганизации
			|ПО ОтпускаОрганизацийРаботникиОрганизации.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки	
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
			|		&ДатаДокумента,
			|		ФизЛицо В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ОтпускаОрганизацииРаботники.Сотрудник.Физлицо
			|			ИЗ
			|				Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
			|			ГДЕ
			|				ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
			|ПО ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|       (ВЫБРАТЬ
			|			ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
			|			ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
			|			ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
			|			ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|			КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОПолное
			|		ИЗ
			|			РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
			|				ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо)КАК Руководители
			|       ПО Руководители.СтруктурнаяЕдиница = ДанныеОРаботникахОрганизации.ПодразделениеОрганизации
			|ГДЕ
			|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &ТекущийДокумент
			|	И ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.Ссылка = &ТекущийДокумент
			|) КАК ИспользованиеОтпуска
			|СГРУППИРОВАТЬ ПО
			|	ИспользованиеОтпуска.Работник,
			|	ИспользованиеОтпуска.Сотрудник,
			|	ИспользованиеОтпуска.ВидОтпуска,
			//Группируем по подразделению и должности поскольку может происходить кадровое перемещение и изменятся данные реквизиты.
			//Требуется учесть этот момент.
			|	ИспользованиеОтпуска.ПодразделениеОрганизации,
			|	ИспользованиеОтпуска.Должность,
			|	ИспользованиеОтпуска.Категория
			|";
			Запрос.Выполнить();
			
		Иначе //не ведется учет остатков отпусков
			
			Запрос.Текст =   "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИспользованиеОтпуска.Сотрудник								КАК Сотрудник,
			|	ИспользованиеОтпуска.Работник								КАК Работник,
			|	ИспользованиеОтпуска.ВидОтпуска								КАК ВидОтпуска,
			|	ИспользованиеОтпуска.ПодразделениеОрганизации				КАК ПодразделениеОрганизации,
			|	ИспользованиеОтпуска.Должность								КАК Должность,
			|	ИспользованиеОтпуска.Категория								КАК Категория,
			|	МИНИМУМ(ИспользованиеОтпуска.РабочийПериодНачало)			КАК РабочийПериодНачало,
			|	МАКСИМУМ(ИспользованиеОтпуска.РабочийПериодОкончание)		КАК РабочийПериодОкончание,
			|	МИНИМУМ(ИспользованиеОтпуска.ДатаНачала)					КАК ДатаНачала,            			
			|	МАКСИМУМ(ИспользованиеОтпуска.ДатаОкончания)				КАК ДатаОкончания,
			|	СУММА(ИспользованиеОтпуска.ИспользоватьДней)				КАК ИспользоватьДней
			|ПОМЕСТИТЬ
			|	ВТИспользованиеОтпусков
			|ИЗ			
			|(
			|ВЫБРАТЬ 
			|	ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование			КАК ПодразделениеОрганизации,		
			|	ДанныеОРаботникахОрганизации.ДолжностьНаименование							КАК Должность,
			|	ДанныеОРаботникахОрганизации.КатегорияНаименование							КАК Категория,
			|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник							КАК Сотрудник,
			|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Наименование) КАК Работник,
			|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодС							КАК РабочийПериодНачало,
			|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодПо							КАК РабочийПериодОкончание,
			|	ОтпускаОрганизацийРаботникиОрганизации.КвоДней								КАК ИспользоватьДней,
			|	ОтпускаОрганизацийРаботникиОрганизации.ВидОтпуска					КАК ВидОтпуска,
			|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала							КАК ДатаНачала,
			|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания						КАК ДатаОкончания
			|	
			|ИЗ
			|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|			СписокДат.Сотрудник КАК Сотрудник,
			|			РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
			|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
			|			РаботникиОрганизации.Должность.Категория.Наименование	КАК КатегорияНаименование,
			|			СписокДат.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РаботникиВнутри.Сотрудник КАК Сотрудник,
			|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
			|				ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизаций
			|					ПО РаботникиВнутри.Период < ОтпускаОрганизаций.ДатаНачала
			|						И РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
			|			ГДЕ
			|				ОтпускаОрганизаций.Ссылка = &ТекущийДокумент
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ОтпускаОрганизаций.НомерСтроки,
			|				РаботникиВнутри.Сотрудник) КАК СписокДат
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
			|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
			|) КАК ДанныеОРаботникахОрганизации
			|ПО ОтпускаОрганизацийРаботникиОрганизации.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки	
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
			|		&ДатаДокумента,
			|		ФизЛицо В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ОтпускаОрганизацииРаботники.Сотрудник.Физлицо
			|			ИЗ
			|				Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
			|			ГДЕ
			|				ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
			|ПО ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|       (ВЫБРАТЬ
			|			ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
			|			ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
			|			ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
			|			ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|			КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОПолное
			|		ИЗ
			|			РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
			|				ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо)КАК Руководители
			|       ПО Руководители.СтруктурнаяЕдиница = ДанныеОРаботникахОрганизации.ПодразделениеОрганизации
			|ГДЕ
			|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &ТекущийДокумент
			|) КАК ИспользованиеОтпуска
			|СГРУППИРОВАТЬ ПО
			|	ИспользованиеОтпуска.Работник,
			|	ИспользованиеОтпуска.Сотрудник,
			|	ИспользованиеОтпуска.ВидОтпуска,
			//Группируем по подразделению и должности поскольку может происходить кадровое перемещение и изменятся данные реквизиты.
			//Требуется учесть этот момент.
			|	ИспользованиеОтпуска.ПодразделениеОрганизации,
			|	ИспользованиеОтпуска.Должность,
			|	ИспользованиеОтпуска.Категория
			|";
			Запрос.Выполнить();
		КонецЕсли;	

		Запрос.УстановитьПараметр("ОсновнойЕжегодныйОтпуск", Справочники.ВидыОтпусков.ЕжегодныйОсновной);
		//ВТОсновнойЕжегодныйОтпуск
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОсновныеЕжегодныеОтпуска.Работник												КАК Работник,
		|	ОсновныеЕжегодныеОтпуска.Сотрудник												КАК Сотрудник,
		|	ОсновныеЕжегодныеОтпуска.ПодразделениеОрганизации								КАК ПодразделениеОрганизации,
		|	ОсновныеЕжегодныеОтпуска.Должность												КАК Должность,
		|	ОсновныеЕжегодныеОтпуска.Категория												КАК Категория,
		|	ЕстьNULL(МИНИМУМ(ОсновныеЕжегодныеОтпуска.ДатаНачала), &ПустаяДата)				КАК ДатаНачала,
		|	ЕстьNULL(МАКСИМУМ(ОсновныеЕжегодныеОтпуска.ДатаОкончания), &ПустаяДата)			КАК ДатаОкончания,
		|	ЕстьNULL(МИНИМУМ(ОсновныеЕжегодныеОтпуска.РабочийПериодНачало),&ПустаяДата)		КАК РабочийПериодНачало,
		|	ЕстьNULL(МАКСИМУМ(ОсновныеЕжегодныеОтпуска.РабочийПериодОкончание),&ПустаяДата)	КАК РабочийПериодОкончание,
		|	СУММА(ОсновныеЕжегодныеОтпуска.ИспользоватьДней)			КАК ИспользоватьДней
		|ПОМЕСТИТЬ 
		|	ВТОсновнойЕжегодныйОтпуск
		|ИЗ
		|	ВТИспользованиеОтпусков	КАК ОсновныеЕжегодныеОтпуска
		|ГДЕ
		|	ОсновныеЕжегодныеОтпуска.ВидОтпуска	= &ОсновнойЕжегодныйОтпуск
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЕжегодныеОтпуска.Работник,
		|	ОсновныеЕжегодныеОтпуска.Сотрудник,
		|	ОсновныеЕжегодныеОтпуска.ВидОтпуска,			
		|	ОсновныеЕжегодныеОтпуска.ПодразделениеОрганизации,
		|	ОсновныеЕжегодныеОтпуска.Должность,
		|	ОсновныеЕжегодныеОтпуска.Категория
		|";
		Запрос.Выполнить();
		
		//ВТДополнительныйОтпуск
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДополнительныеОтпуска.Работник													КАК Работник,
		|	ДополнительныеОтпуска.Сотрудник													КАК Сотрудник,
		|	ДополнительныеОтпуска.ПодразделениеОрганизации									КАК ПодразделениеОрганизации,
		|	ДополнительныеОтпуска.Должность													КАК Должность,
		|	ДополнительныеОтпуска.Категория													КАК Категория,
		|	ЕстьNULL(МИНИМУМ(ДополнительныеОтпуска.ДатаНачала),&ПустаяДата)					КАК ДатаНачала,
		|	ЕстьNULL(МАКСИМУМ(ДополнительныеОтпуска.ДатаОкончания),&ПустаяДата)				КАК ДатаОкончания,
		|	ЕстьNULL(МИНИМУМ(ДополнительныеОтпуска.РабочийПериодНачало),&ПустаяДата)		КАК РабочийПериодНачало,
		|	ЕстьNULL(МАКСИМУМ(ДополнительныеОтпуска.РабочийПериодОкончание),&ПустаяДата) 	КАК РабочийПериодОкончание,
		|	СУММА(ДополнительныеОтпуска.ИспользоватьДней)									КАК ИспользоватьДней
		|ПОМЕСТИТЬ 
		|	ВТДополнительныйОтпуск
		|ИЗ
		|	ВТИспользованиеОтпусков	КАК ДополнительныеОтпуска
		|ГДЕ
		|	ДополнительныеОтпуска.ВидОтпуска <> &ОсновнойЕжегодныйОтпуск
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеОтпуска.Работник,
		|	ДополнительныеОтпуска.Сотрудник,
		|	ДополнительныеОтпуска.ПодразделениеОрганизации,
		|	ДополнительныеОтпуска.Должность,
		|	ДополнительныеОтпуска.Категория
		|";
		Запрос.Выполнить();
					
		//Объединяем основные и дополнительные отпуска
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕстьNULL(ОсновнойЕжегодныйОтпуск.Работник,	ДополнительныйОтпуск.Работник) 					КАК Работник,
		|	ЕстьNULL(ОсновнойЕжегодныйОтпуск.Сотрудник, ДополнительныйОтпуск.Сотрудник)					КАК Сотрудник,
		|	ЕстьNULL(ОсновнойЕжегодныйОтпуск.ПодразделениеОрганизации, ДополнительныйОтпуск.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
		|	ЕстьNULL(ОсновнойЕжегодныйОтпуск.Должность, ДополнительныйОтпуск.ПодразделениеОрганизации) 	КАК Должность,
		|	ЕстьNULL(ОсновнойЕжегодныйОтпуск.Категория, ДополнительныйОтпуск.Категория)					КАК Категория,
		|
		|	ОсновнойЕжегодныйОтпуск.ДатаНачала					КАК ДатаНачалаОсновногоОтпуска,
		|	ОсновнойЕжегодныйОтпуск.ДатаОкончания				КАК ДатаОкончанияОсновногоОтпуска,
		|	ОсновнойЕжегодныйОтпуск.РабочийПериодНачало			КАК РабочийПериодНачалоОсновногоОтпуска,
		|	ОсновнойЕжегодныйОтпуск.РабочийПериодОкончание		КАК РабочийПериодОкончаниеОсновногоОтпуска,
		|	
		|	ДополнительныйОтпуск.ДатаНачала						КАК ДатаНачалаДополнительногоОтпуска,
		|	ДополнительныйОтпуск.ДатаОкончания					КАК ДатаОкончанияДополнительногоОтпуска,
		|	ДополнительныйОтпуск.РабочийПериодНачало			КАК РабочийПериодНачалоДополнительногоОтпуска,
		|	ДополнительныйОтпуск.РабочийПериодОкончание			КАК РабочийПериодОкончаниеДополнительногоОтпуска,
		|	
		|	ВЫБОР 
		|		КОГДА ОсновнойЕжегодныйОтпуск.ДатаНачала Есть NULL ТОГДА
		|			ДополнительныйОтпуск.ДатаНачала
		|		ИНАЧЕ
		|			ВЫБОР КОГДА ДополнительныйОтпуск.ДатаНачала Есть NULL ТОГДА
		|				ОсновнойЕжегодныйОтпуск.ДатаНачала
		|			ИНАЧЕ
		|				ВЫБОР КОГДА ОсновнойЕжегодныйОтпуск.ДатаНачала < ДополнительныйОтпуск.ДатаНачала 
		|					ТОГДА ОсновнойЕжегодныйОтпуск.ДатаНачала
		|				ИНАЧЕ ДополнительныйОтпуск.ДатаНачала
		|				КОНЕЦ 
		|			КОНЕЦ
		|		КОНЕЦ КАК ДатаНачалаОтпуска,	
		|
		|	ВЫБОР 
		|		КОГДА ОсновнойЕжегодныйОтпуск.ДатаОкончания Есть NULL ТОГДА
		|			ДополнительныйОтпуск.ДатаОкончания
		|		ИНАЧЕ
		|			ВЫБОР КОГДА ДополнительныйОтпуск.ДатаОкончания Есть NULL ТОГДА
		|				ОсновнойЕжегодныйОтпуск.ДатаОкончания
		|			ИНАЧЕ
		|				ВЫБОР КОГДА ОсновнойЕжегодныйОтпуск.ДатаНачала > ДополнительныйОтпуск.ДатаНачала 
		|					ТОГДА ОсновнойЕжегодныйОтпуск.ДатаОкончания
		|					ИНАЧЕ ДополнительныйОтпуск.ДатаОкончания
		|				КОНЕЦ 
		|			КОНЕЦ
		|		КОНЕЦ КАК ДатаОкончанияОтпуска,	
		|
		|	ОсновнойЕжегодныйОтпуск.ИспользоватьДней	КАК ИспользоватьДнейОсновногоОтпуска,
		|	ДополнительныйОтпуск.ИспользоватьДней	КАК ИспользоватьДнейДополнительногоОтпуска,
		|	ЕстьNULL(ОсновнойЕжегодныйОтпуск.ИспользоватьДней,0) + ЕстьNULL(ДополнительныйОтпуск.ИспользоватьДней,0) КАК ИспользоватьДнейОтпуска
		|
		|ИЗ
		|	ВТОсновнойЕжегодныйОтпуск	КАК ОсновнойЕжегодныйОтпуск
		|ПОЛНОЕ СОЕДИНЕНИЕ
		|	ВТДополнительныйОтпуск		КАК ДополнительныйОтпуск
		|ПО
		|	ОсновнойЕжегодныйОтпуск.Работник = ДополнительныйОтпуск.Работник
		|	И ОсновнойЕжегодныйОтпуск.ПодразделениеОрганизации = ДополнительныйОтпуск.ПодразделениеОрганизации
		|	И ОсновнойЕжегодныйОтпуск.Должность = ДополнительныйОтпуск.Должность
		|	И ОсновнойЕжегодныйОтпуск.Категория = ДополнительныйОтпуск.Категория
		|	И ОсновнойЕжегодныйОтпуск.Сотрудник	= ДополнительныйОтпуск.Сотрудник
		|";
		
	Иначе
		Возврат Неопределено
	КонецЕсли;
		
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечатиП3(Режим,ВестиУчетОстатковОтпусков = Ложь,БезОстатков = Ложь)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("ЕжегодныйОтпуск", Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("ПустаяДата",		 '00010101');
	Запрос.УстановитьПараметр("ПустойОтпуск",	 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизаций.Дата КАК ДатаДок,
		|	ОтпускаОрганизаций.Номер КАК НомерДок,
		|	ОтпускаОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо
		|ИЗ
		|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ОтпускаОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ОтпускаОрганизаций.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Если ВестиУчетОстатковОтпусков И НЕ БезОстатков Тогда
		
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			Запрос.УстановитьПараметр("Праздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
			
			Запрос.Текст ="
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИспользованиеЕжегодногоОтпуска.Сотрудник,
			|	ИспользованиеЕжегодногоОтпуска.ВидОтпуска,
			|	ИспользованиеЕжегодногоОтпуска.РабочийПериодНачало,
			|	ИспользованиеЕжегодногоОтпуска.РабочийПериодОкончание,
			|	РаботникиОрганизации.ДатаНачала,
			|	РаботникиОрганизации.ДатаОкончания,
			|	РаботникиОрганизации.КвоДней,
			|	ИспользованиеЕжегодногоОтпуска.ИспользоватьДней,
			|	ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование,
			|	ДанныеОРаботникахОрганизации.ДолжностьНаименование,
			|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, РаботникиОрганизации.Сотрудник.Наименование) КАК Работник,
			|	Руководители.ФИОПолное КАК ФИОРуководителяПодразделения
			|ИЗ
			|	Документ.ОтпускаОрганизаций.ИспользованиеЕжегодногоОтпуска	 КАК ИспользованиеЕжегодногоОтпуска		
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
			|ПО
			|	РаботникиОрганизации.Ссылка = ИспользованиеЕжегодногоОтпуска.Ссылка
			|	И РаботникиОрганизации.Сотрудник = ИспользованиеЕжегодногоОтпуска.Сотрудник
			|	И РаботникиОрганизации.ВидОтпуска = ИспользованиеЕжегодногоОтпуска.ВидОтпуска
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|			СписокДат.Сотрудник КАК Сотрудник,
			|			РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
			|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
			|			СписокДат.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РаботникиВнутри.Сотрудник КАК Сотрудник,
			|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
			|				ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизаций
			|					ПО РаботникиВнутри.Период < ОтпускаОрганизаций.ДатаНачала
			|						И РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
			|			ГДЕ
			|				ОтпускаОрганизаций.Ссылка = &ТекущийДокумент
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ОтпускаОрганизаций.НомерСтроки,
			|				РаботникиВнутри.Сотрудник) КАК СписокДат
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
			|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
			|) КАК ДанныеОРаботникахОрганизации
			|ПО РаботникиОрганизации.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки		
			
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
			|		&ДатаДокумента,
			|		ФизЛицо В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ОтпускаОрганизацииРаботники.Сотрудник.Физлицо
			|			ИЗ
			|				Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
			|			ГДЕ
			|				ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
			|ПО РаботникиОрганизации.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|       (ВЫБРАТЬ
			|			ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
			|			ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
			|			ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
			|			ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|			КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОПолное
			|		ИЗ
			|			РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
			|				ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо)КАК Руководители
			|       ПО Руководители.СтруктурнаяЕдиница = ДанныеОРаботникахОрганизации.ПодразделениеОрганизации
			|	
			|ГДЕ
			|	РаботникиОрганизации.Ссылка = &ТекущийДокумент
			|ИТОГИ МАКСИМУМ(ДатаОкончания), МИНИМУМ(РабочийПериодНачало), МАКСИМУМ(КвоДней),
			|	МАКСИМУМ(ПодразделениеОрганизацииНаименование), МАКСИМУМ(ДолжностьНаименование),
			|	МАКСИМУМ(ФИОРуководителяПодразделения), МАКСИМУМ(Работник)
			|ПО
			|	ИспользованиеЕжегодногоОтпуска.Сотрудник,
			|	ИспользованиеЕжегодногоОтпуска.ВидОтпуска,
			|	РаботникиОрганизации.ДатаНачала
			|";
		Иначе  //Не ведется учет остатков отпусков
			
			Запрос.Текст ="
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизации.Сотрудник				КАК Сотрудник,
			|	РаботникиОрганизации.ВидОтпуска				КАК ВидОтпуска,
			|	РаботникиОрганизации.РабочийГодС			КАК РабочийПериодНачало,
			|	РаботникиОрганизации.РабочийГодПо			КАК РабочийПериодОкончание,
			|	РаботникиОрганизации.ДатаНачала				КАК ДатаНачала,
			|	РаботникиОрганизации.ДатаОкончания			КАК ДатаОкончания,
			|	РаботникиОрганизации.КвоДней				КАК КвоДней,
			|	РаботникиОрганизации.КвоДней				КАК ИспользоватьДней,
			|	ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование,
			|	ДанныеОРаботникахОрганизации.ДолжностьНаименование,
			|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, РаботникиОрганизации.Сотрудник.Наименование) КАК Работник,
			|	Руководители.ФИОПолное КАК ФИОРуководителяПодразделения
			|ИЗ
			|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|			СписокДат.Сотрудник КАК Сотрудник,
			|			РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
			|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
			|			СписокДат.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РаботникиВнутри.Сотрудник КАК Сотрудник,
			|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
			|				ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизаций
			|					ПО РаботникиВнутри.Период < ОтпускаОрганизаций.ДатаНачала
			|						И РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
			|			ГДЕ
			|				ОтпускаОрганизаций.Ссылка = &ТекущийДокумент
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ОтпускаОрганизаций.НомерСтроки,
			|				РаботникиВнутри.Сотрудник) КАК СписокДат
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
			|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
			|) КАК ДанныеОРаботникахОрганизации
			|ПО РаботникиОрганизации.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки		
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
			|		&ДатаДокумента,
			|		ФизЛицо В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ОтпускаОрганизацииРаботники.Сотрудник.Физлицо
			|			ИЗ
			|				Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
			|			ГДЕ
			|				ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
			|ПО РаботникиОрганизации.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|       (ВЫБРАТЬ
			|			ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
			|			ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
			|			ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
			|			ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|			КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОПолное
			|		ИЗ
			|			РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
			|				ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо)КАК Руководители
			|       ПО Руководители.СтруктурнаяЕдиница = ДанныеОРаботникахОрганизации.ПодразделениеОрганизации
			|	
			|ГДЕ
			|	РаботникиОрганизации.Ссылка = &ТекущийДокумент
			|"+?(БезОстатков,"	И НЕ РаботникиОрганизации.ВидОтпуска.ВедетсяУчетОстатков","")+"
			|ИТОГИ МАКСИМУМ(ДатаОкончания), МИНИМУМ(РабочийПериодНачало), МАКСИМУМ(КвоДней),
			|	МАКСИМУМ(ПодразделениеОрганизацииНаименование), МАКСИМУМ(ДолжностьНаименование),
			|	МАКСИМУМ(ФИОРуководителяПодразделения), МАКСИМУМ(Работник)
			|ПО
			|	РаботникиОрганизации.Сотрудник,
			|	РаботникиОрганизации.ВидОтпуска,
			|	РаботникиОрганизации.ДатаНачала
			|";

			
			
		КонецЕсли;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

Процедура ЗаполнитьНаОснованииКадровогоДокумента() Экспорт
	Организация = ДокументОснование.Организация;
	Для Каждого Строка ИЗ ДокументОснование.РаботникиОрганизации Цикл
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.ВидОтпуска = Строка.ВидОтпуска;
		НоваяСтрока.ДатаНачала = Строка.ДатаНачала;
		НоваяСтрока.ДатаОкончания = Строка.ДатаОкончания;
		НоваяСтрока.КвоДней = Строка.КвоДней;
	КонецЦикла;
	
	Для Каждого Строка ИЗ ДокументОснование.ИспользованиеЕжегодногоОтпуска Цикл
		НоваяСтрока = ИспользованиеЕжегодногоОтпуска.Добавить();
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.ВидОтпуска = Строка.ВидОтпуска;
		НоваяСтрока.ИспользоватьДней = Строка.ИспользоватьДней;
		НОваяСтрока.ПолагаетсяДней = Строка.ПолагаетсяДней;
		НоваяСтрока.УжеИспользованоДней = Строка.УжеИспользованоДней;	
		НоваяСтрока.РабочийПериодНачало = Строка.РабочийПериодНачало;
		НоваяСтрока.РабочийПериодОкончание = Строка.РабочийПериодОкончание;
	КонецЦикла;
	
КонецПроцедуры

#Если Клиент Тогда

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечатиП7(Режим, ПодразделениеОрганизации = "")

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("ЕжегодныйОтпуск", Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("ПустаяДата",		 '00010101');
	Запрос.УстановитьПараметр("ПустойОтпуск",	 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамИсключатьВидыЗанятости",	 Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамОрганизация",Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
                       
	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизаций.Дата КАК ДатаДок,
		|	ОтпускаОрганизаций.Номер КАК НомерДок,
		|	ОтпускаОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КОНЕЦ КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо
		|ИЗ
		|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ОтпускаОрганизаций.Организация = ОтветственныеЛицаОрганизацииСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ОтпускаОрганизаций.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		ОтборОрганизация = Новый Структура("Организация", Организация);
		ВестиУчетОстатковОтпусков = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.Получить(ОтборОрганизация).ВестиУчетОстатковОтпусков;

		Если ВестиУчетОстатковОтпусков Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтпускаОрганизаций.Работник 						КАК Работник,
			|	ОтпускаОрганизаций.Сотрудник						КАК Сотрудник,
			|	ОтпускаОрганизаций.Сотрудник.Код					КАК ТабельныйНомер,
			|	ОтпускаОрганизаций.Категория 						КАК Категория,
			|	ОтпускаОрганизаций.ПричинаОтсутствия 				КАК ПричинаОтсутствия,
			|	ОтпускаОрганизаций.ДатаС							КАК ДатаС,
			|	ОтпускаОрганизаций.РабочийГодС						КАК РабочийГодС,
			|	ОтпускаОрганизаций.ДатаПо							КАК ДатаПо,
			|	ОтпускаОрганизаций.РабочийГодПо						КАК РабочийГодПо
			|ИЗ
			|(
			|ВЫБРАТЬ
			|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации				КАК ПодразделениеОрганизации,
			|	ВЫБОР КОГДА (ФИОФизЛиц.Фамилия) Есть NULL ТОГДА ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ КАК Работник,
			|	РаботникиОрганизацииСрезПоследних.Должность								КАК Должность,
			|	РаботникиОрганизацииСрезПоследних.Должность.Категория					КАК Категория,
			|	РаботникиОрганизацииСрезПоследних.Сотрудник								КАК Сотрудник,
			|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала						КАК ДатаС,
			|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания					КАК ДатаПо,
			|	ОтпускаОрганизацийРаботникиОрганизации.ВидОтпуска.ВидОтпускаДляФормОтчетности	КАК ПричинаОтсутствия,
			|	ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.РабочийПериодНачало	КАК РабочийГодС,
			|	ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.РабочийПериодОкончание	КАК РабочийГодПо
			|ИЗ
			|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ОтпускаОрганизаций.ИспользованиеЕжегодногоОтпуска КАК ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска
			|ПО
			|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник = ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.Сотрудник
			|	И ОтпускаОрганизацийРаботникиОрганизации.ВидОтпуска = ОтпускаОрганизацийИспользованиеЕжегодногоОтпуска.ВидОтпуска
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ ОтпускаОрганизацииРаботники.Сотрудник.ФизЛицо ИЗ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники ГДЕ ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
			|ПО
			|	ФИОФизЛиц.ФизЛицо = ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.ФизЛицо
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента) КАК РаботникиОрганизацииСрезПоследних
			|   ПО ОтпускаОрганизацийРаботникиОрганизации.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник 
			|	И (ВЫБОР
			|		КОГДА РаботникиОрганизацииСрезПоследних.Сотрудник.ВидЗанятости ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Сотрудник.ВидЗанятости <> &парамИсключатьВидыЗанятости
			|	КОНЕЦ)
			|	И РаботникиОрганизацииСрезПоследних.Организация = &парамОрганизация
			|ГДЕ
			|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &ТекущийДокумент     
			|   " + ?(ПодразделениеОрганизации = "","","И ПодразделениеОрганизации в ИЕРАРХИИ (&ПодразделениеОрганизации)") + "
			|) КАК ОтпускаОрганизаций
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтпускаОрганизаций.ПричинаОтсутствия,
			|	ОтпускаОрганизаций.Работник
			|	
			|";
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтпускаОрганизаций.Работник 						КАК Работник,
			|	ОтпускаОрганизаций.Сотрудник						КАК Сотрудник,
			|	ОтпускаОрганизаций.Сотрудник.Код					КАК ТабельныйНомер,
			|	ОтпускаОрганизаций.Категория 						КАК Категория,
			|	ОтпускаОрганизаций.ПричинаОтсутствия 				КАК ПричинаОтсутствия,
			|	ОтпускаОрганизаций.ДатаС							КАК ДатаС,
			|	ОтпускаОрганизаций.РабочийГодС						КАК РабочийГодС,
			|	ОтпускаОрганизаций.ДатаПо							КАК ДатаПо,
			|	ОтпускаОрганизаций.РабочийГодПо						КАК РабочийГодПо
			|ИЗ
			|(
			|ВЫБРАТЬ
			|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации				КАК ПодразделениеОрганизации,
			|	ВЫБОР КОГДА (ФИОФизЛиц.Фамилия) Есть NULL ТОГДА ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ КАК Работник,
			|	РаботникиОрганизацииСрезПоследних.Должность								КАК Должность,
			|	РаботникиОрганизацииСрезПоследних.Должность.Категория					КАК Категория,
			|	РаботникиОрганизацииСрезПоследних.Сотрудник								КАК Сотрудник,
			|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала						КАК ДатаС,
			|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания					КАК ДатаПо,
			|	ОтпускаОрганизацийРаботникиОрганизации.ВидОтпуска.ВидОтпускаДляФормОтчетности	КАК ПричинаОтсутствия,
			|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодС						КАК РабочийГодС,
			|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодПо						КАК РабочийГодПо
			|ИЗ
			|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ ОтпускаОрганизацииРаботники.Сотрудник.ФизЛицо ИЗ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники ГДЕ ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
			|ПО
			|	ФИОФизЛиц.ФизЛицо = ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.ФизЛицо
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента) КАК РаботникиОрганизацииСрезПоследних
			|   ПО ОтпускаОрганизацийРаботникиОрганизации.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник 
			|	И (ВЫБОР
			|		КОГДА РаботникиОрганизацииСрезПоследних.Сотрудник.ВидЗанятости ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Сотрудник.ВидЗанятости <> &парамИсключатьВидыЗанятости
			|	КОНЕЦ)
			|	И РаботникиОрганизацииСрезПоследних.Организация = &парамОрганизация
			|ГДЕ
			|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &ТекущийДокумент     
			|   " + ?(ПодразделениеОрганизации = "","","И ПодразделениеОрганизации в ИЕРАРХИИ (&ПодразделениеОрганизации)") + "
			|) КАК ОтпускаОрганизаций
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтпускаОрганизаций.ПричинаОтсутствия,
			|	ОтпускаОрганизаций.Работник
			|	
			|";
		КонецЕсли;
	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечатиП7()

// Функция формирует табличный документ с печатной формой "П-3",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьП3()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_П6";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОтборОрганизация = Новый Структура("Организация", Организация);
	ВестиУчетОстатковОтпусков = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.Получить(ОтборОрганизация).ВестиУчетОстатковОтпусков;
	БезОстатков = Ложь;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечатиП3("ПоРеквизитамДокумента").Выбрать();
	ВыборкаДляШапки.Следующий();
	ВыборкаРаботники = СформироватьЗапросДляПечатиП3("ПоТабличнойЧастиДокумента",ВестиУчетОстатковОтпусков).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Сотрудник");
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);

	// запоминаем области макета
	Макет = ПолучитьМакет("П3_от_05_12_2008");
	ОбластьМакета = Макет.ПолучитьОбласть("Форма");

	//Данная переменная указывает на то требуется ли создавать отдельную информацию, или нет
	//поскольку строки с разными видами отпуска могут идти подряд, поэтому требуется печатать их в одной печатной форме.
	Печатать = Ложь;
	ВидОтпуска = "";
	
	Пока Истина Цикл
		// Начинаем формировать выходной документ
		Пока ВыборкаРаботники.Следующий() Цикл
			РабочийПериодНачало = Дата(1,1,1);
			РабочийПериодНачало = Дата(1,1,1);
			РабочийПериодОкончание = Дата(1,1,1);
			ИспользованоДнейРабочегоПериода = 0;
			ОстатокДнейВРабочемПериоде = 0;
			ДатаНачала = Дата(1,1,1);
			ДатаОкончания = Дата(1,1,1);
			КвоДней = 0;
			
			ВыборкаВидОтпуска = ВыборкаРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ВидОтпуска");
				
			Пока ВыборкаВидОтпуска.Следующий() Цикл
				ВыборкаДатаНачала = ВыборкаВидОтпуска.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ДатаНачала");
				РабочийПериодНачало = Дата(1,1,1);

				Пока ВыборкаДатаНачала.Следующий() Цикл
					Выборка = ВыборкаДатаНачала.Выбрать();
					КвоДнейПоПериодам = 0;
					
					Если НЕ ЗначениеЗаполнено(РабочийПериодНачало) Тогда
						РабочийПериодНачало = ВыборкаДатаНачала.РабочийПериодНачало;
					КонецЕсли;
					ИспользованоДнейРабочегоПериода = ОстатокДнейВРабочемПериоде;
					//Если ДатаНачала = Дата(1,1,1) Тогда
						ДатаНачала = ВыборкаДатаНачала.ДатаНачала;
					//КонецЕсли;
					ДатаОкончания = ВыборкаДатаНачала.ДатаОкончания; 
					
					Если ДатаОкончания  <> Дата(1,1,1) Тогда
							Если ВыборкаДатаНачала.ДатаНачала = ДатаОкончания + 1 Тогда
								Печатать = Ложь;
								КвоДней = КвоДней + ВыборкаДатаНачала.КвоДней;
							Иначе
								Печатать = Истина;
								КвоДней = ВыборкаДатаНачала.КвоДней;
								ВидОтпуска =  ВыборкаДатаНачала.ВидОтпуска.ВидОтпускаДляФормОтчетности;
							КонецЕсли;
						Иначе
							Печатать = Ложь;
							КвоДней = КвоДней + ВыборкаДатаНачала.КвоДней;
					КонецЕсли;
					
					Если Не Печатать Тогда
						Если СтрЧислоВхождений(ВидОтпуска,ВыборкаДатаНачала.ВидОтпуска.ВидОтпускаДляФормОтчетности) = 0 Тогда
							Если ВидОтпуска  <> ""  Тогда
								ВидОтпуска =  ВидОтпуска + ", " + ВыборкаДатаНачала.ВидОтпуска.ВидОтпускаДляФормОтчетности;
							Иначе
								ВидОтпуска =  ВыборкаДатаНачала.ВидОтпуска.ВидОтпускаДляФормОтчетности;
							КонецЕсли;					
						КонецЕсли;
					КонецЕсли;
					
					Пока Выборка.Следующий() Цикл	
						Если Выборка.РабочийПериодНачало < РабочийПериодНачало Тогда
							Продолжить;
						КонецЕсли;
						
	//					КвоДней = Выборка.КвоДней;
						Если КвоДней > КвоДнейПоПериодам Тогда
							ИспользованиеДнейРабочегоПериода = ИспользованоДнейРабочегоПериода + ?(КвоДней - КвоДнейПоПериодам > Выборка.ИспользоватьДней,Выборка.ИспользоватьДней, КвоДней - КвоДнейПоПериодам)	;
							КвоДнейПоПериодам = КвоДнейПоПериодам + ИспользованиеДнейРабочегоПериода - ИспользованоДнейРабочегоПериода;
							РабочийПериодОкончание = Выборка.РабочийПериодОкончание;						
							ОстатокДнейВРабочемПериоде = Выборка.ИспользоватьДней - ИспользованиеДнейРабочегоПериода;
						Иначе
							Продолжить;
						КонецЕсли;
					КонецЦикла;
						
					// Каждый приказ на отдельной странице.
					Если ТабДокумент.ВысотаТаблицы > 0 Тогда
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;

					ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки);
					ОбластьМакета.Параметры.НомерДок=Формат(Число(ЭтотОбъект.Номер),"ЧДЦ=; ЧН=; ЧГ=0")+" В";//*** 170503 И.Г.
					ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
					ОбластьМакета.Параметры.ЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);

					// Данные по работнику.
					ОбластьМакета.Параметры.Работник = ВыборкаДатаНачала.Работник;
					ОбластьМакета.параметры.ТабельныйНомер = ВыборкаДатаНачала.Сотрудник.Код;
					ОбластьМакета.параметры.ФИОРуководителяПодразделения = ВыборкаДатаНачала.ФИОРуководителяПодразделения;
					ОбластьМакета.Параметры.ВидОтпуска = ВидОтпуска;
					//***
					Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Организация, Дата);
					ОбластьМакета.Параметры.ДолжностьРуководителя 	= "Керівник підприємства";
					Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
						ОбластьМакета.Параметры.ФИОРуководителя  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.РуководительФИО.Фамилия, Руководители.РуководительФИО.Имя, Руководители.РуководительФИО.Отчество, Истина);// Кратко
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Руководители.ФинДиректор) Тогда
						ОбластьМакета.Параметры.ДолжностьРуководителя2 = Руководители.ФинДиректорДолжность.Наименование;// Кратко
					КонецЕсли;

					
					Если ЗначениеЗаполнено(Руководители.ФинДиректорФИО) Тогда
						ОбластьМакета.Параметры.ФИОФиндир  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ФинДиректорФИО.Фамилия, Руководители.ФинДиректорФИО.Имя, Руководители.ФинДиректорФИО.Отчество, Истина);// Кратко
					КонецЕсли;
					     //***
					
					ОбластьМакета.Параметры.РабочийГодС = РабочийПериодНачало;
					ОбластьМакета.Параметры.РабочийГодПо = РабочийПериодОкончание;
					ОбластьМакета.параметры.ДатаНачалаВсего = ДатаНачала;
					ОбластьМакета.Параметры.ДатаОкончанияВсего = ДатаОкончания;


			       	ПродолжительностьВсего = ?(ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания),КвоДнейПоПериодам,0);
					ПродолжительностьВсего = ОбщегоНазначения.РазложитьЧислоВСтроку(ПродолжительностьВсего,2,Истина);
					Для Сч = 1 По 2 Цикл
						ОбластьМакета.Параметры["Продолжительность" + Сч] = Сред(Строка(ПродолжительностьВсего), Сч, 1);
					КонецЦикла;

					ОбластьМакета.Параметры.ПодразделениеРаботника = ВыборкаДатаНачала.ПодразделениеОрганизацииНаименование;
					ОбластьМакета.Параметры.Должность = ВыборкаДатаНачала.ДолжностьНаименование;
					 
					Если Печатать Тогда
						ТабДокумент.Вывести(ОбластьМакета);
						ВидОтпуска = "";
					КонецЕсли;
				КонецЦикла;
				Если НЕ Печатать Тогда //значит последняя форма не напечаталась
					ТабДокумент.Вывести(ОбластьМакета);
					ВидОтпуска = "";
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
		
		Если НЕ ВестиУчетОстатковОтпусков ИЛИ БезОстатков Тогда
			Прервать;
		Иначе
			БезОстатков = Истина;
			ВыборкаРаботники = СформироватьЗапросДляПечатиП3("ПоТабличнойЧастиДокумента",ВестиУчетОстатковОтпусков,БезОстатков).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Сотрудник");
			РабочийПериодНачало = Дата(1,1,1);
			РабочийПериодОкончание = Дата(1,1,1);
			ИспользованоДнейРабочегоПериода = 0;
			ОстатокДнейВРабочемПериоде = 0;
			ДатаНачала = Дата(1,1,1);
			ДатаОкончания = Дата(1,1,1);
			КвоДней = 0;

			Печатать = Ложь;
			ВидОтпуска = "";
		КонецЕсли;	
		
	КонецЦикла;	
		
	Возврат ТабДокумент;

КонецФункции // ПечатьП6()	

// Функция формирует табличный документ с печатной формой "П-6",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьП6()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_П6";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаДляШапки.Следующий();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);

	// запоминаем области макета
	Макет = ПолучитьМакет("П6_от_09_10_1995");
	ОбластьМакета = Макет.ПолучитьОбласть("Форма");

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки);
		ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьМакета.Параметры.ЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);

		// Данные по работнику.
		ОбластьМакета.Параметры.Работник  = ВыборкаРаботники.Работник;
		ОбластьМакета.Параметры.Категория = ВыборкаРаботники.Категория;
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.Сотрудник.Код;
		ОбластьМакета.Параметры.ПодразделениеРаботника = ВыборкаРаботники.ПодразделениеОрганизации;
		ОбластьМакета.Параметры.Должность = ВыборкаРаботники.Должность;
		
		ОбластьМакета.Параметры.РабочийГодС = ВыборкаРаботники.РабочийПериодНачалоОсновногоОтпуска;
		ОбластьМакета.Параметры.РабочийГодПо = ВыборкаРаботники.РабочийПериодОкончаниеОсновногоОтпуска;
		ОбластьМакета.Параметры.Продолжительность = ВыборкаРаботники.ИспользоватьДнейОсновногоОтпуска;
		
		ОбластьМакета.Параметры.ПродолжительностьДоп = ВыборкаРаботники.ИспользоватьДнейДополнительногоОтпуска;
		
		ОбластьМакета.Параметры.ДатаНачалаВсего = ВыборкаРаботники.ДатаНачалаОтпуска;
		ОбластьМакета.Параметры.ДатаОкончанияВсего = ВыборкаРаботники.ДатаОкончанияОтпуска;	
		ОбластьМакета.Параметры.ПродолжительностьВсего = ВыборкаРаботники.ИспользоватьДнейОтпуска;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции // ПечатьП6()	

// Функция формирует табличный документ с печатной формой "П-7",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьП7(ПодразделениеОрганизации = "", ТабДокумент)
	
//	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_П7";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечатиП7("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечатиП7("ПоТабличнойЧастиДокумента", ПодразделениеОрганизации).Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("П7_от_09_10_1995");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаДно = Макет.ПолучитьОбласть("Дно");

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки);
		ОбластьМакетаШапка.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДФ=""ММММ, гггг""");
	КонецЕсли;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
    ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакетаШапка.Параметры.ЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	
	Первый = Истина;

	Если НЕ Первый Тогда
	     ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли; 
	Первый = Ложь;
		
	ОбластьМакетаШапка.Параметры.Подразделение = ПодразделениеОрганизации;
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл
			
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		
		НачалоТек = НачалоМесяца(ВыборкаДляШапки.ДатаДок);
		КонецТек  = КонецМесяца(ВыборкаДляШапки.ДатаДок);
		НачалоСлед= КонецТек+1;
		КонецСлед = КонецМесяца(НачалоСлед);
		ДнейВсего = ?(НЕ ЗначениеЗаполнено(ВыборкаРаботники.ДатаПо),0,Цел((ВыборкаРаботники.ДатаПо - ВыборкаРаботники.ДатаС + 1) / мДлинаСуток));
		
		
		Если (ВыборкаРаботники.ДатаС>КонецТек)ИЛИ(ВыборкаРаботники.ДатаПО<НачалоТек) Тогда
			ДнейТек = "";
		ИначеЕсли (ВыборкаРаботники.ДатаС<НачалоТек)И(ВыборкаРаботники.ДатаПО<КонецТек) Тогда
			ДнейТек = Цел((ВыборкаРаботники.ДатаПо - НачалоТек + 1) / мДлинаСуток)+1;
		ИначеЕсли (ВыборкаРаботники.ДатаС>=НачалоТек)И(ВыборкаРаботники.ДатаПО<КонецТек) Тогда
			ДнейТек = Цел((ВыборкаРаботники.ДатаПо - ВыборкаРаботники.ДатаС + 1) / мДлинаСуток)+1;
		ИначеЕсли (ВыборкаРаботники.ДатаС>НачалоТек)И(ВыборкаРаботники.ДатаПО>КонецТек) Тогда
			ДнейТек = Цел((КонецТек - ВыборкаРаботники.ДатаС + 1) / мДлинаСуток);
		КонецЕсли;	
		Если (ВыборкаРаботники.ДатаС>КонецСлед)ИЛИ(ВыборкаРаботники.ДатаПО<НачалоСлед) Тогда
			ДнейСлед = "";
		ИначеЕсли (ВыборкаРаботники.ДатаС<НачалоСлед)И(ВыборкаРаботники.ДатаПО<КонецСлед) Тогда
			ДнейСлед = Цел((ВыборкаРаботники.ДатаПо - НачалоСлед + 1) / мДлинаСуток)+1;
		ИначеЕсли (ВыборкаРаботники.ДатаС>=НачалоСлед)И(ВыборкаРаботники.ДатаПО<=КонецСлед) Тогда
			ДнейСлед = Цел((ВыборкаРаботники.ДатаПо - ВыборкаРаботники.ДатаС + 1) / мДлинаСуток)+1;
		ИначеЕсли (ВыборкаРаботники.ДатаС>=НачалоТек)И(ВыборкаРаботники.ДатаПО>КонецТек) Тогда
			ДнейСлед = Цел((КонецСлед - ВыборкаРаботники.ДатаС + 1) / мДлинаСуток);
		КонецЕсли;	
		
		ОбластьМакетаСтрока.Параметры.ДнейТек = ДнейТек;
		ОбластьМакетаСтрока.Параметры.ДнейСлед = ДнейСлед;
		
		ОбластьМакетаСтрока.Параметры.ПериодОтпуска = Формат(ВыборкаРаботники.РабочийГодС,"ДФ=""дд.ММ.гггг"";ДП="" """)+" - "+Формат(ВыборкаРаботники.РабочийГодПо,"ДФ=""дд.ММ.гггг"";ДП="" """);
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаДно);


	Возврат ТабДокумент;

КонецФункции // ПечатьП7()	

#КонецЕсли

// Заполняет табличную часть документа отпусками по графику отпусков
//
// Параметры
//	ДатаНачала, ДатаОкончания	– даты начала и окончания
//								  просмотра графика отпусков	
//
Процедура Автозаполнение(ДатаНачала, ДатаОкончания) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!");
		Возврат
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Сообщить("Не указаны границы периода просмотра графика отпусков!");
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	Организация);
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",			ДатаОкончания);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГрафикОтпусковОрганизации.Сотрудник КАК Сотрудник,
	|	ГрафикОтпусковОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ГрафикОтпусковОрганизации.Период КАК ДатаНачала,
	|	ГрафикОтпусковОрганизации.ДатаОкончания,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ЕжегодныйОсновной) КАК ВидОтпуска,
	|	КОЛИЧЕСТВО(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КвоДней
	|		
	|ИЗ
	|	РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|		ГДЕ
	|			РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация
	|			И РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			РаботникиОрганизации.Сотрудник
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ГДЕ
	|			РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизации.Период > &ДатаНачала
	|			И РаботникиОрганизации.Период <= &ДатаОкончания
	|			И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|			И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		
	|) КАК РаботникиОрганизации
	|		ПО ГрафикОтпусковОрганизации.Сотрудник = РаботникиОрганизации.Сотрудник
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ПО
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ГрафикОтпусковОрганизации.Период И ГрафикОтпусковОрганизации.ДатаОкончания	
	|	
	|ГДЕ
	|	ГрафикОтпусковОрганизации.Организация = &ГоловнаяОрганизация
	|	И ГрафикОтпусковОрганизации.Период <= &ДатаОкончания
	|	И ГрафикОтпусковОрганизации.Период >= &ДатаНачала
	|	И ГрафикОтпусковОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|	И РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыДнейПроизводственногоКалендаря.Праздник)
	|СГРУППИРОВАТЬ ПО
	|	ГрафикОтпусковОрганизации.Сотрудник,
	|	ГрафикОтпусковОрганизации.Сотрудник.ФизЛицо,
	|	ГрафикОтпусковОрганизации.Период,
	|	ГрафикОтпусковОрганизации.ДатаОкончания,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ЕжегодныйОсновной)
	|";
	
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // Автозаполнение()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтпускаОрганизаций.Дата,
	               |	ОтпускаОрганизаций.Организация,
				   |	ОтпускаОрганизаций.Организация КАК ГоловнаяОрганизация,
				   |	ОтпускаОрганизаций.Ссылка
	               |ИЗ
	               |	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
	               |
	               |ГДЕ
	               |	ОтпускаОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки 						КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник						КАК Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование			КАК НаименованиеСотрудник,
	|	ТЧРаботникиОрганизации.ВидОтпуска						КАК ВидОтпуска,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо 				КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаНачала						КАК ДатаНачала,
	|	ТЧРаботникиОрганизации.ДатаОкончания					КАК ДатаОкончания,
	|	ТЧРаботникиОрганизации.РабочийГодС						КАК РабочийГодС,	
	|	ТЧРаботникиОрганизации.РабочийГодПо						КАК РабочийГодПо,
	|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении			КАК НапомнитьПоЗавершении,
	|	ТЧРаботникиОрганизации.ОсвобождатьСтавку				КАК ОсвобождатьСтавку,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации 	КАК ПодразделениеОрганизации,
	|	ДанныеПоРаботникуДоНазначения.Должность 				КАК Должность,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок 			КАК ЗанимаемыхСтавок,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер				КАК КонфликтнаяСтрокаНомер,	
	|	ИмеющиесяСостояния.Состояние 							КАК КонфликтноеСостояние,
	|	ИмеющиесяСостояния.Регистратор.Представление 			КАК КонфликтныйДокумент,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ 													КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
	|					И ТЧРаботникиОрганизации.ДатаНачала <= ТЧРаботникиОрганизации2.ДатаНачала
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|					И (ВЫБОР
	|						КОГДА ТЧРаботникиОрганизации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ИСТИНА
	|						КОГДА (ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ТЧРаботникиОрганизации.ДатаОкончания >= ТЧРаботникиОрганизации2.ДатаНачала
	|					КОНЕЦ)
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ИмеющиесяСостояния
	|		ПО ТЧРаботникиОрганизации.ДатаНачала = ИмеющиесяСостояния.Период
	|			И ТЧРаботникиОрганизации.Ссылка <> ИмеющиесяСостояния.Регистратор
	|			И ТЧРаботникиОрганизации.Сотрудник = ИмеющиесяСостояния.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоИспользованиюОтпусков(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	                      
	ТекстЗапроса ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИспользованиеЕжегодногоОтпуска.НомерСтроки,
		|	ИспользованиеЕжегодногоОтпуска.Сотрудник,
		|	ИспользованиеЕжегодногоОтпуска.ВидОтпуска,
		|	ИспользованиеЕжегодногоОтпуска.РабочийПериодНачало,
		|	ИспользованиеЕжегодногоОтпуска.РабочийПериодОкончание,
		|	ИспользованиеЕжегодногоОтпуска.ИспользоватьДней	
		|ИЗ
		|	Документ.ОтпускаОрганизаций.ИспользованиеЕжегодногоОтпуска	 КАК ИспользованиеЕжегодногоОтпуска		
		|	
		|ГДЕ
		|	ИспользованиеЕжегодногоОтпуска.Ссылка = &ТекущийДокумент
		|";

		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоИспользованиюОтпусков()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, работники которой отправляются в отпуск!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачала
	НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
	Если НетДатыНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
	КонецЕсли;

	// Причина отсутствия
	НетВидаОтпуска = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидОтпуска);
	Если НетВидаОтпуска Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид отпуска!", Отказ, Заголовок);
	Иначе
		ВидОтпуска = ВыборкаПоСтрокамДокумента.ВидОтпуска;
		КонецЕсли;

	Если НетСотрудника ИЛИ НетДатыНачала ИЛИ НетВидаОтпуска Тогда
		Возврат;
	КонецЕсли;

	Если  ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
		
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.Сотрудник + " еще не принят на работу!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.Сотрудник + " уже уволен!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли; 

	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "период отпуска пересекается с периодом строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск Тогда
		// Проверка: в регистре уже есть такое движение
		Если ВыборкаПоСтрокамДокумента.КонфликтноеСостояние <> NULL Тогда
			СтрокаСообщениеОбОшибке = "работник уже переведен в состояние """ + ВыборкаПоСтрокамДокумента.КонфликтноеСостояние + """ документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

Процедура ПроверитьЗаполнениеСтрокиИспользованиеОтпусков(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ Строка(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Учет отпусков по периодам"": ";
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидОтпуска
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидОтпуска) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начало рабочего периода!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаОкончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийПериодОкончание) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано ококнчание рабочего периода!", Отказ, Заголовок);
	КонецЕсли;
		
КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Если ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск Тогда
		
		Причина = ВыборкаПоРаботникиОрганизации.ВидОтпуска;
		
		// движения по дате "с"
		Движение = Движения.СостояниеРаботниковОрганизаций.Добавить();

		// Свойства
		Движение.Период			= ВыборкаПоРаботникиОрганизации.ДатаНачала;

		// Измерения
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Ресурсы
		Движение.Состояние = ВыборкаПоРаботникиОрганизации.ВидОтпуска.СостояниеСотрудника;

		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) Тогда

			// Движения по дате "по"
			Если  НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
				// Свойства
				Движение.ПериодЗавершения = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
				// Ресурсы
				Движение.СостояниеЗавершения = Перечисления.СостоянияРаботникаОрганизации.Работает;
				
			Иначе
				Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();

				// Свойства
				Движение.Период				= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
		
				// Измерения
				Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
				Движение.ДатаИзменения		= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
       			// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное планируемое изменение работника
				Движение.ПланируемоеСобытие	= Перечисления.НамеченныеСобытияПоПерсоналу[ВыборкаПоРаботникиОрганизации.ВидОтпуска.СостояниеСотрудника.Метаданные().ЗначенияПеречисления[Перечисления[ВыборкаПоРаботникиОрганизации.ВидОтпуска.СостояниеСотрудника.Метаданные().Имя].Индекс(ВыборкаПоРаботникиОрганизации.ВидОтпуска.СостояниеСотрудника)].Имя];
        				
				// Реквизиты
				Движение.ЗанимаемыхСтавок	= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
				Движение.ЗаниматьСтавку		= ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку;
				
			КонецЕсли;

		КонецЕсли;

		Движение = Движения.ПериодыСостоянийРаботниковОрганизаций.Добавить();
				
		// Измерения
		Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаНачала;
		Если ВыборкаПоРаботникиОрганизации.ДатаОкончания <> '0001-01-01' И
			 НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
			Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
	
	// Свойства
	Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаНачала;

	// Измерения
	Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
	Движение.Должность						= ВыборкаПоРаботникиОрганизации.Должность;

	// Ресурсы
	Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 

	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) и НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда

		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();

		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;

		// Ресурсы
		Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура РасчитатьОстаткиЗаВсеПериоды(РасчитыватьОстаткиЗаВсеГода = Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	//Получаем информацию о видах отпусков, количестве дней на каждый отпуск:
	
	//Возможна ситуация в которой дата начала и дата окончания попадут в разные рабочие периоды, что в некоторых случаях недопустимо.
	//Поэтому разбиваем даты отпуска на соответственные рабочие периоды 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник			КАК Сотрудник,
	|	РаботникиОрганизации.ДатаНачала			КАК ДатаНачала,
	|	РаботникиОрганизации.ДатаОкончания		КАК ДатаОкончания,
	|	РаботникиОрганизации.ВидОтпуска			КАК ВидОтпуска,
	|	РаботникиОрганизации.Ссылка.Организация	КАК Организация,
	|	РаботникиОрганизации.КвоДней			КАК ТребуетсяИспользоватьДней
	|ПОМЕСТИТЬ
	|	ВТОтпускаОрганизацийРаботникиОрганизации
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
	|ГДЕ 
	|	РаботникиОрганизации.Ссылка = &Ссылка
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	РабочиеПериодыКалендарь.Сотрудник	КАК Сотрудник,
	|	РабочиеПериодыКалендарь.ВидОтпуска	КАК ВидОтпуска,
	|	РабочиеПериодыКалендарь.Организация	КАК Организация,
	|	РабочиеПериодыКалендарь.ДатаНачала	КАК ДатаНачала,
	|	РабочиеПериодыКалендарь.ДатаОкончания	КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РабочиеПериодыКалендарь.КвоДней)	КАК ТребуетсяИспользоватьДней
	|ПОМЕСТИТЬ 
	|	ВТРаботникиОрганизации
	|ИЗ
	|(
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочиеПериоды.Сотрудник 	КАК Сотрудник,
	|	РабочиеПериоды.ВидОтпуска	КАК ВидОтпуска,
	|	РабочиеПериоды.Организация	КАК Организация,
	|	РабочиеПериоды.ДатаНачала	КАК ДатаНачала,
	|	РабочиеПериоды.ДатаОкончания	КАК ДатаОкончания,
	|	Календарь.ДатаКалендаря		КАК КвоДней
	|	
//	|	РабочиеПериоды.РабочийПериодНачало		КАК РабочийПериодНачало,
//	|	РабочиеПериоды.РабочийПериодОкончание	КАК РабочийПериодОкончание
	|
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	РабочийПериодДатаНачала.Сотрудник КАК Сотрудник,
	|   РабочийПериодДатаНачала.ВидОтпуска	 КАК ВидОтпуска,
	|	РабочийПериодДатаНачала.Организация		КАК Организация,
	|	РабочийПериодДатаНачала.ДатаНачала		КАК ДатаНачала,
	|	ВЫБОР 
	|		КОГДА РабочийПериодДатаНачала.ДатаОкончания > РабочийПериодДатаНачала.РабочийПериодОкончание 
	|			ТОГДА РабочийПериодДатаНачала.РабочийПериодОкончание
	|		ИНАЧЕ
	|			РабочийПериодДатаНачала.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	РабочийПериодДатаНачала.РабочийПериодНачало КАК РабочийПериодНачало,
	|	РабочийПериодДатаНачала.РабочийПериодОкончание	КАК РабочийПериодОкончание
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.Сотрудник	КАК Сотрудник,
	|		РаботникиОрганизации.ВидОтпуска	КАК ВидОтпуска,
	|		РаботникиОрганизации.Организация КАК Организация,
	|		РаботникиОрганизации.ДатаНачала	КАК ДатаНачала,
	|		РаботникиОрганизации.ДатаОкончания	КАК ДатаОкончания,
	|		ВЫБОР
	|			КОГДА НЕ РаботникиОрганизации.ВидОтпуска.УчетПоКалендарнымГодам 
	|				ТОГДА ДОБАВИТЬКДАТЕ(ДатыПриема.Период,ГОД,РАЗНОСТЬДАТ(ДатыПриема.Период,РаботникиОрганизации.ДатаНачала,ГОД ))
	|			ИНАЧЕ
	|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДатыПриема.Период,ГОД,РАЗНОСТЬДАТ(ДатыПриема.Период,РаботникиОрганизации.ДатаНачала,ГОД )),ГОД)
	|		КОНЕЦ КАК РабочийПериодНачало,
	|				
	//Первое, внутреннее добавление, аналогично РабочийПериодНачало, второе - добавляем год, третие - отнимаем секунду.
	|		ВЫБОР
	|			КОГДА НЕ РаботникиОрганизации.ВидОтпуска.УчетПоКалендарнымГодам 
	|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДатыПриема.Период,ГОД,РАЗНОСТЬДАТ(ДатыПриема.Период,РаботникиОрганизации.ДатаНачала,ГОД)),ГОД,1),СЕКУНДА,-1)
	|			ИНАЧЕ
	|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДатыПриема.Период,ГОД,РАЗНОСТЬДАТ(ДатыПриема.Период,РаботникиОрганизации.ДатаНачала,ГОД)),ГОД,1),СЕКУНДА,-1),ГОД)
	|		КОНЕЦ КАК РабочийПериодОкончание,
	|		ДатыПриема.Период	КАК ДатаПриема
	|	ИЗ	
	|		ВТОтпускаОрганизацийРаботникиОрганизации КАК РаботникиОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РаботникиОрганизаций.СрезПервых(,Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТОтпускаОрганизацийРаботникиОрганизации))  КАК ДатыПриема
	|	ПО
	|		РаботникиОрганизации.Сотрудник = ДатыПриема.Сотрудник
	|		И РаботникиОрганизации.Организация = ДатыПриема.Организация
	|) КАК РабочийПериодДатаНачала
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РабочийПериодДатаОкончания.Сотрудник КАК Сотрудник,
	|   РабочийПериодДатаОкончания.ВидОтпуска	 КАК ВидОтпуска,
	|	РабочийПериодДатаОкончания.Организация		КАК Организация,
	|	ВЫБОР
	|		КОГДА РабочийПериодДатаОкончания.ДатаОкончания > РабочийПериодДатаОкончания.РабочийПериодНачало 
	|			ТОГДА РабочийПериодДатаОкончания.РабочийПериодНачало
	|		ИНАЧЕ
	|			РабочийПериодДатаОкончания.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	РабочийПериодДатаОкончания.ДатаОкончания,
	|	РабочийПериодДатаОкончания.РабочийПериодНачало КАК РабочийПериодНачало,
	|	РабочийПериодДатаОкончания.РабочийПериодОкончание	КАК РабочийПериодОкончание
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.Сотрудник	КАК Сотрудник,
	|		РаботникиОрганизации.ВидОтпуска	КАК ВидОтпуска,
	|		РаботникиОрганизации.Организация КАК Организация,
	|		РаботникиОрганизации.ДатаНачала	КАК ДатаНачала,
	|		РаботникиОрганизации.ДатаОкончания	КАК ДатаОкончания,
	|		ВЫБОР
	|			КОГДА НЕ РаботникиОрганизации.ВидОтпуска.УчетПоКалендарнымГодам 
	|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДатыПриема.Период,ГОД,РАЗНОСТЬДАТ(ДатыПриема.Период,РаботникиОрганизации.ДатаНачала,ГОД )),ГОД,1)
	|		ИНАЧЕ
	|			НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДатыПриема.Период,ГОД,РАЗНОСТЬДАТ(ДатыПриема.Период,РаботникиОрганизации.ДатаНачала,ГОД )),ГОД,1),ГОД)
	|		КОНЕЦ КАК РабочийПериодНачало,
	|		ВЫБОР 
	|			КОГДА НЕ РаботникиОрганизации.ВидОтпуска.УчетПоКалендарнымГодам
	|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДатыПриема.Период,ГОД,РАЗНОСТЬДАТ(ДатыПриема.Период,РаботникиОрганизации.ДатаНачала,ГОД )),ГОД,1),ГОД,1),СЕКУНДА,-1)
	|			ИНАЧЕ
	|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДатыПриема.Период,ГОД,РАЗНОСТЬДАТ(ДатыПриема.Период,РаботникиОрганизации.ДатаНачала,ГОД )),ГОД,1),ГОД,1),СЕКУНДА,-1),ГОД)
	|		КОНЕЦ КАК РабочийПериодОкончание,
	|		ДатыПриема.Период	КАК ДатаПриема
	|	ИЗ	
	|		ВТОтпускаОрганизацийРаботникиОрганизации КАК РаботникиОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РаботникиОрганизаций.СрезПервых(,Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТОтпускаОрганизацийРаботникиОрганизации))  КАК ДатыПриема
	|	ПО
	|		РаботникиОрганизации.Сотрудник = ДатыПриема.Сотрудник
	|		И РаботникиОрганизации.Организация = ДатыПриема.Организация
	|) КАК РабочийПериодДатаОкончания
	|)КАК РабочиеПериоды
	|ПРАВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
	|ПО 
	|	Календарь.ДатаКалендаря МЕЖДУ  РабочиеПериоды.ДатаНачала И РабочиеПериоды.ДатаОкончания	
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА НЕ РабочиеПериоды.ВидОтпуска.ВключатьПраздники 
	|			ТОГДА Календарь.ВидДня <> ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыДнейПроизводственногоКалендаря.Праздник)
	|			И Календарь.ДатаКалендаря МЕЖДУ  РабочиеПериоды.ДатаНачала И РабочиеПериоды.ДатаОкончания	
	|		ИНАЧЕ
	|			Календарь.ДатаКалендаря МЕЖДУ  РабочиеПериоды.ДатаНачала И РабочиеПериоды.ДатаОкончания	
	|    КОНЕЦ
	|) КАК РабочиеПериодыКалендарь
	
	|СГРУППИРОВАТЬ ПО
	|	РабочиеПериодыКалендарь.Сотрудник ,
	|	РабочиеПериодыКалендарь.ВидОтпуска,
	|	РабочиеПериодыКалендарь.Организация,
	|	РабочиеПериодыКалендарь.ДатаНачала,
	|	РабочиеПериодыКалендарь.ДатаОкончания
	|";
	
	Запрос.Выполнить();
	                                               	
	ДополнитьРабочиеПериоды(Запрос.МенеджерВременныхТаблиц, РасчитыватьОстаткиЗаВсеГода);
		
	//Получем информацию о положенном количестве дней отпуска
	//ВТОстаткиОтпусковПоРабочимПериодам
	//В этой временной таблице храним информацию о количестве дней остающихся на конец каждого рабочего периода 
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаЗаписиПоложенныхОтпусков.Сотрудник			КАК Сотрудник,
	|	ДатаЗаписиПоложенныхОтпусков.Организация		КАК Организация,
	|	ДатаЗаписиПоложенныхОтпусков.ВидОтпуска			КАК ВидОтпуска,
	|	ДатаЗаписиПоложенныхОтпусков.ДатаЗаписи 		КАК ДатаИзмененияРазмераПоложенныхОтпусков,
	|	ДатаЗаписиПоложенныхОтпусков.РабочийПериодНачало 	КАК РабочийПериодНачало,
	|	ДатаЗаписиПоложенныхОтпусков.РабочийПериодОкончание КАК РабочийПериодОкончание,
	|	ПоложенныеЕжегодныеОтпуска.Положено 	КАК ПоложеноДнейОтпуска
	|ПОМЕСТИТЬ
	|	ВТПоложеноДнейОтпуска
	|ИЗ
	|(
	|	ВЫБРАТЬ 
	|		РабочиеПериодыОтпуска.Сотрудник			 	 	КАК Сотрудник,
	|		РабочиеПериодыОтпуска.ВидОтпуска			 	КАК ВидОтпуска,
	|		РабочиеПериодыОтпуска.Организация				КАК Организация,
	|		РабочиеПериодыОтпуска.РабочийПериодНачало		КАК РабочийПериодНачало,
	|		РабочиеПериодыОтпуска.РабочийПериодОкончание	КАК РабочийПериодОкончание,
	|		МАКСИМУМ(ПоложенныеОтпускаРаботников.Период)    КАК ДатаЗаписи
	|	ИЗ
	|		ВТРаботникиРабочиеПериоды КАК РабочиеПериодыОтпуска
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников КАК ПоложенныеОтпускаРаботников	
	|	ПО
	|		РабочиеПериодыОтпуска.Сотрудник = ПоложенныеОтпускаРаботников.Сотрудник
	|		И РабочиеПериодыОтпуска.ВидОтпуска = ПоложенныеОтпускаРаботников.ВидОтпуска
	|		И РабочиеПериодыОтпуска.Организация = ПоложенныеОтпускаРаботников.Организация
	|		И РабочиеПериодыОтпуска.РабочийПериодОкончание >= ПоложенныеОтпускаРаботников.Период 
	|	СГРУППИРОВАТЬ ПО
	|		РабочиеПериодыОтпуска.Сотрудник,
	|		РабочиеПериодыОтпуска.ВидОтпуска,
	|		РабочиеПериодыОтпуска.Организация,
	|		РабочиеПериодыОтпуска.РабочийПериодНачало,
	|		РабочиеПериодыОтпуска.РабочийПериодОкончание
	|)КАК ДатаЗаписиПоложенныхОтпусков
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников КАК ПоложенныеЕжегодныеОтпуска
	|ПО
	|	ДатаЗаписиПоложенныхОтпусков.ДатаЗаписи = ПоложенныеЕжегодныеОтпуска.Период
	|	И ДатаЗаписиПоложенныхОтпусков.Сотрудник = ПоложенныеЕжегодныеОтпуска.Сотрудник
	|	И ДатаЗаписиПоложенныхОтпусков.ВидОтпуска = ПоложенныеЕжегодныеОтпуска.ВидОтпуска
	|	И ДатаЗаписиПоложенныхОтпусков.Организация = ПоложенныеЕжегодныеОтпуска.Организация	
	|";
	Запрос.Выполнить();	
		
	//Запрос по использованным дням отпуска
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТПоложеноДнейОтпуска.Сотрудник					КАК Сотрудник,
	|	ВТПоложеноДнейОтпуска.Организация				КАК Организация,
	|	ВТПоложеноДнейОтпуска.РабочийПериодНачало 		КАК РабочийПериодНачало,
	|	ВТПоложеноДнейОтпуска.РабочийПериодОкончание	КАК РабочийПериодОкончание,
	|	ВТПоложеноДнейОтпуска.ВидОтпуска				КАК ВидОтпуска,
	|	ВТПоложеноДнейОтпуска.ПоложеноДнейОтпуска		КАК ПоложеноДнейОтпуска,
	|	СУММА(ЕстьNULL(ИспользованиеОтпусков.ИспользованоОсновногоОборот,0))	КАК ИспользованоДней
	|ПОМЕСТИТЬ ВТИспользованоДнейОтпуска
	|ИЗ
	|	ВТПоложеноДнейОтпуска КАК ВТПоложеноДнейОтпуска
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	РегистрНакопления.ИспользованиеЕжегодныхОтпусковРаботников.Обороты КАК ИспользованиеОтпусков
	|ПО
	|	ВТПоложеноДнейОтпуска.Сотрудник = ИспользованиеОтпусков.Сотрудник	       
	|	И ИспользованиеОтпусков.РабочийПериодНачало >= ВтПоложеноДнейОтпуска.РабочийПериодНачало
	|	И ИспользованиеОтпусков.РабочийПериодОкончание <= ВтПоложеноДнейОтпуска.РабочийПериодОкончание
	|	И ВТПоложеноДнейОтпуска.Организация = ИспользованиеОтпусков.Организация
	|	И ВТПоложеноДнейОтпуска.ВидОтпуска = ИспользованиеОтпусков.ВидОтпуска
	|СГРУППИРОВАТЬ ПО
	|	ВТПоложеноДнейОтпуска.Сотрудник,
	|	ВТположеноДнейОтпуска.Организация,
	|	ВТПоложеноДнейОтпуска.РабочийПериодНачало,
	|	ВТПоложеноДнейОтпуска.РабочийПериодОкончание,
	|	ВТПоложеноДнейОтпуска.ВидОтпуска,
	|	ВТПоложеноДнейОтпуска.ПоложеноДнейОтпуска
	|";
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТИспользованоДнейОтпуска";
	
	//В следующем запросе определяется остаток дней отпуска
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Сотрудник,
	|	Организация,
	|	РабочийПериодНачало,
	|	РабочийПериодОкончание,
	|	ВидОтпуска,
	|	ПоложеноДнейОтпуска,
	|	ИспользованоДней	КАК ИспользованоДнейОтпуска,
	|	ПоложеноДнейОтпуска - ИспользованоДней КАК ОстатокДнейОтпуска
	|ПОМЕСТИТЬ ВТОстатокДнейОтпуска
	|ИЗ
	|	ВТИспользованоДнейОтпуска	КАК ИспользованоДнейОтпуска
	|ГДЕ
	|	ПоложеноДнейОтпуска - ИспользованоДней > 0 
	|";
	Запрос.Выполнить();
	
	//Окончательный запрос, сопоставляем требуемому количеству дней отпуска остаток
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник		КАК Сотрудник,
	|	РаботникиОрганизации.ВидОтпуска		КАК ВидОтпуска,
	|	РаботникиОрганизации.Организация	КАК Организация,
	|	РаботникиОрганизации.ТребуетсяИспользоватьДней КАК ТребуетсяИспользоватьДней,
	|	РаботникиОрганизации.ДатаНачала		КАК ДатаНачала,
	|	РаботникиОрганизации.ДатаОкончания	КАК ДатаОкончания,
	|	ОсталосьДнейОтпуска.РабочийПериодНачало	КАК РабочийПериодНачало,
	|	ОсталосьДнейОтпуска.РабочийПериодокончание	КАК РабочийПериодОкончание,
	|	ЕстьNULL(ОсталосьДнейОтпуска.ПоложеноДнейОтпуска,0)		КАК ПоложеноДнейОтпуска,
	|	ЕстьNULL(ОсталосьДнейОтпуска.ИспользованоДнейОтпуска,0)	КАК ИспользованоДнейОтпуска,
	|	ЕстьNULL(ОсталосьДнейОтпуска.ОстатокДнейОтпуска,0)	КАК ОстатокДнейОтпуска				
	|ИЗ
	|
	|(ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник 		КАК Сотрудник,
	|	РаботникиОрганизации.ВидОтпуска		КАК ВидОтпуска,
	|	РаботникиОрганизации.Организация	КАК Организация,
	|	РаботникиОрганизации.ДатаОкончания	КАК ДатаОкончания,
	|	РаботникиОрганизации.ДатаНачала		КАК ДатаНачала,
	|	СУММА(РаботникиОрганизации.ТребуетсяИспользоватьДней) КАК ТребуетсяИспользоватьДней
	|ИЗ
	|	ВТРаботникиОрганизации КАК РаботникиОрганизации
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.ВидОтпуска,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ДатаОкончания,
	|	РаботникиОрганизации.ДатаНачала
	|	
	|) КАК РаботникиОрганизации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТОстатокДнейОтпуска	КАК ОсталосьДнейОтпуска
	|ПО
	|	РаботникиОрганизации.Сотрудник = ОсталосьДнейОтпуска.Сотрудник
	|	И РаботникиОрганизации.ВидОтпуска = ОсталосьДнейОтпуска.ВидОтпуска
	|	И РаботникиОрганизации.Организация	= ОсталосьДнейОтпуска.Организация
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.ВидОтпуска,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ДатаОкончания,
	|	РаботникиОрганизации.ДатаНачала,
	|	РабочийПериодНачало,
	|	РабочийПериодОкончание,
	|	ТребуетсяИспользоватьДней,
	|	ПоложеноДнейОтпуска,
	|	ИспользованоДнейОтпуска,
	|	ОстатокДнейОтпуска
	|УПОРЯДОЧИТЬ ПО
	|	ОсталосьДнейОтпуска.РабочийПериодНачало,
	|	ОсталосьДнейОтпуска.РабочийПериодОкончание	
	|ИТОГИ
	|	МАКСИМУМ(ДатаОкончания),
	|	МИНИМУМ(ДатаНачала),
	|	МАКСИМУМ(ТребуетсяИспользоватьДней),
	|	МИНИМУМ(РабочийПериодНачало),
	|	МАКСИМУМ(РабочийПериодОкончание),
	|	СУММА(ПоложеноДнейОтпуска),
	|	СУММА(ИспользованоДнейОтпуска),
	|	СУММА(ОстатокДнейОтпуска)
	|ПО Сотрудник,ВидОтпуска, ДатаНачала
	|";
	
	ВидОтпуска = Справочники.ВидыОтпусков.ПустаяСсылка();
	Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	
	ТЗИспользованиеЕжегодногоОтпуска = Новый ТаблицаЗначений;
	ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("УжеИспользованоДней", Новый ОписаниеТипов("Число"));
	ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("ПолагаетсяДней", Новый ОписаниеТипов("Число"));
	ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("ИспользоватьДней", Новый ОписаниеТипов("Число"));
	ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("РабочийПериодНачало", Новый ОписаниеТипов("Дата"));
	ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("РабочийПериодОкончание", Новый ОписаниеТипов("Дата"));
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Сотрудник") ;
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		ВыборкаВидОтпуска = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ВидОтпуска");
		Пока ВыборкаВидОтпуска.Следующий() Цикл
			Если ВыборкаВидотпуска.ПоложеноДнейОтпуска = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для работника """ + ВыборкаВидОтпуска.Сотрудник +""" с видом отпуска """+ ВыборкаВидОтпуска.ВидОтпуска + """ отсутствуют положенные дни отпуска. Проверте регистр сведений ""Положенные ежегодные отпуска работников""!") ;
			КонецЕсли;
			
			Если ВыборкаВидОтпуска.ТребуетсяИспользоватьДней > ВыборкаВидОтпуска.ОстатокДнейОтпуска Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для работника """ + ВыборкаВидОтпуска.Сотрудник+ """ с видом отпуска """ + ВыборкаВидОтпуска.ВидОтпуска + """ недостаточно остатка положенных дней отпуска, будут распределены возможные дни!");
			КонецЕсли;
			
			ВыборкаДатаНачала = ВыборкаВидОтпуска.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаНачала");
			ИспользованоДней = 0;
			ИспользованоДнейВПредыдущемПериоде = 0;
			РабочийПериодНачало = Дата(1,1,1);
			ИспользованоДней = 0;
			ИспользованоДнейВПериоде = 0;
			РабочийПериодУжеИспользуется = Ложь;
			
			Пока ВыборкаДатаНачала.Следующий() Цикл
				Если (Сотрудник  <> ВыборкаДатаНачала.Сотрудник) ИЛИ (ВидОтпуска <> ВыборкаДатаНачала.ВидОтпуска) Тогда
					Сотрудник = ВыборкаДатаНачала.Сотрудник;
					ВидОтпуска = ВыборкаДатаНачала.ВидОтпуска;
					РабочийПериодНачало = ВыборкаДатаНачала.РабочийПериодНачало;
					ИспользованоДней = 0;
					ИспользованоДнейВПериоде = 0;
					РабочийПериодУжеИспользуется = Ложь;
				КонецЕсли;
				ИспользованоДней = 0;
				ТребуетсяИспользоватьДней =ВыборкаДатаНачала.ТребуетсяИспользоватьДней;
				
				Выборка = ВыборкаДатаНачала.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ТребуетсяИспользоватьДней = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если РабочийПериодНачало <> Выборка.РабочийПериодНачало Тогда
						ИспользованоДнейВПериоде = 0;
						РабочийПериодУжеИспользуется = Ложь;
					КонецЕсли;
										
					Если Не ЗначениеЗаполнено(Выборка.РабочийПериодНачало) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Выборка.ДатаОкончания < Выборка.РабочийПериодНачало Тогда //Это дни следующего рабочего периода
						ОбщегоНазначения.СообщитьОбОшибке("Для работника """ + ВыборкаВидОтпуска.Сотрудник + """ с видом отпуска """ + ВыборкаВидОтпуска.ВидОтпуска + """ недостаточно остатка положенных отпусков на текущий рабочий период, будут использованы дни следующего рабочего периода!") ;
					КонецЕсли;
					
					Если (Выборка.ОстатокДнейОтпуска-ИспользованоДнейВПериоде) < 0 Тогда
						Продолжить;
					КонецЕсли;	
						
					//Возможно строки с таким рабочим периодом уже есть
					Если НЕ РабочийПериодУжеИспользуется Тогда
						СтрокаТЧ = ИспользованиеЕжегодногоОтпуска.Добавить();
						РабочийПериодУжеИспользуется = Истина;
						СтрокаТЧ.ИспользоватьДней = ?(ТребуетсяИспользоватьДней < Выборка.ОстатокДнейОтпуска-ИспользованоДнейВПериоде,ТребуетсяИспользоватьДней,Выборка.ОстатокДнейОтпуска -ИспользованоДнейВПериоде);
					Иначе
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Сотрудник", Выборка.Сотрудник);
						ПараметрыОтбора.Вставить("ВидОтпуска", Выборка.ВидОтпуска);
						ПараметрыОтбора.Вставить("РабочийПериодНачало", Выборка.РабочийПериодНачало);
						НайденныеСтроки = ИспользованиеЕжегодногоОтпуска.НайтиСтроки(ПараметрыОтбора);
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаТЧ = НайденныеСтроки[0];
						КонецЕсли;
						СтрокаТЧ.УжеИспользованоДней = Выборка.ИспользованоДнейОтпуска + ИспользованоДнейВПериоде;
						СтрокаТЧ.ИспользоватьДней =СтрокаТЧ.ИспользоватьДней +  ?(ТребуетсяИспользоватьДней < Выборка.ОстатокДнейОтпуска-ИспользованоДнейВПериоде,ТребуетсяИспользоватьДней,Выборка.ОстатокДнейОтпуска -ИспользованоДнейВПериоде);
					КонецЕсли;
		
					СтрокаТЧ.Сотрудник = Выборка.Сотрудник;
					СтрокаТЧ.ВидОтпуска = Выборка.ВидОтпуска; 
					СтрокаТЧ.РабочийПериодНачало = Выборка.РабочийПериодНачало;	
					СтрокаТЧ.РабочийПериодОкончание = Выборка.РабочийПериодОкончание;
					СтрокаТЧ.УжеИспользованоДней = Выборка.ИспользованоДнейОтпуска;
					СтрокаТЧ.ПолагаетсяДней =  Выборка.ПоложеноДнейОтпуска;

					ИспользованоДней = ?(ТребуетсяИспользоватьДней < Выборка.ОстатокДнейОтпуска-ИспользованоДнейВПериоде,ТребуетсяИспользоватьДней,Выборка.ОстатокДнейОтпуска -ИспользованоДнейВПериоде);
					ИспользованоДнейВПериоде = ИспользованоДнейВПериоде + ?(ТребуетсяИспользоватьДней < Выборка.ОстатокДнейОтпуска-ИспользованоДнейВПериоде,ТребуетсяИспользоватьДней,Выборка.ОстатокДнейОтпуска-ИспользованоДнейВПериоде);
					ТребуетсяИспользоватьДней = ТребуетсяИспользоватьДней - ИспользованоДней;
					
					Если ТребуетсяИспользоватьДней = 0 Тогда
						ИспользованоДней = 0;
						Продолжить;
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;  		
	КонецЦикла;	
		
	ИспользованиеЕжегодногоОтпуска.Свернуть("РабочийПериодНачало,РабочийПериодОкончание,ПолагаетсяДней,УжеИспользованоДней,Сотрудник,ВидОтпуска","ИспользоватьДней");
КонецПроцедуры

//Процедура добавляет в менеджер временных таблиц дополнительную таблицу
Функция ДополнитьРабочиеПериоды(МенеджерВременныхТаблиц, РасчитыватьОстаткиЗаВсеГода = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|   ВЫБОР КОГДА
	|		НЕ РаботникиОрганизации.ВидОтпуска.УчетПоКалендарнымГодам 
	|			ТОГДА СрезПервых.Период			
	|		ИНАЧЕ
	|			НАЧАЛОПЕРИОДА(СрезПервых.Период,ГОД)
	|	КОНЕЦ КАК Период,
	|	РаботникиОрганизации.ДатаОкончания	КАК ДатаОкончания,
	|	РаботникиОрганизации.ДатаНачала	КАК ДатаНачала,
	|	РаботникиОрганизации.ВидОтпуска	КАК ВидОтпуска,
	|	РаботникиОрганизации.Организация	КАК Организация
	|ИЗ
	|	ВТРаботникиОрганизации КАК РаботникиОрганизации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РаботникиОрганизаций.СрезПервых(,Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТРаботникиОрганизации)) КАК СрезПервых
	|ПО
	|	СрезПервых.Сотрудник = РаботникиОрганизации.Сотрудник
	|";                                                      
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	ТаблицаСотрудникиРабочиеПериоды = Новый ТаблицаЗначений;
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("РабочийПериодНачало", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("РабочийПериодОкончание", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если РасчитыватьОстаткиЗаВсеГода Тогда 
		Пока Выборка.Следующий() Цикл 	
			Если Выборка.ВидОтпуска.ОтпускНеПереноситсяНаСледующийГод Тогда
				РабочийПериодНачало = ДобавитьМесяц(Выборка.Период,(Год(Выборка.ДатаНачала) - Год(Выборка.Период))*12)
			Иначе
				РабочийПериодНачало =?(КоличествоЛет=0,Выборка.Период,ДобавитьМесяц(Выборка.Период,(Год(Выборка.ДатаНачала) - Год(Выборка.Период)-1-КоличествоЛет)*12));
			КонецЕсли;	
				
			Пока (Год(РабочийПериодНачало) <= Год(Выборка.ДатаОкончания)) 
				И РабочийПериодНачало < Выборка.ДатаОкончания Цикл
				НоваяСтрока = ТаблицаСотрудникиРабочиеПериоды.Добавить();
				НоваяСтрока.РабочийПериодНачало = РабочийПериодНачало;
				НоваяСтрока.РабочийПериодОкончание = ДобавитьМесяц(РабочийПериодНачало,12) - 1;
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ВидОтпуска = Выборка.ВидОтпуска;
				НоваяСтрока.Организация	= Выборка.Организация;
				
				РабочийПериодНачало = ДобавитьМесяц(РабочийПериодНачало,12);
			КонецЦикла;		
			//Добавим следующий рабочий период для возможного начисления отпуска авансом
			Если НЕ Выборка.ВидОтпуска.ОтпускНеПереноситсяНаСледующийГод Тогда
				НоваяСтрока = ТаблицаСотрудникиРабочиеПериоды.Добавить();
				//Рабочий период изменился в предыдущем цикле
				НоваяСтрока.РабочийПериодНачало = РабочийПериодНачало;
				НоваяСтрока.РабочийПериодОкончание = ДобавитьМесяц(РабочийПериодНачало,12) - 1;
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ВидОтпуска = Выборка.ВидОтпуска;
				НоваяСтрока.Организация = Выборка.Организация;
			КонецЕсли;	
		КонецЦикла;
	Иначе //Остатки только за прошлый год, и в случае надобности год аванса	
		Пока Выборка.Следующий() Цикл
			
			//Предыдущий и следующий рабочий период
			Если НЕ Выборка.ВидОтпуска.ОтпускНеПереноситсяНаСледующийГод Тогда
				РабочийПериодНачало = ДобавитьМесяц(Выборка.Период,(Год(Выборка.ДатаНачала) - Год(Выборка.Период)-1)*12);
				НоваяСтрока = ТаблицаСотрудникиРабочиеПериоды.Добавить();
				НоваяСтрока.РабочийПериодНачало = РабочийПериодНачало;
				НоваяСтрока.РабочийПериодОкончание = ДобавитьМесяц(РабочийПериодНачало,12) - 1;
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ВидОтпуска = Выборка.ВидОтпуска;
				НоваяСтрока.Организация	= Выборка.Организация;
				
				РабочийПериодНачало = ДобавитьМесяц(Выборка.Период,(Год(Выборка.ДатаНачала) - Год(Выборка.Период)+1)*12);
				НоваяСтрока = ТаблицаСотрудникиРабочиеПериоды.Добавить();
				НоваяСтрока.РабочийПериодНачало = РабочийПериодНачало;
				НоваяСтрока.РабочийПериодОкончание = ДобавитьМесяц(РабочийПериодНачало,12) - 1;
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ВидОтпуска = Выборка.ВидОтпуска;
				НоваяСтрока.Организация	= Выборка.Организация;
			КонецЕсли;
			
			//ТекущийРабочийПериод
			РабочийПериодНачало = ДобавитьМесяц(Выборка.Период,(Год(Выборка.ДатаНачала) - Год(Выборка.Период))*12);
			НоваяСтрока = ТаблицаСотрудникиРабочиеПериоды.Добавить();
			НоваяСтрока.РабочийПериодНачало = РабочийПериодНачало;
			НоваяСтрока.РабочийПериодОкончание = ДобавитьМесяц(РабочийПериодНачало,12) - 1;
			НоваяСтрока.Сотрудник = Выборка.Сотрудник;
			НоваяСтрока.ВидОтпуска = Выборка.ВидОтпуска;
			НоваяСтрока.Организация	= Выборка.Организация;
			
		КонецЦикла;
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ТаблицаСотрудникиРабочиеПериоды", ТаблицаСотрудникиРабочиеПериоды);
	Запрос.Текст =" 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиРабочиеПериоды.Сотрудник				КАК Сотрудник,
	|	СотрудникиРабочиеПериоды.РабочийПериодНачало	КАК РабочийПериодНачало,
	|	СотрудникиРабочиеПериоды.РабочийПериодОкончание КАК РабочийПериодОкончание,
	|	СотрудникиРабочиеПериоды.ВидОтпуска				КАК ВидОтпуска,
	|	СотрудникиРабочиеПериоды.Организация			КАК Организация
	|
	|ПОМЕСТИТЬ ВТРаботникиРабочиеПериоды 
	|ИЗ
	|	&ТаблицаСотрудникиРабочиеПериоды КАК СотрудникиРабочиеПериоды";
	
	Запрос.Выполнить();
КонецФункции

Функция ОпределитьДатуПриемаНаРаботу(Сотрудник) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Период	КАК ДатаПриемаНачало,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Период, ГОД, 1),СЕКУНДА, -1)		КАК ДатаПриемаОкончание	
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПервых(,Сотрудник=&Сотрудник)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПриемаНачало;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);	
	
КонецФункции

Функция ОпределитьКвоДнейДляОтпуска(Дата1, Дата2, ВидОтпуска) Экспорт
	ТекстЗапроса="ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоКалендарныеДни
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания		
	|";
	
	Если НЕ ВидОтпуска.ВключатьПраздники Тогда
		ТекстЗапроса = ТекстЗапроса + "И РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыДнейПроизводственногоКалендаря.Праздник)";
	КонецЕсли;
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачала", Дата1);
	Запрос.УстановитьПараметр("ДатаОкончания", Дата2);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	КоличествоКалендарныеДни=?(Выборка.КоличествоКалендарныеДни=Неопределено,0,Выборка.КоличествоКалендарныеДни);
	Возврат КоличествоКалендарныеДни;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);

					Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ПроверитьЗаполненияТЧ(Отказ, Заголовок);
			ДвиженияПоИспользованиюОтпусков(Заголовок, Отказ, Режим);

			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ДвиженияПоИспользованиюОтпусков(Заголовок, Отказ, Режим)
	Если ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск Тогда
	
		//РабочийПериодОкончание = Дата(1,1,1);
		//РабочийПериодНачало = дата(1,1,1);
		//ОстатокДнейВРабочемПериоде = 0;
		//
		//ВыборкаРаботники = СформироватьЗапросПоИспользованиюОтпусков(Режим).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Сотрудник");
		//		
		//Пока ВыборкаРаботники.Следующий() Цикл
		//ВыборкаВидОтпуска = ВыборкаРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ВидОтпуска");
		//
		//	
		//Пока ВыборкаВидОтпуска.Следующий() Цикл
		//	ВыборкаДатаНачала = ВыборкаВидОтпуска.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ДатаНачала");
		//	
		//	Пока ВыборкаДатаНачала.Следующий() Цикл
		//		Выборка = ВыборкаДатаНачала.Выбрать();
		//		УжеРаспределеноДнейОтпуска = 0;
		//						
		//		Пока Выборка.Следующий() Цикл	
		//			Если Выборка.РабочийПериодНачало < РабочийПериодНачало Тогда
		//				Продолжить;
		//			КонецЕсли;
		//			Если ОстатокДнейВРабочемПериоде > 0 И РабочийПериодНачало <> Выборка.РабочийПериодНачало Тогда
		//				Продолжить;
		//			КонецЕсли;
		//			
		//			
		//			КвоДнейОтпуска = Выборка.КвоДней;
		//			КвоДнейРабочегоПериода = ?(ОстатокДнейВРабочемПериоде > 0, ОстатокДнейВРабочемПериоде, Выборка.ИспользоватьДней);
		//			ОстатокДнейВРабочемПериоде = 0;
		//			
		//			ОсталосьРаспределитьДнейОтпуска = КвоДнейОтпуска - УжеРаспределеноДнейОтпуска;
		//			
		//			Если ОсталосьРаспределитьДнейОтпуска > 0 Тогда
		//				РаспределитьВРабочемПериодеДней = ?(ОсталосьРаспределитьДнейОтпуска > КвоДнейРабочегоПериода, КвоДнейРабочегоПериода, ОсталосьРаспределитьДнейОтпуска);
		//				УжеРаспределеноДнейОтпуска = УжеРаспределеноДнейОтпуска + РаспределитьВРабочемПериодеДней;
		//				ОстатокДнейВРабочемПериоде = КвоДнейРабочегоПериода - РаспределитьВРабочемПериодеДней;	
		//				Если ОстатокДнейВРабочемПериоде > 0 Тогда
		//					РабочийПериодНачало = Выборка.РабочийПериодНачало;
		//				КонецЕсли;
		//				
		//			КонецЕсли;
		//								
		//			Движение = Движения.ИспользованиеЕжегодныхОтпусковРаботников.Добавить();
		//			Движение.Сотрудник = Выборка.Сотрудник;
		//			Движение.ИспользованоОсновного = РаспределитьВРабочемПериодеДней;
		//			Движение.Активность = Истина;
		//			Движение.Период = Выборка.ДатаНачала;
		//			Движение.РабочийПериодНачало = Выборка.РабочийПериодНачало;
		//			Движение.РабочийПериодОкончание = Выборка.РабочийПериодОкончание;
		//			Движение.Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		//			Движение.ВидОтпуска = Выборка.ВидОтпуска;
		//			Движение.ВидОперации = ВидОперации;
		//				
		//			КонецЦикла;
		//		
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЦикла;
		
		ТекСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		ТекВидОтпуска = Справочники.ВидыОтпусков.ПустаяСсылка();
		
		РезультатЗапросаПоИспользованию = СформироватьЗапросПоИспользованиюОтпусков(Режим);
		ВыборкаПоИспользованию = РезультатЗапросаПоИспользованию.Выбрать();

		Пока ВыборкаПоИспользованию.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиИспользованиеОтпусков(ВыборкаПоИспользованию, Отказ, Заголовок);

			Если Отказ Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ТекСотрудник <> ВыборкаПоИспользованию.Сотрудник или ТекВидОтпуска <> ВыборкаПоИспользованию.ВидОтпуска Тогда
				ТекСотрудник = ВыборкаПоИспользованию.Сотрудник;
				ТекВидОтпуска = ВыборкаПоИспользованию.ВидОтпуска;
				ТаблицаОтпусков = РаботникиОрганизации.Выгрузить(Новый Структура("Сотрудник, ВидОтпуска",ТекСотрудник,ТекВидОтпуска),"Сотрудник, ВидОтпуска, ДатаНачала, КвоДней");
			КонецЕсли;	
			
			ИспользоватьДнейВсего = ВыборкаПоИспользованию.ИспользоватьДней;
			Если ИспользоватьДнейВсего = 0 Тогда
				Продолжить;
			Конецесли;	
			
			Для Каждого Отпуск из ТаблицаОтпусков Цикл
				Если Отпуск.КвоДней = 0 Тогда
					Продолжить;
				КонецЕсли;
				ИспользоватьДней = Мин(Отпуск.КвоДней,ИспользоватьДнейВсего);
				
				Движение = Движения.ИспользованиеЕжегодныхОтпусковРаботников.Добавить();
				Движение.Период = Отпуск.ДатаНачала;
				
				Движение.РабочийПериодНачало = ВыборкаПоИспользованию.РабочийПериодНачало;
				Движение.РабочийПериодОкончание = ВыборкаПоИспользованию.РабочийПериодОкончание;
				Движение.Организация = Организация;
				Движение.Сотрудник = ВыборкаПоИспользованию.Сотрудник;				
				Движение.ВидОтпуска = ВыборкаПоИспользованию.ВидОтпуска;

				Движение.ИспользованоОсновного = ИспользоватьДней;
				
				Движение.ВидОперации = ВидОперации;
				
				ИспользоватьДнейВсего = ИспользоватьДнейВсего - ИспользоватьДней;
				Отпуск.КвоДней = Отпуск.КвоДней - ИспользоватьДней;
				
				Если ИспользоватьДнейВсего = 0 Тогда
					Прервать;
				Конецесли;	
			
			КонецЦикла;	
			
			Если ИспользоватьДнейВсего > 0 Тогда
			    // Почему-то отпуска больше, чем указано. Тогда проводим на дату документа
				
				Движение = Движения.ИспользованиеЕжегодныхОтпусковРаботников.Добавить();
				Движение.Период = Дата;
				
				Движение.РабочийПериодНачало = ВыборкаПоИспользованию.РабочийПериодНачало;
				Движение.РабочийПериодОкончание = ВыборкаПоИспользованию.РабочийПериодОкончание;
				Движение.Организация = Организация;
				Движение.Сотрудник = ВыборкаПоИспользованию.Сотрудник;				
				Движение.ВидОтпуска = ВыборкаПоИспользованию.ВидОтпуска;
				
				Движение.ИспользованоОсновного = ВыборкаПоИспользованию.ИспользоватьДней;
				
				Движение.ВидОперации = ВидОперации;
            КонецЕсли;

		КонецЦикла;

	Иначе
		
		РезультатЗапросаПоИспользованию = СформироватьЗапросПоИспользованиюОтпусков(Режим);
		ВыборкаПоИспользованию = РезультатЗапросаПоИспользованию.Выбрать();

		Пока ВыборкаПоИспользованию.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиИспользованиеОтпусков(ВыборкаПоИспользованию, Отказ, Заголовок);

			Если НЕ Отказ Тогда
				Движение = Движения.ИспользованиеЕжегодныхОтпусковРаботников.Добавить();
				Движение.Период = Дата;
				
				Движение.РабочийПериодНачало = ВыборкаПоИспользованию.РабочийПериодНачало;
				Движение.РабочийПериодОкончание = ВыборкаПоИспользованию.РабочийПериодОкончание;
				Движение.Организация = Организация;
				Движение.Сотрудник = ВыборкаПоИспользованию.Сотрудник;				
				Движение.ВидОтпуска = ВыборкаПоИспользованию.ВидОтпуска;

				Движение.ИспользованоОсновного = ВыборкаПоИспользованию.ИспользоватьДней;
				
				Движение.ВидОперации = ВидОперации;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
		
	
КонецПроцедуры

Процедура ПроверитьЗаполненияТЧ(Отказ, Заголовок)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИспользованиеЕжегодногоОтпуска.Сотрудник 						КАК Сотрудник,
	|	ИспользованиеЕжегодногоОтпуска.ВидОтпуска						КАК ВидОтпуска,
	|	ЕстьNULL(ИспользованиеЕжегодногоОтпуска.ИспользоватьДней,0)		КАК ИспользоватьДней,
	|	ЕстьNULL(ИспользованиеЕжегодногоОтпуска.ПолагаетсяДней,0)	    КАК ПолагаетсяДней,
	|	ЕстьNULL(ИспользованиеЕжегодногоОтпуска.УжеИспользованоДней,0)	КАК УжеИспользованоДней,
	|	ЕстьNULL(РаботникиОрганизации.НомерСтроки,0)					КАК НомерСтрокиРаботникиОрганизации,
	|	ЕстьNULL(ИспользованиеЕжегодногоОтпуска.НомерСтроки,0)		 	КАК НомерСтрокиИспользованиеОтпуска,
	|	ЕстьNULL(РаботникиОрганизации.КвоДней,0)						КАК КвоДней
	|
	|ИЗ
	|	Документ.ОтпускаОрганизаций.ИспользованиеЕжегодногоОтпуска КАК ИспользованиеЕжегодногоОтпуска
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации	
	//Основными являются данные из "ТЧ Использование ежегодного отпуска", поскольку проверяется на наличие в этой ТЧ, недопустимых видов отпуска.
	|ПО
	|	РаботникиОрганизации.Ссылка = ИспользованиеЕжегодногоОтпуска.Ссылка 
	|	И РаботникиОрганизации.ВидОтпуска = ИспользованиеЕжегодногоОтпуска.ВидОтпуска
	|	И РаботникиОрганизации.Сотрудник = ИспользованиеЕжегодногоОтпуска.Сотрудник
	|ГДЕ
	|	ИспользованиеЕжегодногоОтпуска.Ссылка = &Ссылка 
	|ИТОГИ  
	|	СУММА(ИспользоватьДней),
	|	СУММА(ПолагаетсяДней),
	|	СУММА(УжеиспользованоДней),
	|	МАКСИМУМ(КвоДней),
	|	МАКСИМУМ(НомерСтрокиРаботникиОрганизации),
	|	МАКСИМУМ(НомерСтрокиИспользованиеОтпуска),
	|	МАКСИМУМ(Сотрудник)
	|ПО
	|	ИспользованиеЕжегодногоОтпуска.Сотрудник,
	|	ИспользованиеЕжегодногоОтпуска.ВидОтпуска
	|";
	
	ТекстСообщения = "";
	ВыборкаВидОтпуска = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидОтпуска");
	
	Если ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск Тогда
		Пока ВыборкаВидОтпуска.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаВидОтпуска.Сотрудник) Тогда
				Если ЗначениеЗаполнено(ВыборкаВидОтпуска.НомерСтрокиРаботникиОрганизации) Тогда
					ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиРаботникиОрганизации) + " табличной части ""Работники организации"" не указан сотрудник!" 
				Иначе
					ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиИспользованиеОтпуска) + " табличной части ""Использование ежегодного отпуска"" не указан сотрудник!" 
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ВыборкаВидОтпуска.ВидОтпуска) Тогда
				Если ЗначениеЗаполнено(ВыборкаВидОтпуска.НомерСтрокиРаботникиОрганизации) Тогда
					ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиРаботникиОрганизации) + " табличной части ""Работники организации"" не указан вид отпуска!" 
				Иначе
					ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиИспользованиеОтпуска) + " табличной части ""Использование ежегодного отпуска"" не указан вид отпуска!" 
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;		
			Если НЕ ВыборкаВидОтпуска.ВидОтпуска.ВедетсяУчетОстатков Тогда
				Если ЗначениеЗаполнено(ВыборкаВидОтпуска.НомерСтрокиРаботникиОрганизации) Тогда
					ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиРаботникиОрганизации) + " табличной части ""Работники организации"" указан вид отпуска по которому не ведется учет остатков!" 
				Иначе
					ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиИспользованиеОтпуска) + " табличной части ""Использование ежегодного отпуска"" указан вид отпуска по которому не ведется учет остатков!" 
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;			
			Если ВыборкаВидОтпуска.ИспользоватьДней > ВыборкаВидОтпуска.ПолагаетсяДней - ВыборкаВидОтпуска.УжеИспользованоДней Тогда
				ТекстСообщения = "Для сотрудника """ + ВыборкаВидОтпуска.Сотрудник + """ с видом отпуска """ + ВыборкаВидОтпуска.ВидОтпуска + """ требуется использовать больше дней чем доступно остатка!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла
	ИначеЕсли Видоперации = Перечисления.ВидыОперацийОтпускаОрганизаций.КомпенсацияОтпуска Тогда
		Пока ВыборкаВидОтпуска.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаВидОтпуска.ВидОтпуска) Тогда
				ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиИспользованиеОтпуска) + " табличной части ""Использование ежегодного отпуска"" не указан вид отпуска!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаВидОтпуска.Сотрудник) Тогда
				ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиИспользованиеОтпуска) + " табличной части ""Использование ежегодного отпуска"" не указан сотрудник!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;

			
			Если ВыборкаВидОтпуска.ВидОтпуска.ОтпускНеКомпенсируется Тогда
				ТекстСообщения = "В строке номер " + Строка(ВыборкаВидОтпуска.НомерСтрокиИспользованиеОтпуска) + " табличной части ""Использование ежегодного отпуска"" указан вид отпуска, который не компенсируется!";
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли
	
	
	
			
	
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если РаботникиОрганизации.Количество() = 0 Тогда
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ИспользованиеЕжегодногоОтпуска);
	Иначе
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
		ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);
	КонецЕсли;
	
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;
	
	Движения.ПериодыСостоянийРаботниковОрганизаций.РежимЗаписиРегистратора = РежимЗаписи;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//	Название макета печати передается в качестве параметра,
//	по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ИмяМакета <> "Диаграмма" Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка",		Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаОкончания) КАК ДатаОкончания
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботникиОрганизации
		|ГДЕ
		|	ОтпускаОрганизацииРаботникиОрганизации.Ссылка = &Ссылка
		|	И ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ДатаНачала <> Null и Выборка.ДатаОкончания <> Null и Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(Выборка.ДатаНачала,Выборка.ДатаОкончания,Истина) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	ИмяФормы = "";
	Если ИмяМакета = "П6_от_09_10_1995" Тогда
		ТабДокумент = ПечатьП6();
		
	ИначеЕсли ИмяМакета = "П3_от_05_12_2008" Тогда
		ТабДокумент = ПечатьП3();	
		
	ИначеЕсли ИмяМакета = "П7_от_09_10_1995" Тогда
		//ТабДокумент = ПечатьП7();
		//Проверка - форму П-7 можно напечатать только для одного подразделения
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.УстановитьПараметр("ДатаДок", Дата);
		Запрос.Текст ="
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
			|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
			|ИЗ
			|	Документ." + Метаданные().Имя + ".РаботникиОрганизации КАК Док
			|   ЛЕВОЕ СОЕДИНЕНИЕ
			|   РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДок) КАК РаботникиОрганизацийСрезПоследних
			|   ПО Док.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
			|ГДЕ
			|	Док.Ссылка  =  &ДокументСсылка
			|СГРУППИРОВАТЬ ПО
			|   РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации";
					
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаМестРаботы = РезультатЗапроса.Выбрать();
		ВсегоМестРаботы = ВыборкаМестРаботы.Количество();
		
		ТабДокумент = Новый ТабличныйДокумент;
		Пока ВыборкаМестРаботы.Следующий() Цикл
			
			ПечатьП7(ВыборкаМестРаботы.ПодразделениеОрганизации, ТабДокумент);
			
		КонецЦикла;

	ИначеЕсли ИмяМакета = "Диаграмма" тогда
		
		Если НЕ Проведен Тогда
			Предупреждение("Документ можно распечатать только после его проведения!");
			Возврат Неопределено;
		КонецЕсли;

		ИмяФормы = " (диаграмма отпусков)";
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОтпускаОрганизацииРаботники.ДатаОкончания) КАК ДатаКон,
		|	МИНИМУМ(ОтпускаОрганизацииРаботники.ДатаНачала) КАК ДатаНач
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Отчет = Отчеты.ДиаграммаГанта.Создать();
			Отчет.ВидОтчета = "Фактические отпуска работников организаций";
			Отчет.Периодичность = 2;
			Отчет.ЗаполнитьНачальныеНастройки();
			Отчет.ДатаНач = ?(ЗначениеЗаполнено(Выборка.ДатаНач),НачалоМесяца(Выборка.ДатаНач),НачалоГода(РабочаяДата));
			Отчет.ДатаКон = ?(ЗначениеЗаполнено(Выборка.ДатаКон),КонецМесяца(Выборка.ДатаКон),КонецГода(РабочаяДата));
			Возврат Отчет.Печать(Ссылка);
			
		Иначе
			Предупреждение("Ошибка исполнения запроса к т.ч.");
		КонецЕсли;
		Возврат Неопределено
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + ИмяФормы));

КонецФункции // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("П3_от_05_12_2008",	"Форма П-3");
	СтруктураМакетов.Вставить("П6_от_09_10_1995",	"Форма П-6 (от 09.10.1995)");
	СтруктураМакетов.Вставить("П7_от_09_10_1995",	"Форма П-7 (от 09.10.1995)");
	СтруктураМакетов.Вставить("Диаграмма", "Диаграмма");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура ЗаполнитьРабочиеПериоды(НомерСтроки=Неопределено) Экспорт
	СоответствиеПериодов=Новый Соответствие;
	
	Если НомерСтроки=Неопределено Тогда
		ИспользованиеЕжегодногоОтпуска.Очистить();
	Иначе
		Для Каждого СтрокаТЧ Из ИспользованиеЕжегодногоОтпуска Цикл
		//Удалить строки по номеру строки	
		КонецЦикла;
	КонецЕсли;
		
	Для каждого СтрокаТЧ из РаботникиОрганизации Цикл
		Если СтрокаТЧ.ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
			Продолжить;
		КонецЕсли;	
		НомерСтроки=СтрокаТЧ.НомерСтроки;
		ФизЛицо=СтрокаТЧ.ФизЛицо;
		ДатаНачала=СтрокаТЧ.ДатаНачала;
		ДатаОкончания=СтрокаТЧ.ДатаОкончания;
		
		ОсталосьДнейОтпуска=ПроведениеРасчетов.ОпределитьКвоКалендарныхДнейЗаПериод(СтрокаТЧ.ДатаНачала,СтрокаТЧ.ДатаОкончания);
		
		тбРабочиеПериоды=ПроведениеРасчетов.ПолучитьТаблицуРабочихПериодовОтпусков(ФизЛицо,,ДатаНачала);
			
		Для Каждого СтрокаТЗ Из тбРабочиеПериоды Цикл
			Если ОсталосьДнейОтпуска=0 Тогда
				Прервать;
			КонецЕсли;
			
			РабочийПериодНачало=СтрокаТЗ.ПериодС;
			РабочийПериодОкончание=СтрокаТЗ.ПериодПо;
			Полагается=СтрокаТЗ.ПолагаетсяДнейОсн;
			УжеИспользовано=СтрокаТЗ.ИспользованоДнейОсн;
				
			Остаток=Полагается-УжеИспользовано;
			Если Остаток>0 Тогда
				НоваяСтрока = ИспользованиеЕжегодногоОтпуска.Добавить();
				НоваяСтрока.НомерСтрокиРаботникиОрганизации = НомерСтроки;
				НоваяСтрока.РабочийПериодНачало = РабочийПериодНачало;
				НоваяСтрока.РабочийПериодОкончание = РабочийПериодОкончание;
					
				НоваяСтрока.ПолагаетсяДнейОсновного = Полагается; 
				НоваяСтрока.УжеИспользованоДнейОсновного = УжеИспользовано; 
					
				ИспользоватьДней=Мин(ОсталосьДнейОтпуска,Остаток);
				НоваяСтрока.ИспользоватьДнейОсновного = ИспользоватьДней;
				
				ОсталосьДнейОтпуска=ОсталосьДнейОтпуска - ИспользоватьДней;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ОсталосьДнейОтпуска) Тогда
			ОсталосьДнейОтпуска = 0 ;
		КонецЕсли;                   		
		Если ОсталосьДнейОтпуска>0 Тогда
			Сообщить("Не распределилось по рабочим периодам "+ОсталосьДнейОтпуска+" дней отпуска по сотруднику "+ФизЛицо+"! Их необходимо распределить вручную!",СтатусСообщения.Важное);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

мДлинаСуток = 86400;

