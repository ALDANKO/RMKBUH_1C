////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Признак перерасчета сумм НДС с учетом погрешностей округления
Перем мПерерасчетПроизведен;

Перем мПечатнаяФормаПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мСписокВыбораТипПричиныНевыдачиПокупателю;
Перем мСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены;
Перем мСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены;
Перем мСписокВыбораСпецРежимНалогообложения;

// Хранит схему налогообложения текущей организации 
Перем мТекущаяСхемаНалогообложения; 

Перем ИдетПринудительнаяЗапись;
Перем ОшибкаПринудительнойЗаписи;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	Если  ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоНоменклатуреИЦенамКонтрагентов;
	Иначе		
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	// Очистим ТЧ Возвратная тара если договор внешнеэкономический
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	//Очистим документ-основание при необходимости
	Если  ДокументОснование <> Неопределено
		И ДокументОснование.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		
		Если ДокументОснование.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
		     ДокументОснование = Неопределено;
		КонецЕсли;
		 
	КонецЕсли;
	
	Если  Сделка <> Неопределено Тогда
		
		Если Сделка.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
		     Сделка = Неопределено;
		КонецЕсли;
		 
	КонецЕсли;
	
	
	СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;		
	Иначе
		СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	КонецЕсли;	
	
	// перезаполним статьи книги продаж
	Для каждого СтрокаТЧ из Товары Цикл
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "Товары");		
	КонецЦикла;
	Для каждого СтрокаТЧ из Услуги Цикл
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "Услуги");		
	КонецЦикла;
	Для каждого СтрокаТЧ из ОС Цикл
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "ОС");		
	КонецЦикла;	
	Для каждого СтрокаТЧ из НематериальныеАктивы Цикл
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, "НематериальныеАктивы");		
	КонецЦикла;	
	
	ЗаполнитьУсловиеПродажи(); 
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.ФормаРасчетов) Тогда
	    ФормаРасчетов = ДоговорКонтрагента.ФормаРасчетов;  	
		Если Дата >= '2014-03-01' И Дата < '2015-01-01' Тогда
			Если ФормаРасчетов = "Оплата з поточного рахунка" Тогда
				ФормаРасчетов = "Оплата з поточного рахунку";
			КонецЕсли;
		ИначеЕсли Дата >= '2015-01-01' Тогда
			Если ФормаРасчетов = "Оплата з поточного рахунку" Тогда
				ФормаРасчетов = "Оплата з поточного рахунка";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		ФормаРасчетов = "Бартер";  	
	Иначе		
		ФормаРасчетов = "Оплата з поточного рахунку";
		Если глЗначениеПеременной("ДатаВступленияВСилуПриказа1379") <= Дата И Дата < '2014-03-01' ИЛИ Дата >= '2015-01-01' Тогда 
			ФормаРасчетов = "Оплата з поточного рахунка";	
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВидДоговора();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииДоговора()


// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ТекстПредупреждения = "Не выбран документ-основание. Заполнение невозможно.";
	ИначеЕсли ТабличнаяЧасть = Товары И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ТекстПредупреждения = "Заполнять документ на основании документа ""Отчет комитенту о продажах"" необходимо на закладке ""Услуги""!";	
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Очистить табличную часть перед заполнением?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТабличнаяЧасть.Очистить();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		СкопироватьТовары();
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		СкопироватьВозвратнуюТару();
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			СкопироватьУслугуПоКомиссии();
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
  	         И НЕ ДокументОснование.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СкопироватьУслугиКомиссииОтНерезидента();
		Иначе
			СкопироватьУслуги();
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = ОС Тогда
		СкопироватьОС();
	ИначеЕсли ТабличнаяЧасть = НематериальныеАктивы Тогда
		СкопироватьНематериальныеАктивы();
	КонецЕсли;
                  
КонецПроцедуры// ЗаполнитьТабличнуюЧасть()


// заполняет по остаткам регистра НДСПродаж
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамРегистраНДСПРодаж(ТабличнаяЧасть)
	
	Если ЭтоНовый() Тогда
		
		Предупреждение("Заполнить документ можно только после его записи");
		Возврат;
		
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Очистить табличную часть перед заполнением?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТабличнаяЧасть.Очистить();
		КонецЕсли; 
		
	КонецЕсли;
	
	ЗаполнитьПоОстаткам(ТабличнаяЧасть);
	
КонецПроцедуры


// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходПоЦенамНоменклатуры", "По ценам номенклатуры");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()


// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()


// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;
	ЕстьСерия = Ложь;
	Валюта    = ВалютаДокумента;
    ПодбиратьУслуги = Ложь;
	
	Если ТабличнаяЧасть = Товары Тогда

		Команда         	= "ПодборВТабличнуюЧастьТовары";
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ИмяТабличнойЧасти 	= "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда           = "ПодборВТабличнуюЧастьУслуги";
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ИмяТабличнойЧасти = "Услуги";
	    ПодбиратьУслуги = Истина;
                             
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"   , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"         , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные.Документы["НалоговаяНакладная"]);

КонецПроцедуры // ДействиеПодбор()


// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	
	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
				РассчитатьПревышение(СтрокаТабличнойЧасти);
				РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
			КонецЕсли;
	
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
				РассчитатьПревышение(СтрокаТабличнойЧасти);
				РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
			КонецЕсли;

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
			ОбновитьЗначениеЛьготыНДС(СтрокаТабличнойЧасти);
			
			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
				РассчитатьПревышение(СтрокаТабличнойЧасти);
				РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары");

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
 
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара");


		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
			ОбновитьЗначениеЛьготыНДС(СтрокаТабличнойЧасти);
			
			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
				РассчитатьПревышение(СтрокаТабличнойЧасти);
				РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
			КонецЕсли;

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги");
			ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти, Истина);

		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()


// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти)

	// СтавкаНДС прироритетно определеятся видом операции документа
	СписокДопустимыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС();	
	
	Если СписокДопустимыхСтавокНДС.Количество() > 1 Тогда
		Если СписокДопустимыхСтавокНДС.НайтиПоЗначению(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) = Неопределено Тогда 
			// в карточке товара указана недопустимая в данном контексте ставка НДС
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СписокДопустимыхСтавокНДС[0].Значение;
	КонецЕсли;

КонецПроцедуры


// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

Процедура РассчитатьНДСПревышения(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаНДСПревышения = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПревышения,
	                                                   Истина, Ложь,
	                                                   Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры

Процедура РассчитатьПревышение(СтрокаТабличнойЧасти)
	
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		ТекКоличество = 1;		
	Иначе
		ТекКоличество = СтрокаТабличнойЧасти.Количество;		
	КонецЕсли;
	ОбычнаяСтоимость = СтрокаТабличнойЧасти.ЦенаОбычная*ТекКоличество;
	
	СтрокаТабличнойЧасти.СуммаПревышения = Макс(0, ОбычнаяСтоимость  - 
				?(УчитыватьНДС и СуммаВключаетНДС, СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС, СтрокаТабличнойЧасти.Сумма));
				
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОС, ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НематериальныеАктивы,ЭлементыФормы.КоманднаяПанельНематериальныеАктивы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонка СуммаНДС не доступна для редактировани, если включен АвторасчетНДС
	ЭлементыФормы.              Товары.Колонки.СуммаНДС.ТолькоПросмотр = АвторасчетНДС;
	ЭлементыФормы.              Услуги.Колонки.СуммаНДС.ТолькоПросмотр = АвторасчетНДС;
	ЭлементыФормы.                  ОС.Колонки.СуммаНДС.ТолькоПросмотр = АвторасчетНДС;
	ЭлементыФормы.НематериальныеАктивы.Колонки.СуммаНДС.ТолькоПросмотр = АвторасчетНДС;
    	
	// Льготу показываем только для освобожденных операций
	ПоказыватьЛьготу = (    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
						ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации
						ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
						ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации);
	ЭлементыФормы.НадписьЛьготаНДС.Видимость = ПоказыватьЛьготу;
	ЭлементыФормы.ЛьготаНДС.Видимость = ПоказыватьЛьготу;
	ЭлементыФормы.НадписьЛьготаНДСОписание.Видимость = ПоказыватьЛьготу;
	ЭлементыФормы.ЛьготаНДСОписание.Видимость = ПоказыватьЛьготу;
	
	РаботаСДиалогами.ПриВыбореСчета(СчетНДС,ЭлементыФормы.СубконтоКт1, ЭлементыФормы.НадписьСубконтоКт1,
	                       ЭлементыФормы.СубконтоКт2, ЭлементыФормы.НадписьСубконтоКт2,
	                       ЭлементыФормы.СубконтоКт3, ЭлементыФормы.НадписьСубконтоКт3);
	
	ЭлементыФормы.НалоговоеНазначениеДоходовИЗатрат.Видимость			= мТекущаяСхемаНалогообложения.НалогНаПрибыльДо2015 И (ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС);
	ЭлементыФормы.НадписьНалоговоеНазначениеДоходовИЗатрат.Видимость	= мТекущаяСхемаНалогообложения.НалогНаПрибыльДо2015 И (ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС);
						   
	Если ПродажаНижеОбычнойЦены 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки 
	 Тогда
		ЭлементыФормы.НадписьСРасшифровкойСчетаДт.Видимость 	= Истина;
		ЭлементыФормы.НадписьСчетДт.Видимость					= Истина;
		ЭлементыФормы.СчетДт.Видимость							= Истина;
		
		РаботаСДиалогами.ПриВыбореСчета(СчетДт, ЭлементыФормы.СубконтоДт1, ЭлементыФормы.НадписьСубконтоДт1,
		                       ЭлементыФормы.СубконтоДт2, ЭлементыФормы.НадписьСубконтоДт2,
		                       ЭлементыФормы.СубконтоДт3, ЭлементыФормы.НадписьСубконтоДт3);
	Иначе
		//Установим реквизиты счета вычета из доходов невидимыми
		ЭлементыФормы.НадписьСРасшифровкойСчетаДт.Видимость = Ложь;
		ЭлементыФормы.НадписьСчетДт.Видимость				= Ложь;
		ЭлементыФормы.НадписьСубконтоДт1.Видимость			= Ложь;
		ЭлементыФормы.НадписьСубконтоДт2.Видимость			= Ложь;
		ЭлементыФормы.НадписьСубконтоДт3.Видимость			= Ложь;
		ЭлементыФормы.СчетДт.Видимость						= Ложь;
		ЭлементыФормы.СубконтоДт1.Видимость					= Ложь;
		ЭлементыФормы.СубконтоДт2.Видимость					= Ложь;
		ЭлементыФормы.СубконтоДт3.Видимость					= Ложь;
		ЭлементыФормы.НалоговоеНазначениеДоходовИЗатрат.Видимость			= Ложь;
		ЭлементыФормы.НадписьНалоговоеНазначениеДоходовИЗатрат.Видимость	= Ложь;
	КонецЕсли;
						   
	ВидимостьВНДТовары = Истина;
	ВидимостьВНДУслуги = Истина;
	ВидимостьВНДОС 	   = Истина;
	ВидимостьВНДНМА    = Истина;
	ВидимостьСчетУчетаНДСТовары = Истина;
	ВидимостьСчетУчетаНДСОС 	= Истина;
	ВидимостьСчетУчетаНДС 		= Истина;
	
	ЭлементыФормы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
	ЭлементыФормы.ДоговорКонтрагента.КнопкаОчистки 			   = Ложь;
	
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСводнуюПоУсловнойПродаже.Доступность   = Ложь;
	ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСводнуюПоУсловнойПродаже.Доступность   = Ложь;
	
	ЭлементыФормы.Товары.Колонки.ОсновнаяНН.Видимость = Ложь;
	ЭлементыФормы.Услуги.Колонки.ОсновнаяНН.Видимость = Ложь;
	
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки.Доступность = Ложь;
	
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
		
		ЭлементыФормы.Контрагент.Видимость 						= Ложь;
		ЭлементыФормы.Контрагент.Доступность 					= Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость 				= Ложь;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДоговор.Видимость 					= Ложь;
		
		ЭлементыФормы.ДокументОснование.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 		= Ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость = Ложь;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность   = Истина;
		
		ВидимостьВНДТовары = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		
		ЭлементыФормы.Контрагент.Видимость 						= Истина;
		ЭлементыФормы.Контрагент.Доступность 					= Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость 				= Истина;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 				= Истина;
		ЭлементыФормы.НадписьДоговор.Видимость 					= Истина;
		ЭлементыФормы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.ДоговорКонтрагента.ОтметкаНезаполненного     = Ложь;
		ЭлементыФормы.ДоговорКонтрагента.КнопкаОчистки 			= Истина;
		
		ЭлементыФормы.ДокументОснование.Видимость 				= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 		= Ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость  = Ложь;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 			= Ложь;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность 				= Ложь;
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 			= Ложь;
		
		ВидимостьВНДТовары = Ложь;
		ВидимостьВНДУслуги = Ложь;		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
		
		ЭлементыФормы.Контрагент.Видимость 					= Истина;
		ЭлементыФормы.Контрагент.Доступность 				= Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость 			= Истина;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Ложь;
		ЭлементыФормы.НадписьДоговор.Видимость 				= Ложь;
		
		ЭлементыФормы.ДокументОснование.Видимость 			= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 	= Ложь;	
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость  = Истина;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 				= Ложь;
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 				= Ложь;
		ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 					= Ложь;
		ЭлементыФормы.КоманднаяПанельНематериальныеАктивы.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 	= Ложь;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСводнуюПоУсловнойПродаже.Доступность   = Истина;
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСводнуюПоУсловнойПродаже.Доступность   = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		
		ЭлементыФормы.Контрагент.Видимость 					= Истина;
		ЭлементыФормы.Контрагент.Доступность 				= Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость 			= Истина;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Ложь;
		ЭлементыФормы.НадписьДоговор.Видимость 				= Ложь;
		
		ЭлементыФормы.ДокументОснование.Видимость 			= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 	= Ложь;	
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость  = Истина;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность 					= Ложь;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 				= Ложь;
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 				= Ложь;
		ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 					= Ложь;
		ЭлементыФормы.КоманднаяПанельНематериальныеАктивы.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 	= Ложь;
		
		ВидимостьВНДТовары = Ложь;
		ВидимостьВНДОС 	   = Ложь;
		ВидимостьВНДНМА    = Ложь;
		ВидимостьСчетУчетаНДСТовары = Ложь;
		ВидимостьСчетУчетаНДСОС 	= Ложь;
		ВидимостьСчетУчетаНДС 		= Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		
		ЭлементыФормы.Контрагент.Видимость 					= Истина;
		ЭлементыФормы.Контрагент.Доступность				= Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость 			= Истина;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;
		ЭлементыФормы.НадписьДоговор.Видимость 				= Истина;
		
		ЭлементыФормы.ДокументОснование.Видимость 			= Истина;
		ЭлементыФормы.НадписьДокументОснование.Видимость 	= Истина;			
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость  = Ложь;
		
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		
		ЭлементыФормы.Контрагент.Видимость 					= Ложь;
		ЭлементыФормы.Контрагент.Доступность 				= Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость 			= Ложь;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Ложь;
		ЭлементыФормы.НадписьДоговор.Видимость 				= Ложь;
		
		ЭлементыФормы.ДокументОснование.Видимость 			= Ложь;
		ЭлементыФормы.НадписьДокументОснование.Видимость 	= Ложь;	
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость  = Истина;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность 					= Ложь;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 				= Ложь;
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 				= Ложь;
		ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 					= Ложь;
		ЭлементыФормы.КоманднаяПанельНематериальныеАктивы.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 	= Ложь;
		
		ЭлементыФормы.Товары.Колонки.ОсновнаяНН.Видимость = Истина;
		ЭлементыФормы.Услуги.Колонки.ОсновнаяНН.Видимость = Истина;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки.Доступность = Истина;
		
	
	Иначе
		
		ЭлементыФормы.Контрагент.Видимость 					= Истина;
		ЭлементыФормы.Контрагент.Доступность				= Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость 			= Истина;
		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;
		ЭлементыФормы.НадписьДоговор.Видимость 				= Истина;
		
		ЭлементыФормы.ДокументОснование.Видимость 			= Истина;
		ЭлементыФормы.НадписьДокументОснование.Видимость 	= Истина;			
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОС.Видимость  	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.НематериальныеАктивы.Видимость  = Истина;
		
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 				= Истина;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоОстаткам.Доступность 					= Истина;
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 				= Истина;
		ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 					= Истина;
		ЭлементыФормы.КоманднаяПанельНематериальныеАктивы.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоДокументуОснованию.Доступность 	= Истина;
		
	КонецЕсли;	
	
	ЭлементыФормы.СчетУчетаНДС.Видимость 		= ВидимостьСчетУчетаНДС;
	ЭлементыФормы.НадписьСчетУчетаНДС.Видимость = ВидимостьСчетУчетаНДС;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Товары.Колонки.НалоговоеНазначение, ВидимостьВНДТовары);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Услуги.Колонки.НалоговоеНазначение, ВидимостьВНДУслуги);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.ОС.Колонки.НалоговоеНазначение, 	  ВидимостьВНДОС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.НематериальныеАктивы.Колонки.НалоговоеНазначение, ВидимостьВНДНМА);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Товары.Колонки.СчетУчетаНДС, 			  ВидимостьСчетУчетаНДСТовары И ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Товары));
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.ОС.Колонки.СчетУчетаНДС, 	  			  ВидимостьСчетУчетаНДСОС И ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(ОС));
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Услуги.Колонки.СчетУчетаНДС, 	  	      		ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Услуги));
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.НематериальныеАктивы.Колонки.СчетУчетаНДС, 	ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(НематериальныеАктивы));
	
	// Тары по внешнеэкономическому договору нет.
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = (ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета);

	// Реквизиты, которые касаются обычной цены
	
	СводнаяПродажаНижеОбычнойЦены = (ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки);
	ЭлементыФормы.ПродажаНижеОбычнойЦены.Видимость = Не СводнаяПродажаНижеОбычнойЦены;
	ЭлементыФормы.ТипПричиныНевыдачиПокупателю.Доступность = НЕ СводнаяПродажаНижеОбычнойЦены;
	
	ЭлементыФормы.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены.Видимость 			= ПродажаНижеОбычнойЦены;
	ЭлементыФормы.НадписьТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены.Видимость 	= ПродажаНижеОбычнойЦены;
	ЭлементыФормы.НадписьТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Видимость 	= ПродажаНижеОбычнойЦены И Дата >= '2015-01-01';
	ЭлементыФормы.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Видимость 			= ПродажаНижеОбычнойЦены И Дата >= '2015-01-01';
	ЭлементыФормы.РасшифровкаТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Видимость= ПродажаНижеОбычнойЦены И Дата >= '2015-01-01';
	
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Товары.Колонки.ЦенаОбычная					, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Товары.Колонки.СуммаПревышения				, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Товары.Колонки.СуммаНДСПревышения				, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	                                                                                       	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Услуги.Колонки.ЦенаОбычная					, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Услуги.Колонки.СуммаПревышения				, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Услуги.Колонки.СуммаНДСПревышения				, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	                                                                                       	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.ОС.Колонки.ЦенаОбычная						, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.ОС.Колонки.СуммаПревышения					, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.ОС.Колонки.СуммаНДСПревышения					, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.НематериальныеАктивы.Колонки.ЦенаОбычная		, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.НематериальныеАктивы.Колонки.СуммаПревышения	, ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.НематериальныеАктивы.Колонки.СуммаНДСПревышения,ПродажаНижеОбычнойЦены ИЛИ СводнаяПродажаНижеОбычнойЦены);
	
	ЭлементыФормы.НомерГТД.Доступность = ПодтверждаетсяГТД;
	
	ЭлементыФормы.УточняемыйПериод.Видимость = ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.НадписьУточняемыйПериод.Видимость = ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.НомерДляРеестра.Видимость 		= ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.НадписьНомерДляРеестра.Видимость 	= ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.ДатаДляРеестра.Видимость 			= ВключаетсяВУточняющийРасчет;
	ЭлементыФормы.НадписьДатаДляРеестра.Видимость 	= ВключаетсяВУточняющийРасчет;
	
	ЭлементыФормы.УслугиНерезидентаДляНехозДеят.Видимость = (ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента) И Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа1307");
	
	ЭлементыФормы.Сводная.Видимость =   (Дата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа1307")) 
									  И (    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации
									  	 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
										 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
										 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
										 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС);
	
	ЭлементыФормы.Сводная.Доступность = НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки;
	
	ЭлементыФормы.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = НЕ (ТипПричиныНевыдачиПокупателю = 0) И (Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа10"));
	
	ЭлементыФормы.Товары.Колонки.НомерГТД.Видимость               = (Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа10"));
	ЭлементыФормы.ОС.Колонки.НомерГТД.Видимость 	              = (Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа10"));
	ЭлементыФормы.НематериальныеАктивы.Колонки.НомерГТД.Видимость = (Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа10"));
	
	ЭлементыФормы.ПоставкаДипПредставительству.Видимость = (Дата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа957")) И (ТипПричиныНевыдачиПокупателю <= 2) И (Дата < глЗначениеПеременной("ДатаВступленияВСилуПриказа1307"));
	
	ЭлементыФормы.ЭлектронныйДокумент.Доступность = (Дата < '2015-01-01');
	Если Дата >= '2015-01-01' Тогда
		ЭлементыФормы.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.Товары.Колонки.КодСХДеятельности.Видимость = (СпецРежимНалогообложения = 2);
	
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()
	
	// Покажем цветом, что суммы еще могут изменится - пересчитаться при проведении/записи
	Если (АвторасчетНДС) И (НЕ мПерерасчетПроизведен) Тогда
		Если Модифицированность Тогда
			ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки;
		Иначе
			ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли; 
	Иначе	
		ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли; 

	// При изменении данных обновим суммы в подвале.
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		
		ВсегоНДС = Товары.Итог("СуммаНДСПревышения") + Услуги.Итог("СуммаНДСПревышения") + ОС.Итог("СуммаНДСПревышения") + НематериальныеАктивы.Итог("СуммаНДСПревышения");
		// суммы превышения всегда без НДС
		Всего    = Товары.Итог("СуммаПревышения") + Услуги.Итог("СуммаПревышения") + ОС.Итог("СуммаПревышения") + НематериальныеАктивы.Итог("СуммаПревышения");
		Если СуммаВключаетНДС Тогда
			Всего = Всего + ВсегоНДС;	
		КонецЕсли;
		
		ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(Всего);
		ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(ВсегоНДС);
		
	Иначе
		ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги")+Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС")+Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "НематериальныеАктивы"));
		ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС")+Услуги.Итог("СуммаНДС")+ОС.Итог("СуммаНДС")+НематериальныеАктивы.Итог("СуммаНДС"));
	КонецЕсли;

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если АвторасчетНДС Тогда
		ВременнаяСтрока = ВременнаяСтрока + НСтр("ru=' Автоматический расчет НДС.';uk=' Автоматичний розрахунок ПДВ.'");
	КонецЕсли;
	
	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		// Покажем цветом, что суммы еще могут изменится - пересчитаться при проведении/записи
		Если (АвторасчетНДС) И (НЕ мПерерасчетПроизведен) Тогда
			Если Модифицированность Тогда
				ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки;
			Иначе
				ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
			КонецЕсли; 
		Иначе	
			ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли; 
	КонецЕсли;


КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если мНеОткрыватьФормуДокумента Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		// открываем основную форму налоговой, ту, в которой стоит галочка "Продажа ниже обычной цены"
		Отказ = Истина;
		
		Предупреждение(НСтр("ru = 'Данная налоговая накладная является служебной! Будет открыта основная налоговая накладная, с установленным флагом ""Продажа ниже обычной цены"".'; uk = 'Обрана податкова накладна є службовою! Буде відкрита основна податкова накладна з встановленим прапорцем ""Продаж нижче звичайної ціни"".'"));
		
		ФормаОсновнойНалоговой = ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.ПолучитьФорму("ФормаДокумента");		
	    ФормаОсновнойНалоговой.Открыть();
		
		Возврат;
	КонецЕсли;
	
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;

	Если ЭтоНовый() Тогда 

		Если НЕ ЗначениеЗаполнено(ПараметрОснование) И НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ПараметрОснование) Тогда
			Если НЕ ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеОбособленноеПодразделениеОрганизации");	
				Если НЕ ОбособленноеПодразделение.Владелец = Организация Тогда
					ОбособленноеПодразделение = Неопределено;				
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;		
				
		КтоВыписалНалоговуюНакладную = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалНалоговуюНакладную");
			
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		УчитыватьНДС = Истина;
		
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
			СчетДт  = ПланыСчетов.Хозрасчетный.ВычетыИзДохода;
			НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
			
			Если СчетУчетаНДС.Пустая() Тогда
				Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации 
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
					СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
					СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;		
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
					СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;	
				ИначеЕсли НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
					СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
					СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
				КонецЕсли;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
                СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
			КонецЕсли;	
			
			УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
			
			Если Дата > '2015-01-01' Тогда
				ЭлектронныйДокумент = Истина;
				ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЕсли;
	

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
  	// Установить ограничение - изменять Видимость колонок для таличной части 
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);
	
	СтруктураКолонок.Вставить("ОсновноеСредство");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОС.Колонки, СтруктураКолонок);

	СтруктураКолонок.Вставить("НематериальныйАктив");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.НематериальныеАктивы.Колонки, СтруктураКолонок);


	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.Товары.Колонки);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мТекущаяСхемаНалогообложения = НалоговыйУчет.ПолучитьСхемуНалогообложения(Дата,Организация);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
 
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара  .Заголовок = "Тара ("   + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	СтраницаПанели.ОС.Заголовок     = "Основные средства (" + ДокументОбъект.ОС.Количество() + " поз.)";
	СтраницаПанели.НематериальныеАктивы.Заголовок = "Нематериальные активы (" + ДокументОбъект.НематериальныеАктивы.Количество() + " поз.)";
	
	Если ЭлементыФормы.НадписьСРасшифровкойСчета.Заголовок <> СчетНДС.Наименование Тогда
		ЭлементыФормы.НадписьСРасшифровкойСчета.Заголовок = СчетНДС.Наименование;
	КонецЕсли;

	Если ЭлементыФормы.НадписьСРасшифровкойСчетаДт.Заголовок <> СчетДт.Наименование Тогда
		ЭлементыФормы.НадписьСРасшифровкойСчетаДт.Заголовок = СчетДт.Наименование;
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаТипПричиныНевыдачиПокупателю.Заголовок = "";
	ТекТипПричины = мСписокВыбораТипПричиныНевыдачиПокупателю.НайтиПоЗначению(ТипПричиныНевыдачиПокупателю);
	Если НЕ ТекТипПричины = Неопределено Тогда
		ЭлементыФормы.РасшифровкаТипПричиныНевыдачиПокупателю.Заголовок = ТекТипПричины.Представление;		
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Заголовок = "";
	ТекТипПричины = мСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.НайтиПоЗначению(ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены);
	Если НЕ ТекТипПричины = Неопределено Тогда
		ЭлементыФормы.РасшифровкаТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Заголовок = ТекТипПричины.Представление;		
	Иначе	
		ЭлементыФормы.РасшифровкаТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Заголовок = "Оберіть тип причини!";
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаСпецРежимНалогообложения.Заголовок = "";
	ТекСпецРежим = мСписокВыбораСпецРежимНалогообложения.НайтиПоЗначению(СпецРежимНалогообложения);
	Если НЕ ТекСпецРежим = Неопределено Тогда
		ЭлементыФормы.РасшифровкаСпецРежимНалогообложения.Заголовок = ТекСпецРежим.Представление;		
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()


// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()


// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная[Кнопка.Имя] Тогда
			//изменения операции не произошло
			Возврат
		КонецЕсли;
		ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная[Кнопка.Имя];
	КонецЕсли;
	
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОснование = 0;
		КонецЕсли;
		
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		  
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОснование = 0;
		КонецЕсли;
		
		ВалютаДокумента = мВалютаРегламентированногоУчета;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		
		СобственныйКонтрагент = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Организация);
		Если НЕ ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
			Предупреждение("Для организации """+Организация.Наименование+""" не задан собственный контрагент!");
		КонецЕсли;	

		Если Контрагент <> СобственныйКонтрагент Тогда
			Контрагент = СобственныйКонтрагент;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОснование = 0;
		КонецЕсли;
		
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		Сводная 			   = Истина;
		ПродажаНижеОбычнойЦены = Ложь;
		ВалютаДокумента 		= мВалютаРегламентированногоУчета;
		КратностьВзаиморасчетов = 1;
		КурсВзаиморасчетов 		= 1;
		Контрагент = Неопределено;
		ДоговорКонтрагента = Неопределено;
		ДокументОснование = Неопределено;
		Сделка = Неопределено;
		
	КонецЕсли;
	
	// Очистим при необходимости документ-основание
	Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		Если НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		   И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		 	ДокументОснование = Неопределено;
		КонецЕсли;
	Иначе		
		Если  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		  ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		 	ДокументОснование = Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого СтрокаТабличнойЧасти из Товары Цикл
		ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "Товары");		
		Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
			РассчитатьПревышение(СтрокаТабличнойЧасти);
			РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти из Услуги Цикл
		ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "Услуги");		
		Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
			РассчитатьПревышение(СтрокаТабличнойЧасти);
			РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти из ОС Цикл
		//необходимо перезаполнить ставки НДС в табличных частях
		СписокНовыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС();	
		Если СписокНовыхСтавокНДС.Количество() > 1 Тогда
			НоваяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтавкаНДС = СписокНовыхСтавокНДС[0].Значение;
		КонецЕсли;
		СтрокаТабличнойЧасти.СтавкаНДС = НоваяСтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "ОС");		
		Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
			РассчитатьПревышение(СтрокаТабличнойЧасти);
			РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
 	
	Для каждого СтрокаТабличнойЧасти из НематериальныеАктивы Цикл
		//необходимо перезаполнить ставки НДС в табличных частях
		СписокНовыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС();	
		Если СписокНовыхСтавокНДС.Количество() > 1 Тогда
			НоваяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтавкаНДС = СписокНовыхСтавокНДС[0].Значение;
		КонецЕсли;
		СтрокаТабличнойЧасти.СтавкаНДС = НоваяСтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "НематериальныеАктивы");		
		Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
			РассчитатьПревышение(СтрокаТабличнойЧасти);
			РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
		КонецЕсли;

	КонецЦикла;
	
	Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
	Иначе
		СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	КонецЕсли;	
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	ОбновитьЗначениеЛьготыНДС();
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
	
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

Процедура ОсновныеДействияФормыВыгрузитьВXML(Кнопка)
	
	//Запишем документ
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда//,НСтр("ru='Для выгрзки';uk='Для вивантаження'")) Тогда
		Возврат;
	КонецЕсли;
	
	// найдем регл. отчет для выгрузки в XML                 
	ОтчетЭкспортXML = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетНалоговаяНакладная");
    Если ОтчетЭкспортXML = Неопределено Тогда
		Сообщить(НСтр("ru='Не удалось открыть регламентированный отчет ""Налоговая накладная""! Отчет не найден!';uk='Не вдалося відкрити регламентований  звіт ""Податкова накладна""! Звіт не знайдено!'"), СтатусСообщения.Важное);
		Сообщить(НСтр("ru = 'Выгрузка не выполнена!'; uk = 'Вивантаження не виконане!'"));
		Возврат;
	КонецЕсли;
	
	ОсновнаяФорма = ОтчетЭкспортXML.ПолучитьФорму("ОсновнаяФорма");
	ОсновнаяФорма.мДатаКонцаПериодаОтчета  = КонецМесяца(Дата);
	ОсновнаяФорма.мДатаНачалаПериодаОтчета = НачалоМесяца(ОсновнаяФорма.мДатаКонцаПериодаОтчета);
	
	// ОсновнаяФорма.ВыборФормыПоУмолчанию(Дата);
	ДатаВыбораФормыВыгрузки = Дата;
	Если РабочаяДата >= глЗначениеПеременной("ДатаВступленияВСилуПриказа1307") Тогда	
		
		// начиная с 04.2016 выгрузка в ЕРНН должна осуществляется по форме НА ДАТУ РЕГИСТРАЦИИ??!!
		// проверим соответствующую настройку (возможно данное положение со временем будет отменено)
		ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь;
		УчетнаяПолитикаРегл	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(РабочаяДата, Организация);
		Если УчетнаяПолитикаРегл <> Неопределено Тогда
			ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = УчетнаяПолитикаРегл.ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
		КонецЕсли;
		
		Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь Тогда
			ДатаВыбораФормыВыгрузки = РабочаяДата;
		КонецЕсли;
		
	КонецЕсли;	
	ОсновнаяФорма.ВыборФормыПоУмолчанию(ДатаВыбораФормыВыгрузки);
	
	ФормаОтчетаЭкспортXML = ОтчетЭкспортXML.ПолучитьФорму(ОсновнаяФорма.мВыбраннаяФорма,,Новый УникальныйИдентификатор);
	
	ФормаОтчетаЭкспортXML.Организация 	  		   = Организация;
	ФормаОтчетаЭкспортXML.Периодичность 	  	   = Перечисления.Периодичность.Месяц;
	ФормаОтчетаЭкспортXML.НалоговыйДокумент 	   = Ссылка;
	ФормаОтчетаЭкспортXML.мДатаНачалаПериодаОтчета = ОсновнаяФорма.мДатаНачалаПериодаОтчета;
	ФормаОтчетаЭкспортXML.мДатаКонцаПериодаОтчета  = ОсновнаяФорма.мДатаКонцаПериодаОтчета;
	
	ФормаОтчетаЭкспортXML.РежимВыбора = Ложь;
	ФормаОтчетаЭкспортXML.ДатаПодписи = РабочаяДата;
	
	ФормаОтчетаЭкспортXML.мВыбраннаяФорма  = ОсновнаяФорма.мВыбраннаяФорма;
	
	ФормаОтчетаЭкспортXML.Открыть();
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(ФормаОтчетаЭкспортXML);
	
	ФормаОтчетаЭкспортXML.Модифицированность = Истина;
	ФормаОтчетаЭкспортXML.ЗаполнитьИзДокументаИсточника();
	
КонецПроцедуры

//Процедура - обработчик нажатия на кнопку "Выгрузить в "1С:Звіт""
//
Процедура ОсновныеДействияФормыВыгрузитьВЗвит1С(Кнопка)
	
	//Запишем документ
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда//,НСтр("ru='Для выгрзки';uk='Для вивантаження'")) Тогда
		Возврат;
	КонецЕсли;
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования 1С:Звіт, в случае если менеджер не инициализирован
	Если Не глПодключитьМенеджерЗвит1С() Тогда
		Возврат;
	КонецЕсли;
	
	глМенеджерЗвит1С.ВыгрузитьДокумент(Ссылка, ЭтаФорма);
	
	Если Дата > '2015-01-01' 
		И ПродажаНижеОбычнойЦены
		И ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
		глМенеджерЗвит1С.ВыгрузитьДокумент(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены, ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткамРегистраНДСПРодаж(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()


// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоДокументуОснованию(Кнопка)

	ЗаполнитьТабличнуюЧасть(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()


// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
    СтруктураНеРедактируемыхРеквизитов = Новый Структура();
	
	Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
	  Тогда
	  
		СтруктураРеквизитовДокумента.Удалить("КратностьВзаиморасчетов");
		СтруктураРеквизитовДокумента.Удалить("КурсВзаиморасчетов");
		
		СтруктураНеРедактируемыхРеквизитов.Вставить("ВалютаДокумента");
		
	КонецЕсли; 
	
	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,СтруктураНеРедактируемыхРеквизитов , "Товары");
												
    Если СтруктураЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
										
	Если СтруктураЗначений <> Неопределено Тогда
		
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		СтруктураЗначений.Вставить("НовыйУчитыватьНДС", Истина);
		
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, Неопределено, СтруктураЗначений, ,Новый Структура("ОС, НематериальныеАктивы"));
		
		//Для ТЧ ОС и Нематериальные активы обработаем отдельно
		СтруктураЗначений.ПерезаполнитьЦеныПоТипу = Ложь;
		
		// при пересчете в связи с появлением реквизитов цена и количество для частичной оплаты, необходимо заполнить эти реквизиты для всех строк
		// после пересчета мы очистим реквизиты частичной оплаты, если количество = 1;
		Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
			Если СтрокаТабличнойЧасти.Количество = 0 Тогда
				СтрокаТабличнойЧасти.Количество = 1;
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма;
			КонецЕсли;	
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из НематериальныеАктивы Цикл
			Если СтрокаТабличнойЧасти.Количество = 0 Тогда
				СтрокаТабличнойЧасти.Количество = 1;
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма;
			КонецЕсли;	
		КонецЦикла;
		
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, Неопределено, СтруктураРеквизитовДокумента, , "ОС, НематериальныеАктивы", мВалютаРегламентированногоУчета, Неопределено, СтруктураЗначений, , Новый Структура("Товары, ВозвратнаяТара, Услуги"));
		Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
			
			Если СтрокаТабличнойЧасти.Количество = 1 Тогда
				СтрокаТабличнойЧасти.Количество = 0;
				СтрокаТабличнойЧасти.Цена 		= 0;
			КонецЕсли;	
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
				РассчитатьПревышение(СтрокаТабличнойЧасти);
				РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из НематериальныеАктивы Цикл
			
			Если СтрокаТабличнойЧасти.Количество = 1 Тогда
				СтрокаТабличнойЧасти.Количество = 0;
				СтрокаТабличнойЧасти.Цена 		= 0;
			КонецЕсли;	
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда	
				РассчитатьПревышение(СтрокаТабличнойЧасти);
				РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
				РассчитатьПревышение(СтрокаТабличнойЧасти);
				РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;		
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
				РассчитатьПревышение(СтрокаТабличнойЧасти);
				РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;		
		
	КонецЕсли;

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары              , ЭтотОбъект, ПогрешностиОкругления,  "Товары");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги              , ЭтотОбъект, ПогрешностиОкругления,  "Услуги");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(ОС                  , ЭтотОбъект, ПогрешностиОкругления,  "ОС");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(НематериальныеАктивы, ЭтотОбъект, ПогрешностиОкругления,  "НематериальныеАктивы");
		// Установим признак перерасчета сумм НДС
		мПерерасчетПроизведен = ИСТИНА;
	КонецЕсли;
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();

	УстановитьВидимость();
	ОбновитьПодвал();	

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()


// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара" и выборе соответствующего подменю, 
// вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоОстаткам(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткамРегистраНДСПродаж(ВозвратнаяТара);

КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоДокументуОснованию(Кнопка)
	
	ЗаполнитьТабличнуюЧасть(ВозвратнаяТара);

КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоДокументуОснованию(Кнопка)

	ЗаполнитьТабличнуюЧасть(Услуги);

КонецПроцедуры  // КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя


// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()


Процедура КоманднаяПанельОСЗаполнитьПоДокументуОснованию(Кнопка)
	
	ЗаполнитьТабличнуюЧасть(ОС);

КонецПроцедуры

Процедура КоманднаяПанельНематериальныеАктивыЗаполнитьПоДокументуОснованию(Кнопка)
	
	ЗаполнитьТабличнуюЧасть(НематериальныеАктивы);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мТекущаяСхемаНалогообложения = НалоговыйУчет.ПолучитьСхемуНалогообложения(Дата,Организация);
	УстановитьВидимость();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбособленноеПодразделение = "";

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
	 ИЛИ  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		
		СобственныйКонтрагент = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Организация);
		Если НЕ ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
			Предупреждение("Для организации """+Организация.Наименование+""" не задан собственный контрагент!");
		КонецЕсли;	
		
		Если Контрагент <> СобственныйКонтрагент Тогда
			Контрагент = СобственныйКонтрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	мТекущаяСхемаНалогообложения = НалоговыйУчет.ПолучитьСхемуНалогообложения(Дата,Организация);
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОбособленноеПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);
КонецПроцедуры

Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	Если ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
	   И ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		// Выполняем общие действия для всех документов при изменении Контрагент.
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

		// Могли поменять договор.
		ПриИзмененииДоговора();
	
	КонецЕсли; 
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();

КонецПроцедуры // КонтрагентПриИзменении()


// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
		                                        Неопределено, СтандартнаяОбработка);
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()


// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()


Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Возврат;
	КонецЕсли;
	
	СтруктОтбора = Новый Структура();
	СтруктОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
    СтруктОтбора.Вставить("Организация", Организация);
	
	ОграничениеТипов = Новый Массив();
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
	
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"));
		
	Иначе
		
		Для каждого ТипРеквизита Из ЭлементыФормы.ДокументОснование.ТипЗначения.Типы() Цикл
		
			Если ТипРеквизита = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			 ИЛИ ТипРеквизита = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда	
				Продолжить;
			Иначе
				ОграничениеТипов.Добавить(ТипРеквизита);
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, ЭлементыФормы.ДокументОснование, 
	                   							СтандартнаяОбработка, СтруктОтбора, "", ОграничениеТипов);
    
КонецПроцедуры

Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ЗаполнитьУсловиеПродажи();
	
КонецПроцедуры

Процедура ФормаРасчетовНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	// Подготовим список для выбора из часто встречающихся вариантов заполнения этого реквизита
	ФормыОплаты = Новый СписокЗначений();
	ФормыОплаты.Добавить("Готівка");
	Если глЗначениеПеременной("ДатаВступленияВСилуПриказа1379") <= Дата И Дата < '2014-03-01' ИЛИ Дата >= '2015-01-01' Тогда
		ФормыОплаты.Добавить("Оплата з поточного рахунка");
	Иначе
	    ФормыОплаты.Добавить("Оплата з поточного рахунку");
	КонецЕсли;
	ФормыОплаты.Добавить("Бартер");
	ФормыОплаты.Добавить("Чек");
		
	Элемент.СписокВыбора = ФормыОплаты;
	
КонецПроцедуры

Процедура СчетНДСПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчета(СчетНДС,ЭлементыФормы.СубконтоКт1, ЭлементыФормы.НадписьСубконтоКт1,
	                       ЭлементыФормы.СубконтоКт2, ЭлементыФормы.НадписьСубконтоКт2,
	                       ЭлементыФормы.СубконтоКт3, ЭлементыФормы.НадписьСубконтоКт3);
	
КонецПроцедуры

Процедура СчетНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь)
	
КонецПроцедуры

Процедура СчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СчетДтПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчета(СчетДт, ЭлементыФормы.СубконтоДт1, ЭлементыФормы.НадписьСубконтоДт1,
	                       ЭлементыФормы.СубконтоДт2, ЭлементыФормы.НадписьСубконтоДт2,
	                       ЭлементыФормы.СубконтоДт3, ЭлементыФормы.НадписьСубконтоДт3);
	
КонецПроцедуры

Процедура СчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетДтНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь)
	
КонецПроцедуры


Процедура ПродажаНижеОбычнойЦеныПриИзменении(Элемент)
	
	УстановитьВидимость();
	Если НЕ ПродажаНижеОбычнойЦены Тогда
		ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены = "";
		ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = 0;
	КонецЕсли; 
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
	
	Если Дата >= '2015-01-01' Тогда
		
		ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = 15;
		
		Если ОС.Количество() > 0 или НематериальныеАктивы.Количество() > 0 Тогда	
			
			ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = 16;		
			
		КонецЕсли;
		
		УстановитьТекстДополнения();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Дата < '2015-01-01' Тогда
		Элемент.СписокВыбора = Новый СписокЗначений();
		НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
		
		// добавим если нужно постфикс
		КодСпецРежима = ?(ЗначениеЗаполнено(СпецРежимНалогообложения), "" + СпецРежимНалогообложения, " "); //или пробел или одна цифра
		НомерФилиала  = ?(ЗначениеЗаполнено(ОбособленноеПодразделение.Префикс), Прав("0000" + СокрЛП(ОбособленноеПодразделение.Префикс), 4), "");  //число, сведущими нулями, 4 символа 
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			НомерДокумента	= НомерДокумента + "/" + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
		
		Элемент.СписокВыбора.Добавить("(перевищення звичайної ціни над фактичною за товарами,  послугами, указаними  в  податковій  накладній №"+ НомерДокумента +")");
		Элемент.СписокВыбора.Добавить("(перевищення звичайної ціни над фактичною за товарами,  послугами, указаними  в  податковій  накладній №"+ НомерДокумента +"; сума процентів нарахованих або таких, що мають бути нараховані на суму номіналу процентного векселя)");
		Элемент.СписокВыбора.Добавить("(звичайна ціна за товарами, послугами, указаними  в  податковій  накладній №"+ НомерДокумента +")");
	Иначе
		
		Элемент.СписокВыбора = Новый СписокЗначений();
		Элемент.СписокВыбора.Добавить(мСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены[0].Представление);
		
	КонецЕсли;
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//


// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
											
	РаботаСДиалогами.ПоказатьКоэффициентМест(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	РаботаСДиалогами.ПоказатьСуммуБезСкидок(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.НомерГТД) Тогда
		ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст("" + ДанныеСтроки.НомерГТД +  " від " + Формат(ДанныеСтроки.НомерГТД.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки);
	
	// выведем также код с/х деятельности
	Если ЗначениеЗаполнено(ДанныеСтроки.КодУКТВЭД) 
		И СпецРежимНалогообложения = 2 Тогда
		ОформлениеСтроки.Ячейки.КодСХДеятельности.УстановитьТекст(ДанныеСтроки.КодУКТВЭД.КодСХДеятельности);
	КонецЕсли;
											
КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
	ОбновитьЗначениеЛьготыНДС(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары");
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		
	
	ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда			
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		
	
	ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()
 
// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		


КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		


КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		


КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
 	Если ПродажаНижеОбычнойЦены Тогда
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		

КонецПроцедуры

Процедура ТоварыСтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ОпределитьДопустимыеСтавкиНДС();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "Товары");
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		


КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ПродажаНижеОбычнойЦены Тогда
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		
	
КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "Начало выбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

Процедура ТоварыСтатьяКнигиПродажНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);

КонецПроцедуры

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

Процедура ТоварыПроцентАвтоматическихСкидокПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены Тогда
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		

КонецПроцедуры

Процедура ТоварыЦенаОбычнаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	РассчитатьПревышение(СтрокаТабличнойЧасти);
	РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура ТоварыСуммаПревышенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, ,мВалютаРегламентированногоУчета); 

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара");

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.Текст = ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков.Наименование;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ВозвратнаяТара.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ


Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
											
	
	ОформлениеСтроки.Ячейки.Единица.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Единица.Текст = ДанныеСтроки.Номенклатура.БазоваяЕдиницаИзмерения;
	
	ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	// НДС
	ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
	ОбновитьЗначениеЛьготыНДС(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ЗаполнитьУКТВЭДВСтрокеТоваров(СтрокаТабличнойЧасти, Истина);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти , ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти , ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти , ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры // УслугиЦенаПриИзменении()

Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены Тогда
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры// УслугиСуммаПриИзменении()

Процедура УслугиСтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ОпределитьДопустимыеСтавкиНДС();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
    ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "Услуги");
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		
	
КонецПроцедуры // УслугиСтавкаНДСПриИзменении()


// Процедура - обработчик события "Начало выбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

Процедура УслугиСтатьяКнигиПродажНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);


КонецПроцедуры

Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока)
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;	
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

Процедура УслугиЦенаОбычнаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	РассчитатьПревышение(СтрокаТабличнойЧасти);
	РассчитатьНДСПревышения(СтрокаТабличнойЧасти);

КонецПроцедуры

Процедура УслугиСуммаПревышенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	РассчитатьНДСПревышения(СтрокаТабличнойЧасти);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОС

// *Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
											
	Если ЗначениеЗаполнено(ДанныеСтроки.НомерГТД) Тогда
		ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст("" + ДанныеСтроки.НомерГТД +  " від " + Формат(ДанныеСтроки.НомерГТД.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // ОСПриВыводеСтроки()

// *Процедура при изменении ОС в табличной части
//
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;

	//Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
	//	СтрокаТабличнойЧасти.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	//КонецЕсли;

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		
	
КонецПроцедуры

Процедура ОССтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ОпределитьДопустимыеСтавкиНДС();
	
КонецПроцедуры

// *При изменении ставки НДС табличной части ОС
//
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "ОС");
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры

// *При изменении суммы в табличной части ОС
//
Процедура ОССуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	// при изменении суммы считаем, что цена ОС если и задана - то не меняется, то есть пересчитываем количество (для частичной поставки)
	ПриИзмененииЦеныНА(ЭлементыФормы.ОС);
	
КонецПроцедуры // ОССуммаПриИзменении

Процедура ОССтатьяКнигиПродажНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);

КонецПроцедуры

Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока)
	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

Процедура ОСЦенаОбычнаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;
	
	РассчитатьПревышение(СтрокаТабличнойЧасти);
	РассчитатьНДСПревышения(СтрокаТабличнойЧасти);

КонецПроцедуры

Процедура ОССуммаПревышенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;
	
	РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ НематериальныеАктивы

Процедура НематериальныеАктивыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТЧ = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

Процедура НематериальныеАктивыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
											
	Если ЗначениеЗаполнено(ДанныеСтроки.НомерГТД) Тогда
		ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст("" + ДанныеСтроки.НомерГТД +  " від " + Формат(ДанныеСтроки.НомерГТД.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры

Процедура НематериальныеАктивыНематериальныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;

	//Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
	//	СтрокаТабличнойЧасти.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	//КонецЕсли;

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;		
	
КонецПроцедуры

Процедура НематериальныеАктивыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда		
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	// при изменении суммы считаем, что цена ОС если и задана - то не меняется, то есть пересчитываем количество (для частичной поставки)
	ПриИзмененииЦеныНА(ЭлементыФормы.НематериальныеАктивы);
	
КонецПроцедуры // НематериальныеАктивыСуммаПриИзменении

Процедура НематериальныеАктивыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "НематериальныеАктивы");
	
	Если ПродажаНижеОбычнойЦены ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда	
		РассчитатьПревышение(СтрокаТабличнойЧасти);
		РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры

Процедура НематериальныеАктивыСтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ОпределитьДопустимыеСтавкиНДС();
	
КонецПроцедуры

Процедура НематериальныеАктивыСтатьяКнигиПродажНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);

КонецПроцедуры

Процедура НематериальныеАктивыЦенаОбычнаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	
	РассчитатьПревышение(СтрокаТабличнойЧасти);
	РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура НематериальныеАктивыСуммаПревышенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НематериальныеАктивы.ТекущиеДанные;
	
	РассчитатьНДСПревышения(СтрокаТабличнойЧасти);

КонецПроцедуры

Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

Процедура ПодтверждаетсяГТДПриИзменении(Элемент)
	
	Если НЕ ПодтверждаетсяГТД Тогда
		
		НомерГТД = "";	
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Возврат;
	КонецЕсли;

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			СписокТипов.Добавить(Метаданные.Документы["ЗаказПоставщику"].Имя, Метаданные.Документы["ЗаказПоставщику"].Представление());

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			СписокТипов.Добавить(Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());

		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			СписокТипов.Добавить(Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			СписокТипов.Добавить(Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Если СписокТипов.Количество() = 1 Тогда
		ТипДокументаСделки = СписокТипов[0].Значение;
	Иначе
		// Пользователь выбирает тип расчетного документа
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ТипДокументаСделки = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);

	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	ФормаВыбора.Открыть();
	
КонецПроцедуры // СделкаНачалоВыбора()

Процедура СделкаПриИзменении(Элемент)
	
	ЗаполнитьУсловиеПродажи();

КонецПроцедуры

// Процедура - обработик нажатия на любую из дополнительных кнопок по заполнению ТЧ
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

Процедура ТипПричиныНевыдачиПокупателюНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ВыбратьИзСписка(мСписокВыбораТипПричиныНевыдачиПокупателю, Элемент, мСписокВыбораТипПричиныНевыдачиПокупателю.НайтиПоЗначению(Элемент.Значение));
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.Значение = Результат.Значение;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СпецРежимНалогообложенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ВыбратьИзСписка(мСписокВыбораСпецРежимНалогообложения, Элемент, мСписокВыбораСпецРежимНалогообложения.НайтиПоЗначению(Элемент.Значение));
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.Значение = Результат.Значение;
	
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);
	
КонецПроцедуры


Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(ЭтотОбъект);
	УстановитьВидимость();
КонецПроцедуры

Процедура ВключаетсяВУточняющийРасчетПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ОСНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ОСНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ОСНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура НематериальныеАктивыНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура НематериальныеАктивыНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура НематериальныеАктивыНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура НалоговоеНазначениеДоходовИЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура НалоговоеНазначениеДоходовИЗатратАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура НалоговоеНазначениеДоходовИЗатратОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

Процедура ВидДоговораНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ВидыДоговоровПоГК.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Справочники.ВидыДоговоровПоГК.НайтиПоНаименованию(ВидДоговора, Истина);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТипПричиныНевыдачиПокупателюПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ТипПричиныНевыдачиПокупателюОчистка(Элемент, СтандартнаяОбработка)
	УстановитьВидимость();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если  РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ПродажаНижеОбычнойЦены Тогда
		
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если    Дата >='2015-01-01'
			ИЛИ (  Дата <'2015-01-01'
			     И УчетнаяПолитикаНеЗадана = Ложь
				 И (УчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхНакладныхПоОбычнымЦенам = Истина))
			Тогда
			// необходимо записать документ перед проведением - иначе возникают проблемы с нумерацией последующих документов
			// в случае, если при проведении возникнут ошибки и проведение будет отменено (но при этом будет создан еще один документ для номера накладной "ЗЦ")
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			ПодключитьОбработчикОжидания("ПовторнаяЗаписьДокументаСПроведением", 0.3, Истина);
			ИдетПринудительнаяЗапись = Истина;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПовторнаяЗаписьДокументаСПроведением()
	
	Попытка
		Записать(РежимЗаписиДокумента.Проведение);		
		ОшибкаПринудительнойЗаписи = Ложь;
	Исключение
		Предупреждение(Нстр("ru='Операция не выполнена!';uk='Операція не виконана!'"));	
		ОшибкаПринудительнойЗаписи = Истина;
	КонецПопытки;
	ИдетПринудительнаяЗапись = Ложь;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ИдетПринудительнаяЗапись = Истина Тогда
		ОтключитьОбработчикОжидания("ПовторнаяЗаписьДокументаСПроведением");
		ПовторнаяЗаписьДокументаСПроведением();
		Если ОшибкаПринудительнойЗаписи = Истина Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



// Процедура дает возможность выбора Кода УКТ ВЭД и НОмера ГТД как из всех возможных вариантов
// так и из подчиненного к номенклатуре справочника, содержащие возможные значения по умолчанию
// для номенклатуры
Процедура НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, ИмяТабличногоПоля = "Товары")
	
	Если ИмяТабличногоПоля <> "Товары" Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаТоваров = ЭлементыФормы[ИмяТабличногоПоля].ТекущиеДанные;
	Если ТекущаяСтрокаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   "Выбрать по данным номенклатуры");
	ВариантыВыбора.Добавить(Истина, "Произвольный выбор");
	
	РезультатВыбора = ВыбратьИзСписка(ВариантыВыбора, Элемент, 0);
	
    Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = РезультатВыбора.Значение;
	
	Если СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	ФормаВыбора = Справочники.НоменклатураГТД.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.ПараметрВыборПоВладельцу = ТекущаяСтрокаТоваров.Номенклатура;
	ФормаВыбора.ПараметрОтборПоВладельцу = ТекущаяСтрокаТоваров.Номенклатура;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаТоваров.КодУКТВЭД);
	Запрос.УстановитьПараметр("НомерГТД",  ТекущаяСтрокаТоваров.НомерГТД);
	Запрос.УстановитьПараметр("Владелец",  ФормаВыбора.ПараметрВыборПоВладельцу);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД = &КодУКТВЭД
	               |	И НоменклатураГТД.НомерГТД = &НомерГТД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // НачалоВыбораНоменклатурыГТД

Процедура КодУКТВЭДОбработкаВыбора(ИмяТабличногоПоля, Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаДанных = ЭлементыФормы[ИмяТабличногоПоля].ТекущиеДанные;
		Если НЕ ТекущаяСтрокаДанных = Неопределено Тогда
			ТекущаяСтрокаДанных.КодУКТВЭД = ВыбранноеЗначение.КодУКТВЭД;
		КонецЕсли;

		ВыбранноеЗначение = ВыбранноеЗначение.КодУКТВЭД;	
		
	КонецЕсли;
	
КонецПроцедуры // КодУКТВЭДОбработкаВыбора

Процедура НомерГТДОбработкаВыбора(ИмяТабличногоПоля, Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаДанных = ЭлементыФормы[ИмяТабличногоПоля].ТекущиеДанные;
		Если НЕ ТекущаяСтрокаДанных = Неопределено Тогда
			ТекущаяСтрокаДанных.НомерГТД = ВыбранноеЗначение.НомерГТД;
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.НомерГТД;	
		
	КонецЕсли;
	
КонецПроцедуры // НомерГТДОбработкаВыбора

Процедура ТоварыКодУКТВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура ТоварыКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КодУКТВЭДОбработкаВыбора("Товары", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

Процедура ТоварыНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НомерГТДОбработкаВыбора("Товары", Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры

Процедура НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрокаУслуг = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрокаУслуг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаУслуг.Номенклатура) Тогда
		Возврат; // стандартный выбор
	КонецЕсли; 
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать по данным номенклатуры';uk='Вибрати по даним номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Произвольный выбор';uk='Довільний вибір'"));
	
	РезультатВыбора = ВыбратьИзСписка(ВариантыВыбора, Элемент, 0);
	
    Если РезультатВыбора = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = РезультатВыбора.Значение;
	
	Если СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	ФормаВыбора = Справочники.НоменклатураГТД.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.ПараметрВыборПоВладельцу = ТекущаяСтрокаУслуг.Номенклатура;
	ФормаВыбора.ПараметрОтборПоВладельцу = ТекущаяСтрокаУслуг.Номенклатура;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаУслуг.КодУКТВЭД);
	Запрос.УстановитьПараметр("Владелец", ФормаВыбора.ПараметрВыборПоВладельцу);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД = &КодУКТВЭД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура УслугиКодУКТВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура УслугиКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КодУКТВЭДОбработкаВыбора("Услуги", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОСКодУКТВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, "ОС");
КонецПроцедуры

Процедура ОСКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КодУКТВЭДОбработкаВыбора("ОС", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОСНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, "ОС");
КонецПроцедуры

Процедура ОСНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НомерГТДОбработкаВыбора("ОС", Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры

Процедура НематериальныеАктивыКодУКТВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, "НематериальныеАктивы");
КонецПроцедуры

Процедура НематериальныеАктивыКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КодУКТВЭДОбработкаВыбора("НематериальныеАктивы", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

Процедура НематериальныеАктивыНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка, "НематериальныеАктивы");
КонецПроцедуры

Процедура НематериальныеАктивыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НомерГТДОбработкаВыбора("НематериальныеАктивы", Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры


Процедура ПриИзмененииКоличестваНА(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Количество <= 0 Тогда
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.Цена		 = 0;
	ИначеЕсли ТекущаяСтрока.Количество > 1 Тогда
		ТекущаяСтрока.Количество = 1;	
		ТекущаяСтрока.Цена 		 = ТекущаяСтрока.Сумма;	
	Иначе
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКоличестваНА

Процедура ПриИзмененииЦеныНА(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Цена <= 0 Тогда
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.Цена		 = 0;
	ИначеЕсли ТекущаяСтрока.Цена < ТекущаяСтрока.Сумма Тогда
		ТекущаяСтрока.Цена 		 = ТекущаяСтрока.Сумма;	
		ТекущаяСтрока.Количество = 1;	
	Иначе
		ТекущаяСтрока.Количество = ТекущаяСтрока.Сумма / ТекущаяСтрока.Цена;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЦеныНА

Процедура ОСКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличестваНА(ЭлементыФормы.ОС);	
КонецПроцедуры // ОСКоличествоПриИзменении

Процедура ОСКоличествоОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииКоличестваНА(ЭлементыФормы.ОС);	
КонецПроцедуры // ОСКоличествоОчистка

Процедура ОСЦенаПриИзменении(Элемент)
	ПриИзмененииЦеныНА(ЭлементыФормы.ОС);	
КонецПроцедуры // ОСЦенаПриИзменении

Процедура ОСЦенаОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииЦеныНА(ЭлементыФормы.ОС);	
КонецПроцедуры // ОСЦенаОчистка

Процедура НематериальныеАктивыКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличестваНА(ЭлементыФормы.НематериальныеАктивы);	
КонецПроцедуры // НематериальныеАктивыКоличествоПриИзменении

Процедура НематериальныеАктивыКоличествоОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииКоличестваНА(ЭлементыФормы.НематериальныеАктивы);	
КонецПроцедуры // НематериальныеАктивыКоличествоОчистка

Процедура НематериальныеАктивыЦенаПриИзменении(Элемент)
	ПриИзмененииЦеныНА(ЭлементыФормы.НематериальныеАктивы);	
КонецПроцедуры // НематериальныеАктивыЦенаПриИзменении

Процедура НематериальныеАктивыЦенаОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииЦеныНА(ЭлементыФормы.НематериальныеАктивы);	
КонецПроцедуры // НематериальныеАктивыЦенаОчистка


Процедура ДействияФормыДействиеПеренестиТоварыПоНДС7ВОтдельнуюНакладную(Кнопка)
	
	НоваяНакладная = ВыделитьСтавкуНДС7ВОтдельныйДокумент();
	
	Если НЕ НоваяНакладная = Неопределено Тогда
		Форма7 = НоваяНакладная.ПолучитьФорму("ФормаДокумента",, Новый УникальныйИдентификатор);	
		Форма7.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦеныОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦеныНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ВыбратьИзСписка(мСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены, Элемент, мСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.НайтиПоЗначению(Элемент.Значение));
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.Значение = Результат.Значение;
	УстановитьТекстДополнения();
	
КонецПроцедуры

Процедура ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦеныПриИзменении(Элемент)
	
	УстановитьТекстДополнения();
	
КонецПроцедуры

Процедура УстановитьТекстДополнения()

	ПодходящееЗначение = мСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены.НайтиПоЗначению(ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены);	
	Если НЕ ПодходящееЗначение = Неопределено Тогда
		ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены = ПодходящееЗначение.Представление;	
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельТоварыЗаполнитьСводнуюПоУсловнойПродаже(Кнопка)
	Предупреждение(НСтр("ru = 'Заполнение сводной налоговой накладной по условной продаже необходимо осуществлять на закладке ""Услуги""!'"));
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьСводнуюПоУсловнойПродаже

Процедура КоманднаяПанельУслугиЗаполнитьСводнуюПоУсловнойПродаже(Кнопка)
	
	Если Услуги.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Услуги.Очистить();
		КонецЕсли; 
		
	КонецЕсли;
	
	ТипПричиныНевыдачиПокупателю = 9;
	АвторасчетНДС = Ложь;
	
	ЗаполнитьСводнуюУсловнуюПродажу();
	
	Сводная = Истина;
	
КонецПроцедуры // КоманднаяПанельУслугиЗаполнитьСводнуюПоУсловнойПродаже

Процедура ВывестиВидКода(ДанныеСтроки, ОформлениеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.КодУКТВЭД) Тогда
		ОформлениеСтроки.Ячейки.ВидКода.УстановитьТекст(ДанныеСтроки.КодУКТВЭД.Вид);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки(Кнопка)
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить(НСтр("ru = 'Необходимо указать тип цен базы на вкладке ""Цены и валюта...""!'; uk = 'Необхідно вказати тип цін бази на вкладці ""Ціни і валюта...""!'"));	
		Возврат;	
	КонецЕсли; 
	
	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Товары.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки("Товары");
	
КонецПроцедуры

Процедура КоманднаяПанельУслугиЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки(Кнопка)
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить(НСтр("ru = 'Необходимо указать тип цен базы на вкладке ""Цены и валюта...""!'; uk = 'Необхідно вказати тип цін бази на вкладці ""Ціни і валюта...""!'"));	
		Возврат;	
	КонецЕсли; 
	
	Если Услуги.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Услуги.Очистить(); 
		
	КонецЕсли;
	
	ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки("Услуги");
	
КонецПроцедуры

//***AL Start
Процедура ЗаполнитьСвод(Элемент)
	Расходные.Очистить();
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ
                   |    РеализацияТоваровУслуг.Ссылка КАК ДокРН
                   |ИЗ
                   |    Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
                   |ГДЕ
                   |    РеализацияТоваровУслуг.Контрагент = &Контрагент
                   |    И РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
                   |    И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента"; 

	Запрос.УстановитьПараметр("Контрагент", Контрагент.Ссылка); 
    Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента.Ссылка); 
    Запрос.УстановитьПараметр("НачДата",НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",КонецМесяца(Дата));
	
	
	Результат = Запрос.Выполнить(); 
	Выборка = Результат.Выбрать(); 
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ДокРН.Проведен = Истина  Тогда
		 ЭлементыФормы.ТабличноеПолеРН.ДобавитьСтроку();
		 СтрокаПоля = ЭлементыФормы.ТабличноеПолеРН.ТекущаяСтрока;
		 СтрокаПоля.Документ = Выборка.ДокРН;
		 СтрокаПоля.Учитывать = 1;
		КонецЕсли;
    КонецЦикла; 
    
	Возвраты.Очистить();
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                   |    ВозвратТоваровОтПокупателяТовары.Ссылка КАК ДокВН
                   |ИЗ
                   |    Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
                   |ГДЕ
                   |    ВозвратТоваровОтПокупателяТовары.Ссылка.Дата >= &НачДата
                   |    И ВозвратТоваровОтПокупателяТовары.Ссылка.Дата <= &КонДата
                   |    И ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент = &Контрагент
                   |    И ВозвратТоваровОтПокупателяТовары.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
                   |    И ВозвратТоваровОтПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
                   |    И ВозвратТоваровОтПокупателяТовары.ДокументПартии.Дата >= &НачДата
                   |    И ВозвратТоваровОтПокупателяТовары.ДокументПартии.Дата <= &КонДата
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    ВозвратТоваровОтПокупателяТовары.Ссылка.Дата,
                   |    ВозвратТоваровОтПокупателяТовары.Ссылка.Номер"; 

	Запрос.УстановитьПараметр("Контрагент", Контрагент.Ссылка); 
    Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента.Ссылка); 
    Запрос.УстановитьПараметр("НачДата",НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",КонецДня(Дата));
	Результат = Запрос.Выполнить(); 
	Выборка = Результат.Выбрать(); 
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ДокВН.Проведен = Истина Тогда
         СтрокаПоляВН = ЭтотОбъект.Возвраты.Добавить();
         //СтрокаПоляВН = ЭлементыФормы.ТабличноеПолеВН.ТекущаяСтрока;
		 СтрокаПоляВН.Документ  = Выборка.ДокВН;
		 СтрокаПоляВН.Учитывать = 1;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура ВыгрузитьНоменклатуруНажатие(Элемент)
	Товары.Очистить();
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура");
    ТЗ.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Коэффициент");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
    ТЗ.Колонки.Добавить("ЦенаСвертки");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СчетУчетаНДС");
	ТЗ.Колонки.Добавить("СуммаБезСкидки");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Всего=0;
	Для Каждого ТекСтр Из Расходные Цикл
		Если ТекСтр.Учитывать=Истина Тогда
		 	Документ = ТекСтр.Документ;
			Для Каждого СтрДок Из Документ.Товары Цикл
				  Строка = ТЗ.Добавить();
				  Строка.Номенклатура = СтрДок.Номенклатура;
                  Строка.ХарактеристикаНоменклатуры= СтрДок.ХарактеристикаНоменклатуры;
				  Строка.ЕдиницаИзмерения = СтрДок.ЕдиницаИзмерения;
				  Строка.Коэффициент = СтрДок.Коэффициент;
				  Строка.Количество  = СтрДок.Количество;
                  Если СтрДок.ПроцентАвтоматическихСкидок<>0 ИЛИ СтрДок.ПроцентСкидкиНаценки<>0 тогда 
                        Строка.Цена        = ?(Документ.СуммаВключаетНДС,Окр(СтрДок.Сумма/СтрДок.Количество,2,1),Окр((СтрДок.Сумма+СтрДок.СуммаНДС)/СтрДок.Количество,2,1));
                        //***AL
                        Строка.ЦенаСвертки = Окр(?(Документ.СуммаВключаетНДС,Строка.Цена,Окр((СтрДок.Сумма+СтрДок.СуммаНДС)/СтрДок.Количество,2,1)),0,1);
                    Иначе
                        Строка.Цена        = ?(Документ.СуммаВключаетНДС,СтрДок.Цена,Окр((СтрДок.Сумма+СтрДок.СуммаНДС)/СтрДок.Количество,2,1));
                        //***AL
                        Строка.ЦенаСвертки = Окр(?(Документ.СуммаВключаетНДС,СтрДок.Цена,Окр((СтрДок.Сумма+СтрДок.СуммаНДС)/СтрДок.Количество,2,1)),0,1);
                  Конецесли;
                  Строка.Сумма       = ?(Документ.СуммаВключаетНДС,СтрДок.Сумма,СтрДок.Сумма+СтрДок.СуммаНДС);
				  Строка.СтавкаНДС   = СтрДок.СтавкаНДС;
				  Строка.СуммаНДС    = СтрДок.СуммаНДС;
				  
				  Всего=Всего+СтрДок.Сумма;
			КонецЦикла;
		КонецЕсли;
    КонецЦикла;
    
    Для Каждого ТекСтр Из Возвраты Цикл
		Если ТекСтр.Учитывать=Истина Тогда
		 	Документ = ТекСтр.Документ;
			Для Каждого СтрДок Из Документ.Товары Цикл
                Если СтрДок.ДокументПартии.Дата>=НачалоМесяца(ЭтотОбъект.Дата) И
                      СтрДок.ДокументПартии.Дата<=КонецМесяца(ЭтотОбъект.Дата) тогда
                  Строка = ТЗ.Добавить();
                  Строка.Номенклатура = СтрДок.Номенклатура;
                  Строка.ХарактеристикаНоменклатуры= СтрДок.ХарактеристикаНоменклатуры;
				  Строка.ЕдиницаИзмерения = СтрДок.ЕдиницаИзмерения;
				  Строка.Коэффициент = СтрДок.Коэффициент;				  
				  Строка.Количество  = -СтрДок.Количество;
				  Строка.Цена        = Окр(?(Документ.СуммаВключаетНДС,СтрДок.Сумма,СтрДок.Сумма+СтрДок.СуммаНДС)/СтрДок.Количество,2,1);
                  Строка.ЦенаСвертки = Окр(?(Документ.СуммаВключаетНДС,СтрДок.Цена,Окр((СтрДок.Сумма+СтрДок.СуммаНДС)/СтрДок.Количество,2,1)),0,1);
				  Строка.Сумма       = -?(Документ.СуммаВключаетНДС,СтрДок.Сумма,СтрДок.Сумма+СтрДок.СуммаНДС);
				  Строка.СтавкаНДС   = СтрДок.СтавкаНДС;
				  Строка.СуммаНДС    = -СтрДок.СуммаНДС;
                КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
    
	//Сообщить(Всего);
	 тз.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,ЦенаСвертки,СтавкаНДС","Сумма,Количество,СуммаНДС");
	 тз.Сортировать("Номенклатура");
     Для Каждого СтрТз из Тз Цикл
         Если СтрТз.Количество<>0 тогда
             ЭлементыФормы.Товары.ДобавитьСтроку();
             СтрокаПоля = ЭлементыФормы.Товары.ТекущаяСтрока;
             СтрокаПоля.Номенклатура = СтрТз.Номенклатура;
             СтрокаПоля.ХарактеристикаНоменклатуры= СтрТз.ХарактеристикаНоменклатуры;
             СтрокаПоля.ЕдиницаИзмерения = СтрТз.ЕдиницаИзмерения;
             СтрокаПоля.Коэффициент = СтрТз.Коэффициент;
             //СтрокаПоля.Цена = СтрТз.Цена;  *** AL
             СтрокаПоля.Цена = ?(СтрТз.Количество=0,0,СтрТз.Сумма/СтрТз.Количество);
             СтрокаПоля.СтавкаНДС = СтрТз.СтавкаНДС;
             СтрокаПоля.Сумма = ?(ЭтотОбъект.СуммаВключаетНДС,СтрТз.Сумма,СтрТз.Сумма-СтрТз.СуммаНДС);
             СтрокаПоля.Количество = СтрТз.Количество;
             СтрокаПоля.СуммаНДС = СтрТз.СуммаНДС;
             СтрокаПоля.СтатьяКнигиПродаж  = Справочники.СтатьиНалоговыхДеклараций.НайтиПоКоду("00001");
             СтрокаПоля.НалоговоеНазначение= Справочники.НалоговыеНазначенияАктивовИЗатрат.НайтиПоКоду("000027");
         КонецЕсли;    
	 КонецЦикла;
КонецПроцедуры
//***AL End

Процедура ВозвратыПередУдалением(Элемент, Отказ)
    Отказ=Истина;
КонецПроцедуры

Процедура ВозвратыПередНачаломДобавления(Элемент, Отказ, Копирование)
    Отказ=Истина;
КонецПроцедуры


// Признак перерасчета сумм НДС с учетом ошибок округления
мПерерасчетПроизведен = ЛОЖЬ;

мСписокВыбораТипПричиныНевыдачиПокупателю = Новый СписокЗначений();
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(0, " - Податкова накладна видається покупцю");
// этот код указывается автоматически при печати налоговой накладной на превышение обычной цены над обычной
//мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(1, "01-Виписана на суму перевищення звичайної ціни над фактичною");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(1, "01-Складена на суму збільшення компенсації вартості поставлених товарів/послуг (для податкових накладних, особливості заповнення яких викладені в пункті 13 цього Порядку)");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(2, "02-Постачання неплатнику податку");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(3, "03-Натуральна виплата в рахунок оплати праці фізичним особам");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(4, "04-Постачання у межах балансу для невиробничого використання");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(5, "05-Ліквідація основних фондів за самостійним рішенням платника податку");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(6, "06-Переведення основних фондів до складу невиробничих");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(7, "07-Експортні постачання");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(8, "08-Постачання для операцій, які не є об'єктом оподаткування податком на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(9, "09-Постачання для операцій, які звільнені від оподаткування податком на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(10, "10-Визнання умовного постачання товарних залишків та/або основних фондів, що перебувають 
													   	|в обліку платника податку на день анулювання його реєстрації як платника податку на додану вартість,
													  	|щодо яких був нарахований податковий кредит у минулих або поточному податкових періодах
														|при анулюванні реєстрації платника податку на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(11, "11-Виписана за щоденними підсумками операцій"); 
// этот код указывается автоматически при печати налоговой накладной на превышение обычной цены над обычной
//мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(12, "12-Виписана на вартість безоплатно поставлених товарів/послуг, обчислену виходячи з рівня звичайних цін"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(12, "12-Складена на постачання неплатнику, в якій зазначається назва покупця (для податкових накладних, особливості заповнення яких викладені в пункті 10 цього Порядку)");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(13, "13-Використання виробничих або невиробничих засобів, інших товарів/послуг не у господарській діяльності"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(14, "14-Виписана покупцем (отримувачем) послуг від нерезидента"); 

мСписокВыбораСпецРежимНалогообложения = НалоговыйУчет.ПолучитьСписокВыбораСпецРежимНалогообложения();

мСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = Новый СписокЗначений();
//мСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Добавить(1,  "01-Виписана на суму перевищення звичайної ціни над фактичною");
//мСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Добавить(12, "12-Виписана на вартість безоплатно поставлених товарів/послуг, обчислену виходячи з рівня звичайних цін"); 
мСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Добавить(15, "15-Складена на суму перевищення бази оподаткування, визначеної відповідно до статей 188 і 189 Податкового кодексу України, над фактичною ціною постачання"); 

мСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены = Новый СписокЗначений();
//мСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены.Добавить(1,   "(перевищення звичайної ціни над фактичною за товарами, послугами, указаними  в  податковій  накладній № <визначається автоматично>)");
//мСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены.Добавить("1_1","(перевищення звичайної ціни над фактичною за товарами, послугами, указаними  в  податковій  накладній № <визначається автоматично>; сума процентів нарахованих або таких, що мають бути нараховані на суму номіналу процентного векселя)");
//мСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены.Добавить(12,  "(звичайна ціна за товарами, послугами, указаними  в  податковій  накладній № <визначається автоматично>)");
мСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены.Добавить(15,  " (перевищення бази оподаткування, визначеної відповідно до статей 188 і 189 Податкового кодексу України, над фактичною ціною постачання)");
