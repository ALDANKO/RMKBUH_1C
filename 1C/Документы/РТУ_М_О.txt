Перем ПутьФайлаСкрипта Экспорт;
Перем ФайлСкрипта Экспорт;
//***//
Перем мУдалятьДвижения Экспорт;

Перем мИспользоватьТару Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОткрыватьФормаЗаполненияПоЗаказу Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мЕстьКолонкаСерии Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;

Перем мИспользоватьРасширеннуюАналитику Экспорт;
Перем мДатаНачалаИспользованияРасширеннойАналитики Экспорт;

Перем мРеквизитыЗаполненныеПоОснованию Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(СуммыВРублях = Ложь) Экспорт
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	Организация,
	|	Организация КАК Поставщик,
	//***|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ПредставительОрганизации КАК Выписал,
	|	ДоверенностьПолучил КАК ПредставительПокупателя,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
  	|	ПредставительОрганизации КАК ПредставительПоставщика
 	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки 			КАК НомерСтрокиТЧ,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	Номенклатура.Код     	КАК Код,
	|	Номенклатура.Артикул 	КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	NULL КАК Характеристика,
	|	NULL КАК Серия
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	ЗапросТовары = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку Акта
	
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,, БанковскийСчетОрганизации, КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
	РуководителиКонтрагента = ФормированиеПечатныхФорм.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			=  РуководителиОрганизации.Руководитель;
	
	Директор_КА=ФункцииОбщегоНазначения.НайтиРуководителяКонтрагентов(Шапка.Покупатель);
	//*** 15-06-2015 Набойченко...
	Если ЗначениеЗаполнено(Директор_КА) тогда
		ОбластьМакета.Параметры.РуководительПокупателя 			= Директор_КА.Наименование;
	Иначе
	   ОбластьМакета.Параметры.РуководительПокупателя 			= Шапка.ПредставительПокупателя;
	КонецЕсли;
	//РуководителиКонтрагента.РуководительПредставление;//*** 15-06-2015 Набойченко...
	
    //*** ОбластьМакета.Параметры.РуководительПокупателя 			= Шапка.ПредставительПокупателя;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПокупателя 			= РуководителиКонтрагента.РуководительПредставление;

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='АКТ сдачи-приемки работ (оказания услуг)';uk='АКТ здачі-прийняття робіт (надання послуг)'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим табличную часть
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") > 0;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
			
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;

	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) И НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			Скидка = 0;
		Иначе

			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка - ВыборкаСтрокТовары.АвтоматическаяСкидка) * (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка);
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Выводим Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= Сумма + ?(Шапка.СуммаВключаетНДС, 	   0, СуммаНДС);
	СуммаКПрописиБезНДС = Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 		 0);
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";												 											 
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	// выводим подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
								
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	
	//ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	//***
	//ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);

	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
	//***161027
	Если ЗначениеЗаполнено(Руководители.ФинДиректорФИО) Тогда
		ОбластьМакета.Параметры.ФИОФиндир  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ФинДиректорФИО.Фамилия, Руководители.ФинДиректорФИО.Имя, Руководители.ФинДиректорФИО.Отчество, Истина);// Кратко
	КонецЕсли;
	//****161203
	//Если ЗначениеЗаполнено(Руководители.ЗамГлавБухФИО) Тогда
	//	ОбластьМакета.Параметры.ФИОЗамБух  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ЗамГлавБухФИО.Фамилия, Руководители.ЗамГлавБухФИО.Имя, Руководители.ЗамГлавБухФИО.Отчество, Истина);// Кратко
	//КонецЕсли;//***161027
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

//// Функция осуществляет запуск обработки формирующей печатную форму 1-ТН - ТТН
////
//// Параметры
////  Нет.
////
//// Возвращаемое значение:
////  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
////                   документ формирутеся вызываемой обработкой.
////
Функция ПечатьТТН() Экспорт
	//ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	//
	//ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	//ОбработкаПечати.ПунктРазгрузки = АдресДоставки;
	//
	//ОбработкаПечати.Открыть();
	ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	
	//ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	//ОбработкаПечати.ПунктРазгрузки = АдресДоставки; 
	//***
	ОбработкаПечати.Документ                = ЭтотОбъект.Ссылка;
	ОбработкаПечати.ПунктРазгрузки          = АдресДоставки;
	ОбработкаПечати.МаркаИГосНомерАвтомобиля= ЭтотОбъект.Автомобиль;
	ОбработкаПечати.ГосНомерПрицепа			= СокрЛП(ЭтотОбъект.Прицеп);
    ОбработкаПечати.Водитель                = ЭтотОбъект.Водитель;
	ОбработкаПечати.Открыть();
КонецФункции // ПечатьТТН()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли; 
		
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг(Ложь);
	ИначеЕсли ИмяМакета = "Декларация" Тогда
		ТабДокумент = ПечатьДекларации();
    ИначеЕсли ИмяМакета = "ДекларацияПроизводителя" Тогда
		ТабДокумент = ПечатьДекларацииПроизводителя();
	ИначеЕсли ИмяМакета = "НакладнаяРасходная" Тогда
		ТабДокумент = ПечатьСпецНакладной();
	ИначеЕсли ИмяМакета = "НакладнаяСоСкидкой" Тогда	
		ТабДокумент = ПечатьДокументаСоСкидкой();
	ИначеЕсли ИмяМакета = "ТранспортнаяНакладная" Тогда
		ТабДокумент = ПечатьТН();
	ИначеЕсли ИмяМакета = "ТранспортнаяНакладнаяТара" Тогда
		ТабДокумент = ПечатьТНТара();		
	ИначеЕсли ИмяМакета = "ТранспортнаяНакладнаяМЕТРО" Тогда
		ТабДокумент = ПечатьТНМЕТРО();
    ИначеЕсли ИмяМакета = "ТранспортнаяНакладнаяАмстор" Тогда
        ТабДокумент = ПечатьТНАмстор();
	ИначеЕсли ИмяМакета ="ТранспортнаяНакладнаяОмега"   Тогда
         ТабДокумент = ТранспортнаяНакладнаяОмега();	
	ИначеЕсли ИмяМакета = "ТоварнаяНакладнаяМЕТРО" Тогда
		ТабДокумент = ТоварнаяНакладнаяМЕТРО();
	ИначеЕсли ИмяМакета = "НакладнаяФОЗЗИ" Тогда
		ТабДокумент = ПечатьФоззи();
	ИначеЕсли ИмяМакета = "НакладнаяАШАН" Тогда
		ТабДокумент = ПечатьАШАН();
	ИначеЕсли ИмяМакета = "НакладнаяОмега" Тогда
		ТабДокумент = ПечатьОмега();
    ИначеЕсли ИмяМакета = "НакладнаяАмстор" Тогда
         ТабДокумент = НакладнаяАмстор();
	ИначеЕсли ИмяМакета = "НакладнаяАдвентис" Тогда
		ТабДокумент = ПечатьАдвентис();
	ИначеЕсли ИмяМакета = "НакладнаяБилла" Тогда		
		ТабДокумент = НакладнаяБилла();
    ИначеЕсли ИмяМакета = "НакладнаяДЖУНА" Тогда
         ТабДокумент = НакладнаяДЖУНА();		
	ИначеЕсли ИмяМакета = "Качественное" Тогда
		ТабДокумент = ПечатьКачественногоСвидетельства();				
	ИначеЕсли ИмяМакета = "1Т" или ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда
		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	ИначеЕсли ИмяМакета = "ПечатьРеестраДокументов" Тогда
		ТабДокумент =ПечатьРеестраДокументов();
    ИначеЕсли ИмяМакета = "ЗаявкаАмстор" Тогда
		ТабДокумент =ПечатьЗаявкаАмстор();	
	ИначеЕсли ИмяМакета = "Инвойс" ТОгда
		ТабДокумент = ПечатьИнвойс();
	ИначеЕсли ИмяМакета = "СпецификацияКриворотько" ТОгда
		ТабДокумент = ПечатьСпецификацияКриворотько();
	ИначеЕсли ИмяМакета = "ПроформаНаТару" 	Тогда
		ТабДокумент = ПечатьПроформаНаТаруТаможня();
	ИначеЕсли ИмяМакета = "ДекларацияБезопасности" 	Тогда		
		ТабДокумент = ПечатьДекларацияБезопасности();
	ИначеЕсли ИмяМакета = "АктРоялти" 	Тогда			
		ТабДокумент = ПечатьАктаРоялти();	
	ИначеЕсли ИмяМакета = "АктМКИ" 	Тогда			
		ТабДокумент = ПечатьАктаМКИ();	
	Иначе
		//Формы Накладная печатаются из модуля менеджера
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		ИменаМакетов = ИмяМакета;
		Если НЕ ПустаяСтрока(ИмяМакета) Тогда
			Для Итератор = 1 По КоличествоЭкземпляров - 1 Цикл
				ИменаМакетов = ИменаМакетов + "," + Сред(ИмяМакета, 1, Найти(ИмяМакета + ",", ",") - 1);
			КонецЦикла;
		КонецЕсли;
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.РеализацияТоваровУслуг", ИменаМакетов, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РеализацияТоваровУслуг", ИменаМакетов, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить("Накладная",    	"Расходная накладная");
	СтруктПечатныхФорм.Вставить("ТранспортнаяНакладная",   "Транспортная накладная");	
	СтруктПечатныхФорм.Вставить("ТранспортнаяНакладнаяТара","Транспортная накладная на тару");
	СтруктПечатныхФорм.Вставить("_1Т",             "1-Т (Товарно-транспортная накладная)");
	СтруктПечатныхФорм.Вставить("Декларация",      "Декларация");	
    СтруктПечатныхФорм.Вставить("ДекларацияПроизводителя","Декларация производителя");	
	СтруктПечатныхФорм.Вставить("НакладнаяРасходная",   "Расходная накладная (без упаковки)");	
	СтруктПечатныхФорм.Вставить("ТранспортнаяНакладнаяМЕТРО",   "Транспортная накладная МЕТРО");	
	СтруктПечатныхФорм.Вставить("ТоварнаяНакладнаяМЕТРО",   "Товарная накладная МЕТРО");		
    СтруктПечатныхФорм.Вставить("ТранспортнаяНакладнаяАмстор",  "Транспортная накладная АМСТОР");	    
	СтруктПечатныхФорм.Вставить("ТранспортнаяНакладнаяОмега",  "Транспортная накладная ОМЕГА");	    
	СтруктПечатныхФорм.Вставить("НакладнаяФОЗЗИ"	,   "Накладная ФОЗЗИ-ФОРА");		
    СтруктПечатныхФорм.Вставить("НакладнаяОмега"    ,   "Накладная Омега-Восторг");
	СтруктПечатныхФорм.Вставить("НакладнаяАШАН"		,   "Накладная АШАН");		
    СтруктПечатныхФорм.Вставить("НакладнаяАмстор"   ,   "Накладная АМСТОР");		    
    СтруктПечатныхФорм.Вставить("НакладнаяАдвентис"	,   "Накладная АДВЕНТИС");		
	СтруктПечатныхФорм.Вставить("НакладнаяБилла"	,   "Накладная БИЛЛА");		
	СтруктПечатныхФорм.Вставить("НакладнаяДЖУНА"	,	"Накладная ДЖУНА");	
	СтруктПечатныхФорм.Вставить("Качественное" 	,	"Качественное свидетельство");
	СтруктПечатныхФорм.Вставить("Акт",          	"Акт об оказании услуг");
	СтруктПечатныхФорм.Вставить("_1Т",             "1-ТН (Товарно-транспортная накладная)");
	СтруктПечатныхФорм.Вставить("Бланк",           "Бланк товарного наполнения (адресный склад)");
	СтруктПечатныхФорм.Вставить("ТранспУпаковки",  "Штрихкоды транспортных упаковок");
	СтруктПечатныхФорм.Вставить("СерийныеНомера",   "Список серийных номеров");
    СтруктПечатныхФорм.Вставить("ПечатьРеестраДокументов"	,   "Реестр документов для покупателя");			
    СтруктПечатныхФорм.Вставить("ЗаявкаАмстор"	    ,   "Заявка АМСТОР");
	СтруктПечатныхФорм.Вставить("Инвойс",    	"Инвойс");
	СтруктПечатныхФорм.Вставить("СпецификацияКриворотько","Спецификация (таможня Крым)");
	СтруктПечатныхФорм.Вставить("ПроформаНаТару",  "Проформа на тару (таможня Крым)");    
	СтруктПечатныхФорм.Вставить("ДекларацияБезопасности",  "Декларация безопасности");    
	СтруктПечатныхФорм.Вставить("АктРоялти",  "Акт (Роялти)");    
	СтруктПечатныхФорм.Вставить("АктМКИ",  "Акт (МКИ)");    
	СтруктПечатныхФорм.Вставить("НакладнаяСоСкидкой","Расходная накладная со скидкой");
	Возврат СтруктПечатныхФорм;
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()
	ИспользованиеСкидок = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);

	Если НЕ ЗначениеЗаполнено(ИспользованиеСкидок) Тогда
		возврат Ложь;
	КонецЕсли;

	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;
	
	Если НЕ мРассчитыватьАвтоматическиеСкидки
		Или Проведен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет добавление возвратной тары из документа поступления товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокПоступление) Экспорт
	
	ТабТара = ДокПоступление.ВозвратнаяТара.Выгрузить();
	ТабТара.ЗаполнитьЗначения(0, "Цена,Сумма");
	ТабТара.Колонки.Заказ.Имя = "ЗаказПокупателя";
	
	ВозвратнаяТара.Загрузить(ТабТара);
	Для Каждого СтрокаТара Из ВозвратнаяТара Цикл
		СтрокаТара.СпособСписанияОстаткаТоваров = ?(НЕ ЗначениеЗаполнено(СтрокаТара.ЗаказПокупателя),
		Перечисления.СпособыСписанияОстаткаТоваров.СоСклада,
		Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр()

// Процедура выполняет заполниение возвратной тары по поступлению Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокументОснование, МассивЗаказов) Экспорт
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокТары = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументСсылка";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад        КАК Склад,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЛимитыТары.ЛимитПокупателю ЕСТЬ NULL  // Остатки тары у покупателя в регистре отрицательные
	|			ИЛИ (Док.Количество - ОстаткиТары.КоличествоОстаток) < (ЛимитыТары.ЛимитПокупателю) ТОГДА
	|			Док.Количество
	|		КОГДА ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток > 0 ТОГДА
	|			ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК КоличествоТары, // минимум из указанного в документе, и которое можно отгрузить (лимит - уже отгружено)
	|	Остатки.КоличествоОстаток КАК ОстатокТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(, 
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары +")  
	|	) КАК ЛимитыТары
	|ПО 
	|	ЛимитыТары.Номенклатура = Док.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	              И СтатусПередачи = &СтатусПередачи 
	|	) КАК ОстаткиТары
	|ПО 
	|	ОстаткиТары.Номенклатура = Док.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|		Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|		// УСЛОВИЕ_СкладИзШапки
	|	    ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Склад = Остатки.Склад
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|";
	
	Если МассивЗаказов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "И Док.Заказ В(&МассивЗаказов)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Док.Заказ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_СкладИзШапки", ?(мУказаниеСкладовВТЧ, "", "И Склад = &Склад"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"   , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументОснование);
	Запрос.УстановитьПараметр("Склад"                , Склад);
	Запрос.УстановитьПараметр("СтатусПередачи"       , Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаОстатков"		 , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОстатокТары = ?(Выборка.ОстатокТары = NULL, 0, Выборка.ОстатокТары);
		Количество  = Мин(Выборка.КоличествоТары, ОстатокТары);
		
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
		
		СтрокаВозвратнойТары.Номенклатура    = Выборка.Номенклатура;
		СтрокаВозвратнойТары.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		СтрокаВозвратнойТары.Склад           = Выборка.Склад;
		СтрокаВозвратнойТары.Количество      = Количество;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
		
		// Получим цену из регистра сведений ЦеныНоменклатуры
		Если НЕ ЗначениеЗаполнено(ТипЦен)
			или (НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда 
			СтрокаВозвратнойТары.Цена = 0;
		Иначе
			// из регистра
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаВозвратнойТары.Номенклатура, , ТипЦен, Дата,
			СтрокаВозвратнойТары.Номенклатура.ЕдиницаХраненияОстатков, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсВзаиморасчетов, КратностьВзаиморасчетов, , ДоговорКонтрагента);
			
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаВозвратнойТары.Цена = 0;
			Иначе
				СтрокаВозвратнойТары.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС, Истина,
				Ценообразование.ПолучитьСтавкуНДС(СтрокаВозвратнойТары.Номенклатура.СтавкаНДС));
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоПоступлениюТоваров()

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование,ИмяТЧ = "Товары", МассивЗаказов = Неопределено) Экспорт
	
	СкладыВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
	
	Если НЕ СкладыВТЧ И НЕ ЗначениеЗаполнено(Склад) Тогда
		Если ДокументОснование.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = ДокументОснование.СкладОрдер.Склад;
		Иначе			
			Склад = ДокументОснование.СкладОрдер;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад"            , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество"         , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДатаОстатков"	 , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЕстьЗаказы = МассивЗаказов <> Неопределено и ИмяТЧ<>"Оборудование" ;
	Если ЕстьЗаказы Тогда
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " 
	|ГДЕ Ссылка = &ДокументОснование";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Док.СтавкаНДС,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) < МАКСИМУМ(Остатки.КоличествоОстаток)
	|		ТОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)
	|		ИНАЧЕ
	|			МАКСИМУМ(Остатки.КоличествоОстаток)
	|	КОНЕЦ КАК МинКоличествоВДокументеОстаток,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	Док.ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|	Док.Склад, ", "") + "
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Остатки.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Остатки.Склад КАК Склад,", "") + "
	|		СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОстаткиНаСкладах.Номенклатура КАК Номенклатура,
	|			ОстаткиНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиНаСкладах.Склад КАК Склад,", "") + "
	|			ОстаткиНаСкладах.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиНаСкладах
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			ОстаткиВРознице.Номенклатура КАК Номенклатура,
	|			ОстаткиВРознице.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиВРознице.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиВРознице.Склад КАК Склад,", "") + "
	|			ОстаткиВРознице.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиВРознице
	|		) КАК Остатки
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Склад,", "") + "
	|		СерияНоменклатуры
	|	) КАК Остатки
	|ПО
	|	Док.Номенклатура                 = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры"
	+ ?(СкладыВТЧ, "
	|	И Док.Склад          = Остатки.Склад", "") + "
	|
	|ГДЕ Док.Ссылка = &ДокументОснование 
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.ХарактеристикаНоменклатуры,
	|	// ГРУППИРОВКА_ПО_ЗАКАЗАМ
	|	Док.СерияНоменклатуры" 
	+ ?(СкладыВТЧ, ", 
	|	Док.Склад", "") + "
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	
	Если ЕстьЗаказы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      " И Док.Заказ В(&МассивЗаказов) ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  " Док.Заказ, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", " Док.Заказ ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		СписКоличество = Выборка.МинКоличествоВДокументеОстаток;
		
		Если НЕ ЗначениеЗаполнено(СписКоличество) ИЛИ СписКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		
		Если СкладыВТЧ Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = Склад;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		СтрокаТабличнойЧасти.Количество = (СписКоличество * Выборка.КоэффициентЕдиницыХранения) / СтрокаТабличнойЧасти.Коэффициент;
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете);
	КонецЦикла;
	
	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мМинимальныеЦены = Новый ТаблицаЗначений;
		мМинимальныеЦены.Колонки.Добавить("Номенклатура");
		мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
		мМинимальныеЦены.Колонки.Добавить("Цена");
		
		мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
		
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",                      ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата));
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров,  мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()
	мКэшЗаказПокупателя = Новый Соответствие;
	ЗапросаСкладГруппа = Новый Запрос;
	ЗапросаСкладГруппа.Текст = "ВЫБРАТЬ СкладГруппа КАК СкладГруппа ИЗ Документ.ЗаказПокупателя ГДЕ Ссылка = &Ссылка";

	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	Для каждого СтрокаТЧ из Товары Цикл
		Если СкладИзШапки И НЕ ЕстьКолонкаЗаказ Тогда
			Если СтрокаТЧ.Склад <> Склад Тогда
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
		ИначеЕсли ЕстьКолонкаЗаказ И НЕ СкладИзШапки И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧЗаказПокупателяСкладГруппа = мКэшЗаказПокупателя[СтрокаТЧ.ЗаказПокупателя];
			Если СтрокаТЧЗаказПокупателяСкладГруппа = Неопределено Тогда
				ЗапросаСкладГруппа.УстановитьПараметр("Ссылка", СтрокаТЧ.ЗаказПокупателя);
				Выборка = ЗапросаСкладГруппа.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЧЗаказПокупателяСкладГруппа = Выборка.СкладГруппа;
					мКэшЗаказПокупателя.Вставить(СтрокаТЧ.ЗаказПокупателя, Выборка.СкладГруппа);
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧЗаказПокупателяСкладГруппа)
				ИЛИ ТипЗнч(СтрокаТЧЗаказПокупателяСкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда
				Если СтрокаТЧ.Склад <> Склад Тогда
					СтрокаТЧ.Склад = Склад;
				КонецЕсли;
			Иначе
				Если СтрокаТЧ.Склад <> СтрокаТЧЗаказПокупателяСкладГруппа Тогда
					СтрокаТЧ.Склад = СтрокаТЧЗаказПокупателяСкладГруппа;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если СкладИзШапки И НЕ ЕстьКолонкаЗаказ Тогда
			Если СтрокаТЧ.Склад <> Склад Тогда
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
		ИначеЕсли ЕстьКолонкаЗаказ И НЕ СкладИзШапки И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧЗаказПокупателяСкладГруппа = мКэшЗаказПокупателя[СтрокаТЧ.ЗаказПокупателя];
			Если СтрокаТЧЗаказПокупателяСкладГруппа = Неопределено Тогда
				ЗапросаСкладГруппа.УстановитьПараметр("Ссылка", СтрокаТЧ.ЗаказПокупателя);
				Выборка = ЗапросаСкладГруппа.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЧЗаказПокупателяСкладГруппа = Выборка.СкладГруппа;
					мКэшЗаказПокупателя.Вставить(СтрокаТЧ.ЗаказПокупателя, Выборка.СкладГруппа);
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧЗаказПокупателяСкладГруппа)
				ИЛИ ТипЗнч(СтрокаТЧЗаказПокупателяСкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда
				Если СтрокаТЧ.Склад <> Склад Тогда
					СтрокаТЧ.Склад = Склад;
				КонецЕсли;
			Иначе
				Если СтрокаТЧ.Склад <> СтрокаТЧЗаказПокупателяСкладГруппа Тогда
					СтрокаТЧ.Склад = СтрокаТЧЗаказПокупателяСкладГруппа;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСкладыВТЧ()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям(ДатаОстатков=неопределено)
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");
	
	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям,ДатаОстатков);
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();
	
	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") И глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
	
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);
		флЗаполнятьИзРезервов = ложь;
		Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании И ИсходнаяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва  Тогда
			Если ИсходнаяСтрока.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ЗаказПокупателя);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;
		СтрокаМаксимальнойСуммы    = Неопределено;
		НепогашеннаяСумма          = ИсходнаяСтрока.Сумма;
		МаксимальнаяСумма          = 0;
		
		ЗаполненКлючСвязи = Ложь;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;
			
			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры               = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры               = ИсходнаяСтрока.СерияНоменклатуры;
			КонецЕсли;
			НоваяСтрока.Количество                          = СписанноеКоличество;
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;
			
			ТекущаяСумма      = НоваяСтрока.Сумма;
			НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
			
			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = НоваяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 Тогда
			
			Если СтрокаСПустойСерией = Неопределено Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				
				ТекущаяСумма      = НоваяСтрока.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
				
				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = НоваяСтрока;
				КонецЕсли;
				
			Иначе
				
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				
				ТекущаяСумма      = СтрокаСПустойСерией.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
				
				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = СтрокаСПустойСерией;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Если что-то осталось, кидаем на строку с максимальной суммой.
		Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьПоСериям()

//Процедура выполняет заполнение табличной части неполученными ТМЦ (резервом) по заказу покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТабличнаяЧасть = Товары Тогда
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмеренияМест, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.Товары
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмеренияМест) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура И Остатки.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.ВозвратнаяТара
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура";
	КонецЕсли;
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",       Сделка);
	Запрос.УстановитьПараметр("Склад",        Склад);
	Запрос.УстановитьПараметр("СтатусТары",   Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	//Формирование временной таблицы
	МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЕстьТоварыСУчетомПоСерии = ложь;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстаток,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаВзаиморасчетовОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + ") КАК Остатки
	|ГДЕ КоличествоОстаток>0";
	Запрос.Выполнить();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	//Условие используется в виртуальной таблице остатков
	УсловиеСклад = "";
	Если мУказаниеСкладовВТЧ Тогда
		Если ЗначениеЗаполнено(ДокументОснование.СкладГруппа)
			И ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
			ГруппаДоступностиСкладов = ДокументОснование.СкладГруппа;
		Иначе
			ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ГруппаДоступностиСкладов");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГруппаДоступностиСкладов) Тогда
			Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
			
			УсловиеСклад = 
				" И Склад В (
				|	ВЫБРАТЬ
				|		ГруппыДоступности.Склад
				|	ИЗ
				|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
				|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";	
		КонецЕсли;		
	Иначе
		УсловиеСклад = " И Склад = &Склад";
	КонецЕсли; 
	
	УсловиеОстатки = "Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ВременнаяТаблицаОстаткиПоЗаказу)" + УсловиеСклад;
	
	ПревышатьОстаткиОрганизации = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(Организация);
	
	Если НЕ ПревышатьОстаткиОрганизации Тогда
		УсловиеОстаткиОрганизаций = "Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ВременнаяТаблицаОстаткиПоЗаказу)";
		ПараметрыУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
		Если ПараметрыУП <> Неопределено И ПараметрыУП.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			УсловиеОстаткиОрганизаций = УсловиеОстаткиОрганизаций + УсловиеСклад;
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Остатки.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	NULL                                 КАК Склад,
	|	NULL                                 КАК СортировкаПоСкладу,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстатокПоЗаказу,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаОстатокПоЗаказу,
	|	0                                    КАК ОстатокНаСкладе,
	|	0                                    КАК ОстатокРезерваПоСделке,
	|	0                                    КАК ОстатокРезерва,
	|	0                                    КАК ОстатокКПередаче,
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL 
	|		ТОГДА 9999999 
	|		ИНАЧЕ ТЧЗаказа.НомерСтроки 
	|	КОНЕЦ                                КАК НомерСтрокиЗаказа"
	
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.ЕдиницаИзмеренияМест      КАК ЕдиницаИзмеренияМест", "")
	
	+ ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации, "
	|	, ВЫБОР КОГДА ОстаткиОрганизации.КоличествоОстаток ЕСТЬ NULL 
	|		ТОГДА 0 
	|		ИНАЧЕ ОстаткиОрганизации.КоличествоОстаток 
	|	КОНЕЦ КАК КоличествоОстатокОрганизации", "") + "
	|ИЗ
	|	ВременнаяТаблицаОстаткиПоЗаказу КАК Остатки
	
	|" + ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации,
	"ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, 
	|								 Организация = &Организация %Условие_Качество% 
	|								И " + УсловиеОстаткиОрганизаций + "
	|   ) КАК ОстаткиОрганизации
	|ПО
	|	Остатки.Номенклатура = ОстаткиОрганизации.Номенклатура 
	|	И Остатки.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры", "") + " 
	
	|
	|" + ТекстЗапросаПоТЧЗаказа + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	ОстаткиНаСкладе.Номенклатура                                     КАК Номенклатура,
	|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	NULL                                                             КАК ЕдиницаХранения,
	|	NULL                                                             КАК КоэффициентЕдиницыХранения,
	|	ОстаткиНаСкладе.Номенклатура.ВестиУчетПоСериям 					 КАК ВестиУчетПоСериям,
	|	0                                                                КАК Цена,
	|	0                                                                КАК ПроцентСкидкиНаценки,
	|	0                                                                КАК ПроцентАвтоматическихСкидок,
	|	NULL                                                             КАК УсловиеАвтоматическойСкидки,
	|	NULL                                                             КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ОстаткиНаСкладе.Склад                                            КАК Склад,
	|	ВЫБОР КОГДА ОстаткиНаСкладе.Склад = &Склад ТОГДА
	|	0
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                       КАК СортировкаПоСкладу,
	|	ОстаткиНаСкладе.Номенклатура.СтавкаНДС      КАК СтавкаНДС,
	|	0                                           КАК КоличествоОстатокПоЗаказу,
	|	0                                           КАК СуммаОстатокПоЗаказу,
	|	ОстаткиНаСкладе.КоличествоОстаток           КАК ОстатокНаСкладе,
	|   РезервыОстаткиПоСделке.КоличествоОстаток    КАК ОстатокРезерваПоСделке,
	|   РезервыОстатки.КоличествоОстаток            КАК ОстатокРезерва,
	|   КПередаче.КоличествоОстаток                 КАК ОстатокКПередаче,
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL 
	|		ТОГДА 9999999 
	|		ИНАЧЕ ТЧЗаказа.НомерСтроки 
	|	КОНЕЦ                                       КАК НомерСтрокиЗаказа"
	
	+ ?(ТабличнаяЧасть = Товары, "
	|	, ТЧЗаказа.ЕдиницаИзмеренияМест             КАК ЕдиницаИзмеренияМест", "")
	
	+ ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации, "
	|	, 0                                         КАК КоличествоОстатокОрганизации", "") + "
	|		
	|   ИЗ
	|   // остатки на складе
	|	(ВЫБРАТЬ
	|		Склад КАК Склад,
	|		Номенклатура КАК Номенклатура,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, " + УсловиеОстатки + "
	|										%Условие_Качество%
	|			)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, " + УсловиеОстатки + "
	| 										%Условие_Качество%
	|			)
	|		) КАК ОстаткиНаСкладе
	|		СГРУППИРОВАТЬ ПО
	|			Склад,
	|			Номенклатура,
	|			ХарактеристикаНоменклатуры
	|	) КАК ОстаткиНаСкладе
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ //Резервы по сделке
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	|										И ДокументРезерва = &Сделка
	|		) КАК РезервыОстаткиПоСделке
	|	ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстаткиПоСделке.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстаткиПоСделке.ХарактеристикаНоменклатуры ", "")	
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = РезервыОстаткиПоСделке.Склад", "") 
		+ " 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	|	                                   И ДокументРезерва <> &Сделка
	|		) КАК РезервыОстатки
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстатки.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстатки.ХарактеристикаНоменклатуры ", "")	
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = РезервыОстатки.Склад", "") 
		+ " 
	|ЛЕВОЕ СОЕДИНЕНИЕ // к передаче
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	| 										%Условие_Качество%
	|										И СтатусПартии " + ?(ТабличнаяЧасть = Товары, " <> &СтатусТары", " = &СтатусТары") + "
	|	) КАК КПередаче
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = КПередаче.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = КПередаче.ХарактеристикаНоменклатуры ", "")
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = КПередаче.Склад", "")
		+ "
	|" + СтрЗаменить(ТекстЗапросаПоТЧЗаказа, "Остатки.", "ОстаткиНаСкладе.");
	
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый) ");
	Иначе
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," ");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица остатков по заказу по результатам запроса
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	ТаблицаПоЗаказу.Сортировать("НомерСтрокиЗаказа возр");
	
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// Таблица остатков на складах, резервов и т. п.
	ТаблицаПоОстаткам = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоОстаткам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоОстаткам.Получить(Сч);
		Если СтрокаТаблицы.ОстатокНаСкладе <= 0 Тогда
			ТаблицаПоОстаткам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	ТаблицаПоОстаткам.Сортировать("СортировкаПоСкладу, ОстатокРезерваПоСделке УБЫВ");
	
	// Нам надо знать сколько на самом деле осталось конкретной номенклатуры 
	// с конкретной характеристикой	по данному заказу, поскольку в разрезе цен и скидок
	// остаки могут расходится
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	Если ТабличнаяЧасть = Товары Тогда
		Если ПревышатьОстаткиОрганизации Тогда
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
		Иначе
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, КоличествоОстатокОрганизации","КоличествоОстатокПоЗаказу");
		КонецЕсли;
	Иначе
		ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
	КонецЕсли;
	
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);	

	Для каждого СтрокаТаблицы ИЗ ТаблицаБезЦен Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			Если ПревышатьОстаткиОрганизации Тогда
				ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
			Иначе
				ОстатокКоличестваПоЗаказу = Мин(СтрокаТаблицы.КоличествоОстатокПоЗаказу, СтрокаТаблицы.КоличествоОстатокОрганизации);
			КонецЕсли;
		Иначе
			ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		СтрокиЗаказа   = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);
		СтрокиОстатков = ТаблицаПоОстаткам.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
			
			Если ОстатокКоличестваПоЗаказу <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗаказа.КоличествоОстатокПоЗаказу <= 0 Тогда
				Продолжить;
			Иначе
				ОстатокКоличестваПоСтрокеЗаказа = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			КонецЕсли;
			
			//  Делаем два прохода в первом списываем все резервы по сделке, во втором, если
			//  количество еще не выбрано, то добираем из свободных остатков.
			Для Сч = 1 По 2 Цикл
				
				Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
					
					Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаОстатков.ОстатокНаСкладе = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					
					РезервПоСделке           = ?(СтрокаОстатков.ОстатокРезерваПоСделке = NULL, 0, СтрокаОстатков.ОстатокРезерваПоСделке);
					РезервПоДругимСделкам    = ?(СтрокаОстатков.ОстатокРезерва         = NULL, 0, СтрокаОстатков.ОстатокРезерва);
					КПередаче                = ?(СтрокаОстатков.ОстатокКПередаче       = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
					СвободныйОстатокНаСкладе = Макс(СтрокаОстатков.ОстатокНаСкладе - РезервПоДругимСделкам - КПередаче, 0);
					
					КоличествоКСписанию   = ?(Сч = 1, Мин(Макс(СтрокаОстатков.ОстатокНаСкладе-КПередаче,0), РезервПоСделке), Макс(СвободныйОстатокНаСкладе-РезервПоСделке,0));
					КоличествоКЗаполнению = Мин(КоличествоКСписанию, Мин(ОстатокКоличестваПоЗаказу,  ОстатокКоличестваПоСтрокеЗаказа));
					
					Если КоличествоКЗаполнению = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокКоличестваПоЗаказу       = ОстатокКоличестваПоЗаказу       - КоличествоКЗаполнению;
					ОстатокКоличестваПоСтрокеЗаказа = ОстатокКоличестваПоСтрокеЗаказа - КоличествоКЗаполнению;
					СтрокаОстатков.ОстатокНаСкладе  = СтрокаОстатков.ОстатокНаСкладе  - КоличествоКЗаполнению;
					
					СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
					
					СтрокаТабличнойЧасти.Номенклатура = СтрокаОстатков.Номенклатура;
					
					Если ТабличнаяЧасть = Товары Тогда
						Если не ЕстьТоварыСУчетомПоСерии И СтрокаОстатков.ВестиУчетПоСериям Тогда
							ЕстьТоварыСУчетомПоСерии = истина;
						КонецЕсли;

						СтрокаТабличнойЧасти.Количество       = ?(НЕ ЗначениеЗаполнено(СтрокаЗаказа.Коэффициент), 0,
						КоличествоКЗаполнению * СтрокаЗаказа.КоэффициентЕдиницыХранения / СтрокаЗаказа.Коэффициент);
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаЗаказа.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Коэффициент      = СтрокаЗаказа.Коэффициент;
						
						Если ЗначениеЗаполнено(СтрокаЗаказа.ЕдиницаИзмеренияМест) Тогда
							СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаЗаказа.ЕдиницаИзмеренияМест;
							ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						Иначе
							ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						КонецЕсли;
						
						СтрокаТабличнойЧасти.СтавкаНДС                           = СтрокаЗаказа.СтавкаНДС;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры          = СтрокаОстатков.ХарактеристикаНоменклатуры;

						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки                = СтрокаЗаказа.ПроцентСкидкиНаценки;
						СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = СтрокаЗаказа.ПроцентАвтоматическихСкидок;
						СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = СтрокаЗаказа.УсловиеАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = СтрокаЗаказа.ЗначениеУсловияАвтоматическойСкидки;
						СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
						Сделка.ВалютаДокумента, ВалютаДокумента,
						ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						Сделка.СуммаВключаетНДС,
						УчитыватьНДС,
						СуммаВключаетНДС,
						Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						
					Иначе
						
						СтрокаТабличнойЧасти.Количество = КоличествоКЗаполнению;
						СтрокаТабличнойЧасти.Цена       = СтрокаЗаказа.Цена;
					КонецЕсли;
					
					Если РезервПоСделке > 0 Тогда
						СтрокаОстатков.ОстатокРезерваПоСделке                = СтрокаОстатков.ОстатокРезерваПоСделке - КоличествоКЗаполнению;
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					Иначе
						ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
					КонецЕсли;
					
					Если Сч = 1 Тогда
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Иначе
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.Склад           = СтрокаОстатков.Склад;
					СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
					
					Если ТабличнаяЧасть = Товары Тогда
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете);
					Иначе
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
					КонецЕсли;
					
				КонецЦикла; // По строкам остатков
			КонецЦикла;  // по проходам
		КонецЦикла; // по строкам заказа
	КонецЦикла;    // по строкам таблицы (без цен)
	
	//Заполнение серий
	Если ТабличнаяЧасть = Товары И ЕстьТоварыСУчетомПоСерии Тогда
		ЗаполнитьПоСериям(ДатаОстатков);
	КонецЕсли;
	
	// Заполнение табличной части СоставНабора
	Если ТабличнаяЧасть = Товары
		И ДокументОснование.СоставНабора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарДокумент", ДокументОснование);
		Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры,
		|	Док.ЕдиницаИзмеренияМест,
		|	Док.ЕдиницаИзмерения,
		|	Док.Количество,
		|	Док.Коэффициент,
		|	Док.Цена,
		|	Док.СтавкаНДС,
		|	Док.ПроцентСкидкиНаценки,
		|	Док.ПроцентАвтоматическихСкидок,
		|	Док.УсловиеАвтоматическойСкидки,
		|	Док.ЗначениеУсловияАвтоматическойСкидки,
		|	Док.Сумма,
		|	Док.Ссылка.ВалютаДокумента         КАК ВалютаДокумента,
		|	Док.Ссылка.СуммаВключаетНДС        КАК СуммаВключаетНДС,
		|	Док.Ссылка.КратностьВзаиморасчетов КАК КратностьДокумента,
		|	Док.Ссылка.КурсВзаиморасчетов      КАК КурсДокумента,
		|	ВЫБОР 
		|		КОГДА Док.Размещение ССЫЛКА Справочник.Склады ТОГДА Док.Размещение
		|		КОГДА Док.Ссылка.СкладГруппа ССЫЛКА Справочник.Склады ТОГДА Док.Ссылка.СкладГруппа
		|		ИНАЧЕ &ПустойСклад
		|	КОНЕЦ                              КАК Склад,
		|	ВЫБОР 
		|		КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстаток
		|	КОНЕЦ                              КАК Остаток,
		|	Док.КлючСтроки
		|
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ПарДокумент) КАК Остатки
		|		ПО Остатки.Номенклатура               = Док.Номенклатура
		|		 И Остатки.ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	Док.Ссылка = &ПарДокумент
		|	И Док.Номенклатура.Комплект
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавленКомплект = Ложь;
		Выборка          = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОстатокКоличестваПоЗаказу = Мин(Выборка.Количество, Выборка.Остаток);
			
			Если ОстатокКоличестваПоЗаказу = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Выборка.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
			НоваяСтрока.Количество                          = ОстатокКоличестваПоЗаказу;
			НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
			
			НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
			Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НоваяСтрока.Качество                     = Справочники.Качество.Новый;
			НоваяСтрока.Склад                        = Выборка.Склад;
			НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
			НоваяСтрока.ЗаказПокупателя              = Сделка;

			ДобавленКомплект                         = Истина;
		КонецЦикла;
		
		Если ДобавленКомплект Тогда
			УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, ДокументОснование, Истина);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	КурсСделки = ЗаполнениеДокументов.КурсДокумента(Сделка,     мВалютаРегламентированногоУчета);
	КратностьСделки = ЗаполнениеДокументов.КратностьДокумента(Сделка,     мВалютаРегламентированногоУчета);
	ОстаткиУслуг = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	
	Для каждого Строка из ОстаткиУслуг цикл
		СтрокаУслуг = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуг,Строка);
		СтрокаУслуг.Содержание = СокрЛП(СтрокаУслуг.Содержание);
		СтрокаУслуг.Количество                          = Строка.КолОстаток;
		СтрокаУслуг.Цена                                = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Цена,
			   Сделка.ВалютаДокумента, ВалютаДокумента,
			   КурсСделки,
			   Курс,
			   КратностьСделки,
			   Кратность);
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);
		
		СтрокаУслуг.ЗаказПокупателя = Сделка;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаУслуг, "Услуги", ОтражатьВБухгалтерскомУчете); 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  ЗаполнятьПредоплату - Булево.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(ЗаполнятьПредоплату = Истина) Экспорт

	ЗаполнитьСкладыВТЧ();

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	ТЗТовары = Товары.Выгрузить(, "Номенклатура");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Номенклатура"), ТЗТовары);
	ТЗТовары.Свернуть("Номенклатура");

	МассивНоменклатуры = ТЗТовары.ВыгрузитьКолонку("Номенклатура");

	// Сформируем массив складов для фильтров запросов.
	СкладИзШапки = Не мУказаниеСкладовВТЧ;

	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		ТЗСклады = Товары.Выгрузить(, "Склад");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Склад"), ТЗСклады);
		ТЗСклады.Свернуть("Склад");

		МассивСклады = ТЗСклады.ВыгрузитьКолонку("Склад");

		КолвоЭлементов = МассивСклады.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ТекЭлемент = МассивСклады[КолвоЭлементов - ОбратныйИндекс];

			Если Не ЗначениеЗаполнено(ТекЭлемент)Тогда
				МассивСклады.Удалить(КолвоЭлементов - ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиТоваровВРезерве.Склад,
	|	ОстаткиТоваровВРезерве.Номенклатура,
	|	ОстаткиТоваровВРезерве.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровВРезерве.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва В (&МассивЗаказов)
	|	   И Склад В (&МассивСклады)
	|	   И Номенклатура В (&МассивНоменклатуры)
	|	) КАК ОстаткиТоваровВРезерве
	|");

	ТЗЗаказы = Товары.Выгрузить(, "ЗаказПокупателя");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "ЗаказПокупателя"), ТЗЗаказы);
	ТЗЗаказы.Свернуть("ЗаказПокупателя");

	Запрос.УстановитьПараметр("Ссылка"            , Ссылка);
	Запрос.УстановитьПараметр("МассивЗаказов"     , ТЗЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
	Запрос.УстановитьПараметр("МассивСклады"      , МассивСклады);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

	Таблица = Запрос.Выполнить().Выгрузить();

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		// Сначала вычтем из найденных остатков количество, по которому явно указан
		// способ списания "из резерва". Для этого последовательно обойдем табличные части 
		// Товары и Возвратная тара.
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
			// если способ списание "со склада" или не установлен - пропускаем строку
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров)
				ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество        = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				Строка.Количество          = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задан способ списания. Заполнять не будем
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);
	
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");
		
		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");
		
		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл
			
			Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				Продолжить;
			КонецЕсли;
			
			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;
			
			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество           = СписанноеКоличество;
				
				КоэффПогашения                           = СписанноеКоличество / КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
				КоличествоОсталосьПогасить               = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить                    = СуммаОсталосьПогасить - НоваяСтрока.Сумма;
				
				
				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;
				
				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество           = КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                = Окр(СуммаОсталосьПогасить, 2, 1);
				
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл
			
			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				
				Стр                              = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока              = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС                  = Стр.СтавкаНДС;
					РедактируемаяСтрока.ПроцентСкидкиНаценки       = Стр.ПроцентСкидкиНаценки;
					РедактируемаяСтрока.ПроцентАвтоматическихСкидок= Стр.ПроцентАвтоматическихСкидок;
					РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Стр.УсловиеАвтоматическойСкидки;
					РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Стр.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли;
			
			РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;
			РедактируемаяСтрока.Склад                        = Строка.Склад;
			РедактируемаяСтрока.ЗаказПокупателя              = Строка.ЗаказПокупателя;
			
			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(РедактируемаяСтрока, Строка);			
			
			Если ЭтоТовары Тогда
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			Иначе
				РедактируемаяСтрока.Цена  = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;
			
			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;
			
		КонецЦикла;
	КонецЦикла;
	
	Если мЕстьКолонкаСерии Тогда
		ЗаполнитьПоСериям();
	КонецЕсли;
	
	Если ЗаполнятьПредоплату Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",		СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",			СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",				СчетаУчета.СчетУчетаТарыПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТареПоАвансам",	СчетаУчета.СчетАвансовПоТареПокупателя);
		
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетовПокупателяПриБартере);
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансовПокупателяПриБартере);
		КонецЕсли;	
		
		СтруктураСчетов.Вставить("СчетУчетаНДС",	    		СчетаУчета.СчетУчетаНДСПродаж);
		СтруктураСчетов.Вставить("СчетУчетаНДСПодтвержденный",	СчетаУчета.СчетУчетаНДСПродажПодтвержденный);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры,
	|	СчетНаОплатуТовары.Цена,
	|	СчетНаОплатуТовары.ПроцентСкидкиНаценки,
	|	СчетНаОплатуТовары.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуТовары.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗаказПокупателя,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,
	|	СчетНаОплатуТовары.КлючСтроки";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуТовары.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.КоличествоМест                      = Выборка.КоличествоМест;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                               = ДокументОснование.Склад;
		НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.Качество                     = Справочники.Качество.Новый;
		НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете);
		
	КонецЦикла;
	
	Если ДокументОснование.СоставНабора.Количество() > 0 Тогда
		СоставНабора.Загрузить(ДокументОснование.СоставНабора.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма,
	|	СчетНаОплатуВозвратнаяТара.Цена,
	|	СчетНаОплатуВозвратнаяТара.ЗаказПокупателя,
	|	СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуВозвратнаяТара.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.ЗаказПокупателя              = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                        = ДокументОснование.Склад;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьВозвратнуюТару()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.ПроцентСкидкиНаценки,
	|	СчетНаОплатуУслуги.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуУслуги.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗаказПокупателя,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуУслуги.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.Содержание                          = Выборка.Содержание;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьУслуги()

Процедура ОбработкаЗаполненияРегл(Основание)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(Услуги        , "Услуги"        , ОтражатьВБухгалтерскомУчете);
		
		ЗаполнитьСчетаУчетаВТабЧасти(СоставНабора  , "СоставНабора"  , ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет вид склада в табличной части Товары, при виде операции Оборудование
//                 Оборудование можно реализовывать только с Оптового склада
//
Процедура ПроверитьВидСкладаВТабличнойЧастиТовры(ТаблицаПоТоварам, Отказ = Ложь, Заголовок, ИмяРеквизита = Неопределено) Экспорт

	Для Каждого СтрокаТовара Из ТаблицаПоТоварам Цикл
		Если ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
			ВидСклада = ?(ИмяРеквизита = Неопределено, СтрокаТовара.Склад.ВидСклада, СтрокаТовара[ИмяРеквизита]);
			Если ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+ СтрокаТовара.НомерСтроки +
					" табличной части Оборудование: содержится склад с видом не равным ""Оптовый"". Такого быть не должно!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьРуководителяИГлавногоБухгалтера() Экспорт
	
	Организация = ЭтотОбъект.Организация;
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда 
		Возврат;
	КонецЕсли;
	
	ОтветственныеЛица = ФормированиеПечатныхФормСервер.ОтветственныеЛица(Организация, Дата);
	
	ЭтотОбъект.ОтпускРазрешил = ОтветственныеЛица.Руководитель;
	
КонецПроцедуры // УстановитьРуководителяИГлавногоБухгалтера

Процедура УстановитьОтветственногоПоСкладу() Экспорт
	
	Если Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
		Отбор = Новый Структура("СтруктурнаяЕдиница");
		Отбор.СтруктурнаяЕдиница = Склад;
		СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Дата, Отбор);

		Если СрезПоследних.Количество() < 1 Тогда
			ОтпускПроизвел = Справочники.ФизическиеЛица.ПустаяСсылка();
		Иначе
			ОтпускПроизвел = СрезПоследних[0].ФизическоеЛицо;
		КонецЕсли;
	Иначе
		ОтпускПроизвел = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтветственногоПоСкладу

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
 	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, ТаблицаПоУслугам, СтруктураШапкиДокумента)
	
	МетаданныеДокумента = Метаданные();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
		
		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.ХарактеристикаНоменклатуры,
				Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));
				
				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;
				
				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;
					
					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество,
					ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;
				
				СуммаСкидки = СтоимостьКомплектующих - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.Количество, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаТоваров, СтруктураШапкиДокумента);
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
	// при передаче на комиссию собсвтенных товаров, кор. налоговое назначение должно быть нал. назначением по НДС.
		
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	
	Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
		И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
		
	ИначеЕсли СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда		
		
		Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации товаров по авансу до 01.04)
			ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
		Иначе	
			ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	// заполним налоговое назначение и вид деятельности НДС для услуг, определяется однозначно по ставке НДС
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначение", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаТоваров.Колонки.Добавить("ВидДеятельностиНДС", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.ВидДеятельностиНДС = НалоговыйУчет.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС);
		СтрокаТаблицы.НалоговоеНазначение = НалоговыйУчетПовтИсп.ОпределитьНалоговоеНазначениеУслугПоВидуДеятельностиНДС(СтрокаТаблицы.ВидДеятельностиНДС);
	КонецЦикла;
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда	
			// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации услуг по авансу до 01.04)
			ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
		Иначе	
			ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуУслугРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
 	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)
	
	ТаблицаТары.Колонки.Добавить("СуммаПродажная" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
		ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС" .
	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента,
		КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, 
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаТары, СтруктураШапкиДокумента);
	
	// Сумма для проводки на залоговую стоимость тары
	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		Сумма = СтрокаТаблицы.Сумма;
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
		КонецЕсли;
		
	КонецЦикла;
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
		
		ТаблицаТары.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда	
			// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации товаров по авансу до 01.04)
			ТаблицаТары.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
		Иначе	
			ТаблицаТары.ЗагрузитьКолонку(ТаблицаТары.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		КонецЕсли;
		

	ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре)
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		
		ТаблицаДвижений.Колонки.Добавить("Контрагент");
		ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
		ТаблицаДвижений.Колонки.Добавить("СчетАванса");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора, "ВидДоговораКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	КонецЕсли;
	
	// ТАРА (отдельной строкой)
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвиженийТара = ТаблицаКопия.Скопировать();
	
	ТаблицаДвиженийТара.Колонки.Добавить("Контрагент");
	ТаблицаДвиженийТара.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетОплаты");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре         , "СчетОплаты");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТареПоАвансам, "СчетАванса");
	
	Если НЕ ЗначениеЗаполнено(ТаблицаДвижений) Тогда
		ТаблицаДвижений = ТаблицаДвиженийТара.Скопировать();
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийТара, ТаблицаДвижений);
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
КонецФункции

// Дополняет полями, нужными для регламентированного учета, структуру 
// обязательных полей шапки документа.
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
						
		КонецЕсли;
		
		Если НЕ (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		   Если СтруктураШапкиДокумента.ЕстьНДС
			   И СтруктураШапкиДокумента.УчитыватьНДС 
			   ИЛИ Дата >= '20110101'
			   Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
				Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером И Дата >= '20110101'
					Тогда
					СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПодтвержденный");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВозвратнаяТара.Количество() > 0 Тогда
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;
	
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Оборудование нельзя продать по договору, взаиморасчеты по которому ведутся по заказам.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
		И  (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация оборудования не может производиться по договору с ведением взаиморасчетов """
		+  СокрЛП(СтруктураШапкиДокумента.ВедениеВзаиморасчетов)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
	// Брак нельзя отдать на реализацию.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		И  (Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация товара ненадлежащего качества может производиться только по договору """
		+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	СтруктураОбязательныхПолей = Новый Структура();
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ОбщегоНазначенияКлиентСервер.ПроверитьЗаполнениеВычисляемыхРеквизитовШапки(ЭтотОбъект, СтруктураОбязательныхПолей, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка вида склада
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ПроверитьЧтоСкладОптовый(ТаблицаПоТоварам, Отказ, Заголовок);
	Иначе
		УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	КонецЕсли;

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТоварам,
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Ложь             // ЭтоЗатраты 
	);	
	
	
	Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// Схемы реализации должны быть заполнены правильно
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
		СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, ИмяТабличнойЧасти, , ТаблицаПоТоварам, 
															 СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
															 Отказ, Заголовок);	
    КонецЕсли;
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Услуги";
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	
 	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
 	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоУслугам,
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Истина           // ЭтоЗатраты 
	);	
	
	Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// Схемы реализации должны быть заполнены правильно
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, ИмяТабличнойЧасти, , ТаблицаПоУслугам, 
															 СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
															 Отказ, Заголовок);	
    КонецЕсли;
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ВозвратнаяТара"; 
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей,  СтруктураШапкиДокумента);
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПокупателя", Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТаре,
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Ложь             // ЭтоЗатраты 
	);	
	
	Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// Схемы реализации должны быть заполнены правильно
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
		СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, ИмяТабличнойЧасти, , ТаблицаПоТаре, 
															 СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
															 Отказ, Заголовок);	
    КонецЕсли;
	
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ);
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
		Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, 
	ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок);
	
	Если ТаблицаПоКомплектам.Количество() + ТаблицаПоТаре.Количество() >0 тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;
	
	// Проводки формируются и в модуле документа, и при списании партий
	ИспользуетсяРасширеннаяАналитикаУчетаЗатрат = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И 
		(глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух ИЛИ ИспользуетсяРасширеннаяАналитикаУчетаЗатрат) Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());


	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам",ТаблицаПоКомплектам);
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			МассивСерий = ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры");
			УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( МассивСерий, Дата, Отказ, Заголовок);
		КонецЕсли;
		
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ВидДвиженияНакопления.Приход, Отказ, Заголовок);
		
		Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
			
			Если СуммаДокумента <> 0 Тогда
				
				// По регистру ПродажиПоДисконтнымКартам.
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
					НаборДвижений = Движения.ПродажиПоДисконтнымКартам;
					
					// Получим таблицу значений, совпадающую со структурой набора записей регистра.
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					
					// Заполним таблицу движений.
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
					СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента,
					СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента,
					СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Если Не Отказ Тогда
						НаборДвижений.ВыполнитьДвижения();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КопияТовары = ТаблицаПоТоварам.Скопировать();
			КопияУслуги = ТаблицаПоУслугам.Скопировать();
			
			ТабИменУслуги = Неопределено;
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДС",    "НДСВрем");
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДСУпр", "НДС");
			
			ТабИменТовары = Неопределено;
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДС",    "НДСВрем");
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСУпр", "НДС");
			
			// ТОВАРЫ И УСЛУГИ ПО РЕГИСТРУ Закупки.
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
				// В этом случае таблицы документа обрабатываются особым образом
				ТаблицаДвижений = Движения.Продажи.Выгрузить();
				ТаблицаДвижений.Очистить();
				ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
				ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
				
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТовары, ТаблицаДвиженийТовары, Проект, Дата, "Продажи");
				
				// Вставляем уже подготовленные таблицы движений
				ТаблицыДанныхДокумента = Новый Структура;
				ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
				ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
				
			Иначе
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияУслуги);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
				
			КонецЕсли;
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
			
			// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.Сделка);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
			
			// ПО РЕГИСТРУ ПредоставленныеСкидки.
			НаборДвижений = Движения.ПредоставленныеСкидки;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			ТаблицаПоКомплектам.Индексы.Добавить("ВидСклада");
			ТаблицаПоТаре.Индексы.Добавить("ВидСклада");

			ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			МассивКомплектыОпт = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаОпт);
			МассивТараОпт = ТаблицаПоТаре.НайтиСтроки(ВидСкладаОпт);
			
			Если МассивКомплектыОпт.Количество() <> 0 ИЛИ МассивТараОпт.Количество() <> 0 Тогда
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыОпт", МассивКомплектыОпт);
					СтруктТаблицДокумента.Вставить("ТараОпт",      МассивТараОпт);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараОпт");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;
				
			КонецЕсли;
			
			ВидСкладаРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
			МассивКомплектыРозн = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаРозн);
			МассивТараРозн = ТаблицаПоТаре.НайтиСтроки(ВидСкладаРозн);
			
			Если МассивКомплектыРозн.Количество() <> 0 ИЛИ МассивТараРозн.Количество() <> 0 Тогда
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если Не Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыРозн", МассивКомплектыРозн);
					СтруктТаблицДокумента.Вставить("ТараРозн",      МассивТараРозн);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараРозн");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // отпуск по ордеру
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
			Если Не Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", ТаблицаПоКомплектам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТовары");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контроль остатков товара
		Если ТаблицаПоТаре.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольЛимитовВозвратнойТары(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыПереданные
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			КопияТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
			КопияТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя = "Сделка";
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТаре);
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				КопияТовары = ТаблицаПоТоварам.Скопировать();
				КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
			КонецЕсли;
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
			КонецЕсли;
			
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Для Каждого ТаблицаДанных Из ТаблицыДанныхДокумента Цикл
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",     Сделка, ТаблицаДанных.Ключ);
				КонецЦикла;
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
		// ТОВАР, ТАРА И УСЛУГИ ПО РЕГИСТРУ ЗаказыПокупателей.
		
		// Проверка остатков при оперативном проведении.
		Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары",         Отказ, Заголовок, РежимПроведения);
		Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "ВозвратнаяТара", Отказ, Заголовок, РежимПроведения);
		Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги",         Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
			ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
		
		// ТОВАР И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах.
		ТабРезервТовары = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоКомплектам);	
		ТабРезервТара   = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоТаре);	
		
		Если ТабРезервТовары.Количество() > 0 ИЛИ ТабРезервТара.Количество() > 0 Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабРезервТовары);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТабРезервТара);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Функция удаляет из таблицы значений строки по которым не надо формировать резерв
// Возврат КОПИЯ исходной таблицы с удаленными строками
//
Функция УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТабТовары)
	
	ТабРезерв = ТабТовары.Скопировать();
	
	// Удалим записи таблицы в которых не надо списывать из резерва или не указан заказ покупателя.
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаСписанияРезервов Из ТабРезерв Цикл
		
		Если СтрокаСписанияРезервов.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаСписанияРезервов.ЗаказПокупателя) Тогда
			МассивНаУдаление.Добавить(СтрокаСписанияРезервов);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого Элемент Из МассивНаУдаление Цикл
		ТабРезерв.Удалить(Элемент);
	КонецЦикла;	
	
	ТабРезерв.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
	
	Возврат ТабРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСписаниеИзРезерва()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	// Формирование движений по регистру "Учет продаж и себестоимости".
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам
		);
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоУслугам
		);
	КонецЕсли;	
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ДатаДока   = Дата;
	
	
	// Проводки по реализации товаров
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Реализация товаров";
			Проводка.НомерЖурнала    = "";
			
			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда	
				Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СтоимостьНУ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Проводки по реализации услуг
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		 
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл

			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Оказание услуг";
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда	
				Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СтоимостьНУ);
			КонецЕсли;
			

		КонецЦикла;
	КонецЕсли;

	// Проводки по передачи тары
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = "Передача возвратной тары";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда	
			Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СтоимостьНУ);
		КонецЕсли;

	КонецЦикла;

	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ);
	
	
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	Если СтруктураПараметровЗачетАванса <> Ложь тогда
		
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР, ПроводкиБУ, мВалютаРегламентированногоУчета, Истина);
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		
		// Проверка остатков при оперативном проведении.
		Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
			
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		
		// Проверка остатков при оперативном проведении.
		Движения.ТоварыКПередачеОрганизаций.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеОрганизаций, СтруктТаблицДокумента);
			
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",      Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
	Для Каждого СтрокаТоваров Из ТаблицаПоТоварамКопия Цикл
		Если СтрокаТоваров.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
			СтрокаТоваров.СчетУчетаБУ             = СтрокаТоваров.ПринятыеСчетУчетаБУ;
			СтрокаТоваров.ПереданныеСобственныеБУ = СтрокаТоваров.ПереданныеПринятыеБУ;
			СтрокаТоваров.НалоговоеНазначение     = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	
	Если Не Отказ Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКопия);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизацийРегл, СтруктТаблицДокумента);
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
		
	
	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
		ТабИмен = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварамКопия, ТабИмен, "ПереданныеСобственныеБУ", "СчетУчетаБУ");
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКопия);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизацийРегл, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварамКопия, ТабИмен);
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, "ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус4");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента,      "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;		
		Иначе
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;	
		
		// Если резервирование под заказ - заказ партии
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			Строка.ЗаказПартии = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,                 "Организация");

	Если     СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда

		Для каждого Строка Из ТаблицаДвижений Цикл

			СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);

			Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
			Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
			Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

			Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;

		КонецЦикла;

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Для каждого Строка Из ТаблицаДвижений Цикл

			СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);

			Строка.КорСчетБУ         = СтрокаТЧ.ПереданныеСобственныеБУ;
			Строка.ПринятыеКорСчетБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
			
			Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция     ,"ДопустимыйСтатус3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		СтрокаТЧ = ТаблицаПоТаре.Получить(Строка.НомерСтроки);
		Строка.ЗаказПартии = СтрокаТЧ.ЗаказПокупателя;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
  	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация            , "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТаре.Получить(Строка.НомерСтроки);

		Строка.СтоимостьПоступлениеБУ  = СтрокаТЧ.ПроводкаСумма;
		
		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
		Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

		Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл

// Формирование движений по регистру "Списанные товары".
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаЗаказов = ТаблицаПоТоварам.ВыгрузитьКолонку("ЗаказПокупателя");
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам),
		ТаблицаДвижений,
		Истина);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары,   	  "ВидТабличнойЧасти");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам, "ВедениеУчетаПоПроектам");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	Если Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");
		
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Данные для регл учета (НДС)
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		ТаблицаПоТаре,
		ТаблицаДвижений,
		Истина);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Тара, "ВидТабличнойЧасти");
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента", ТаблицаПоТоварам.Количество() + 1);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена", "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)
	
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"             , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетУчетаБУ"                      , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ"              , "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеБУ"          , "ПереданныеСобственныеБУ");
 	СтруктураПолей.Вставить("ПереданныеПринятыеБУ"             , "ПереданныеПринятыеБУ");
 	СтруктураПолей.Вставить("Забалансовый"                     , "СчетУчетаБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПринятыеЗабалансовый"             , "ПринятыеСчетУчетаБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПереданныеПринятыеЗабалансовый"   , "ПереданныеПринятыеБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПереданныеСобственныеЗабалансовый", "ПереданныеСобственныеБУ.Забалансовый");
 	СтруктураПолей.Вставить("СхемаРеализации"                  , "СхемаРеализации");
 	СтруктураПолей.Вставить("СчетДоходовБУ"                    , "СхемаРеализации.СчетДоходов");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ1"               , "СхемаРеализации.СубконтоДоходов1");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ2"               , "СхемаРеализации.СубконтоДоходов2");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ3"               , "СхемаРеализации.СубконтоДоходов3");
 	СтруктураПолей.Вставить("СчетРасходовБУ"                   , "СхемаРеализации.СчетСебестоимости");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ1"              , "СхемаРеализации.СубконтоСебестоимости1");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ2"              , "СхемаРеализации.СубконтоСебестоимости2");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ3"              , "СхемаРеализации.СубконтоСебестоимости3");
	
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	       , "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       	   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  	   , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"  	   		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей)
	
 	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
 	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");

 	СтруктураПолей.Вставить("СхемаРеализации"           , "СхемаРеализации");
 	СтруктураПолей.Вставить("СчетДоходовБУ"             , "СхемаРеализации.СчетДоходов");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ1"        , "СхемаРеализации.СубконтоДоходов1");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ2"        , "СхемаРеализации.СубконтоДоходов2");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ3"        , "СхемаРеализации.СубконтоДоходов3");
 	СтруктураПолей.Вставить("СчетРасходовБУ"            , "СхемаРеализации.СчетСебестоимости");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимости1");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимости2");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимости3");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"	    , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"  	    , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");

 	СтруктураПростыхПолей.Вставить("СтавкаНДС"              , Перечисления.СтавкиНДС.НеНДС);
 	СтруктураПростыхПолей.Вставить("НДС"                    , 0);
 	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"           , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
КонецПроцедуры

// Проверяет, что размещение указанное в табиличной части, на Оптовый склад.
//
// Параметры:
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части
//  Отказ             - флаг отказа в проведении.
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоСкладОптовый(ТаблицаЗначений, Отказ, Заголовок)
	Перем ПредставлениеТабличнойЧасти;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) И СтрокаТаблицы.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
			Если ПредставлениеТабличнойЧасти = неопределено Тогда
				ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Товары"].Представление();
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+ СтрокаТаблицы.НомерСтроки +
				" табличной части Оборудование: содержится склад с видом не равный ""Оптовый"". Такого быть не должно!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПроверитьЧтоСкладОптовый()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, мРеквизитыЗаполненныеПоОснованию);
		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);
		
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#Если Клиент Тогда
			Если НЕ ЗначениеЗаполнено(Склад) И НЕ мУказаниеСкладовВТЧ И ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ВвестиЗначение(Склад, "Выберите склад", Тип("СправочникСсылка.Склады"));
			КонецЕсли;
		#КонецЕсли
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ (ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
			И ДоговорКонтрагента.ВедениеВзаиморасчетов = 
			Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
			Сделка = Основание;
		Иначе
			Сделка = Основание.ЗаказПокупателя;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			
			// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары, Основание);
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ВозвратнаяТара, Основание);
			ЗаполнитьУслугиПоОстаткамУпр();
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			СкопироватьТовары(Основание);
			СкопироватьВозвратнуюТару(Основание);
			СкопироватьУслуги(Основание);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		Организация   = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидПередачи   = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			Склад = Основание.СкладОрдер;
		ИначеЕсли ТипЗнч(Основание.СкладОрдер)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Склад = Основание.СкладОрдер.Склад;
		КонецЕсли;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;
		
		МассивЗаказов = Неопределено;
		//возможно это межфирменная продажа
		ОрганизацияКонтрагента = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
		Если  ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда
			Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
			Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		Иначе
			
			#Если КЛИЕНТ Тогда
				// Выбор контрагента/договора
				СтруктТабЧастей = Новый Структура;
				СтруктТабЧастей.Вставить("Товары",         "Заказ");
				СтруктТабЧастей.Вставить("ВозвратнаяТара", "Заказ");
				
				СтруктПараметры = Новый Структура;
				СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
				
				Если  Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
					ЗаказыВТабЧасти = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
					СтруктПараметры.Вставить("ЗаказВТабЧасти",
					ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации
					ИЛИ ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
					
					РезультатВыбораЗаказа = РаботаСДиалогами.ВыбратьКонтрагентДоговорЗаказИзДокументаОснования(Основание, СтруктПараметры);
					Если РезультатВыбораЗаказа.ВыборСделан Тогда
						Контрагент         = РезультатВыбораЗаказа.Контрагент;
						ДоговорКонтрагента = РезультатВыбораЗаказа.Договор;
						МассивЗаказов      = РезультатВыбораЗаказа.Заказ;
						Если МассивЗаказов.Количество() = 1 Тогда
							Сделка         = МассивЗаказов[0];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			#Иначе
				Контрагент         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель");
				ОсновнойДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
				Если (ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
					или ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					и ОсновнойДоговорКонтрагента.Организация = Организация Тогда
					ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		// ТипЦен.
		ТипЦен = ДоговорКонтрагента.ТипЦен;
		
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;
		
		// Флаги включения налогов.
		УчитыватьНДС = Истина;
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			
			// Если цены выбранного типа расчетные, то флаги включения налогов надо брать из базовой цены.
			ВремТипЦен       = ?(ТипЦен.Рассчитывается, ТипЦен.БазовыйТипЦен, ТипЦен);
			СуммаВключаетНДС = ВремТипЦен.ЦенаВключаетНДС;
			
		Иначе
			// Заполним значениями по умолчанию (не заполнен ТипЦен).
			СуммаВключаетНДС = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "СуммаНеВключаетНДС");
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			
			// Заполним табличные части по документу основанию (Поступление товаров);
			// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Товары", МассивЗаказов);
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Оборудование", МассивЗаказов);
			КонецЕсли;
			ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Основание, МассивЗаказов);
			
		КонецЕсли;
		
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, мРеквизитыЗаполненныеПоОснованию);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,,мРеквизитыЗаполненныеПоОснованию);
		
		ИспользоватьНаработку 			= Основание.ИспользоватьНаработку;
		ИспользоватьНаправленияВыпуска 	= Основание.ИспользоватьНаправленияВыпуска;
		
		// Заполнение таб.части
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			Если ИспользоватьНаработку И ТекСтрокаПродукция.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск Тогда
				Продолжить;
			КонецЕсли;
			Если ИспользоватьНаправленияВыпуска И ТекСтрокаПродукция.НаправлениеВыпуска <> Перечисления.НаправленияВыпуска.НаСклад Тогда
				Продолжить; // Выпуск в другое подразделение
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПродукция);
			
			Если ЗначениеЗаполнено(НоваяСтрока.ЗаказПокупателя) Тогда
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, ЭтотОбъект);
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Реализация");

		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипОснования = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.РеализацияТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", , мРеквизитыЗаполненныеПоОснованию);
	
	УстановитьРуководителяИГлавногоБухгалтера();
	УстановитьОтветственногоПоСкладу();
	
	ОбработкаЗаполненияРегл(Основание);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
			
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
		И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Услуги.Очистить();
		
	КонецЕсли;
	// Если договор внешнеэкономический, то надо почистить закладку "ВозвратнаяТара".
	Если ВозвратнаяТара.Количество() > 0
		И ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда

		ВозвратнаяТара.Очистить();

	КонецЕсли;

	// Если взаиморасчеты по договору не ведутся по расчетным документам, то надо почистить закладку "ДокументыРасчетовСКонтрагентом".
	Если ДокументыРасчетовСКонтрагентом.Количество() > 0 И Не ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ДокументыРасчетовСКонтрагентом.Очистить();
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование", "Товары"));
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	// В этом случае почистим в табличных частях поле СпособСписанияОстаткаТоваров.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
		
		Сделка = Неопределено;
		
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = "";
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = "";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Услуги Цикл
			СтрокаТаблицы.ЗаказПокупателя = Неопределено;
		КонецЦикла;
		
	//для брака способ списания всегда - со склада
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Товары"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Возвратная тара"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Необходимо, чтобы качество обязательно было "Новый"
		КачествоНовый = Справочники.Качество.Новый;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
				СтрокаТаблицы.Качество = КачествоНовый;
			КонецЕсли;
		КонецЦикла
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "Реализация");
	Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСкладыВТЧ();
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Реализация",
			Дата,
			Организация,
			Товары,               	// ТабличнаяЧастьТовары
			ВозвратнаяТара,       	// ТабличнаяЧастьВозвратнаяТара
			Услуги,               	// ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено  			// ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;
	
	Если ЕстьАвансДо01042011 Тогда
		Если НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			СуммаВДВРПоАвансуДо01042011	= СуммаДокумента + ВозвратнаяТара.Итог("Сумма");
			Если ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
				СуммаВДВРПоАвансуДо01042011	= 9999999999.99;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
	КонецЕсли;
	//*** AL	
	Если Товары.Количество()> 0		Тогда
		ЭтотОбъект.ИтогоКоличествоТовара=Товары.Итог("Количество");
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента, Заголовок)

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете)
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Отказ, Заголовок);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента, Загаловок) Экспорт

	УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаУпр) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента, Загаловок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуруШапкиСведенияОСчетахРасчетов(ЭтотОбъект, СтруктураШапкиДокумента);
	
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	
	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                                , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                                , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                  , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "СхемаНалоговогоУчета"                       , "СхемаНалоговогоУчета");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                                , "СделкаВидОперации");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
 	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                                , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"			      , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                          , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КоличествоДок"                       , "Количество");
	СтруктураПолей.Вставить("Качество"                            , "Качество");
	СтруктураПолей.Вставить("Склад"                               , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                           , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Сумма"                               , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                            , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                                 , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                              , "СуммаНДС");	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"          , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                   , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"                , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"         , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"         , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                          , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры"                     , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПокупателя"                     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"        , "Количество");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"          , "ПринадлежностьНоменклатуры");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей=Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");	
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
//<
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
//>
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
 	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                 , "Склад.ВидСклада");	
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей);
	
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	//***
	Если ЭтотОбъект.ТипЦен=Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() И ЭтотОбъект.Товары.Количество()>0  тогда  //*** AL Наташа Куриченко  13-05-14
		 Предупреждение("Документ не может быть проведен т.к. не выставлен тип цен!");
		 Отказ=Истина;
		 возврат;
	КонецЕсли;
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	ПроводитьПоПартиям = ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов 
		                     ИЛИ ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух 
							 ИЛИ ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения, Отказ);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	
	ПроводитьПоВзаиморасчетам = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) 
								ИЛИ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
													
													
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	//Проверим счета учета
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", 			ТаблицаПоУслугам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура());
	
	// Движения по документу
	Если Не Отказ Тогда
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, ТаблицаПоУслугам, СтруктураШапкиДокумента);

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
		ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);
	
	//+++al 20160120
	Если ЭтотОбъект.Контрагент.Код="000000889" или 
		 ЭтотОбъект.Контрагент.Код="000001647" или
		 ЭтотОбъект.Контрагент.Код="000001652" тогда
		ОтправитьФайлВасилевскому();
	КонецЕсли;//---al 20160120
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
	
	Если ЗначениеЗаполнено(ОсновноеПодразделение) Тогда
		Подразделение = ОсновноеПодразделение;
	КонецЕсли;
	
	//Если в копируемом документе было право отпуска без контроля взаиморасчетов, то в новом документе это право нужно давать явно.
	ОтключитьКонтрольВзаиморасчетов = Ложь;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ОбъектКопирования.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в бухгалтерском учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Выбытие);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
	// В случае передачи товаров комиссионеру, движение по продажам осуществит документ "Отчет комитенту о продажах" 
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СтруктураПараметров.Вставить("ЕстьПродажа", Ложь);
	КонецЕсли;
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПродажиНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПродаж);
	
	// ТОВАРЫ...
	МассивТаблицТоваров = Новый Массив();	
	МассивТаблицТоваров.Добавить(ТаблицаПоТоварам);
	МассивТаблицТоваров.Добавить(ТаблицаПоУслугам);	
	СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
		
	// ТАРА
	МассивТаблицТары = Новый Массив();
	МассивТаблицТары.Добавить(ТаблицаПоТаре);
	СтруктураПараметров.Вставить("ТаблицыТары", МассивТаблицТары);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
		
КонецПроцедуры // 							  

//
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		И Дата < '20110101' Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат", "ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговые обязательства: отгрузка";
			Проводка.НомерЖурнала               = "";

			Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда	
					Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				    Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.ПроводкиСуммаНДСРегл);
				КонецЕсли;
				
			Иначе	
				// с 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", СтрокаТаблицы.СделкаРегл);
			КонецЕсли;

			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Цена", "Цена");

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)

	СтруктураПолей.Вставить("СхемаРеализации"          , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"            , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"       , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"       , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"       , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"           , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"      , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"      , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"      , "СхемаРеализации.СубконтоСебестоимости3");
	
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"      , "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат"       , "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат"  , "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат" 		  , "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	// Склад проверяем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	// и склад не в ТЧ.
	Если мУказаниеСкладовВТЧ
		ИЛИ (Товары.Количество() + ВозвратнаяТара.Количество() = 0) Тогда
		//Не требуется указание склада в шапке
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Склад");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
КонецПроцедуры

//************************************************************************************************************* AL
Функция ПечатьДекларации () Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	КоличествоЗаявки,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|   Порции КАК Порции
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|       Порции КАК Порции,
	|		СУММА(КоличествоЗаявки)    КАК КоличествоЗаявки,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|    	Порции
	|	) КАК ВложенныйЗапросПоТоварам	";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Заявка";
    //***//
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
    ПараметрыПечати(ТабДокумент);
    //***
    
	Макет = ПолучитьМакет("Декларация");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДата="№  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.ПредставлениеПоставщика=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование())+", м.Харкiв, вул. Роганська, 151.";
	ТабДокумент.Вывести(ОбластьМакета);
    ВыводитьКоды = Ложь;
	//Сообщить("1");
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	//Сообщить("3");
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		//Сообщить("4");
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьДанных.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар);
		ОбластьДанных.Параметры.ЕдИзм = ВыборкаСтрокТовары.ЕдиницаИзмерения ;
		ОбластьДанных.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
		ОбластьДанных.Параметры.ДатаИзготовления=Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
		ОбластьДанных.Параметры.ОптоваяЦена=Формат(?(ЭтотОбъект.СуммаВключаетНДС=Истина,ВыборкаСтрокТовары.Цена*0.83333333,ВыборкаСтрокТовары.Цена),"ЧДЦ=3; ЧГ=0");  ////***AL28.06.2012 15:45:35  АШАН
		//ОбластьДанных.Параметры.ОптоваяЦена=Формат(ВыборкаСтрокТовары.Цена*0.83333333,"ЧДЦ=3; ЧГ=0");  ////***AL17.01.2012 15:45:35  Вика Резвая
		ТабДокумент.Вывести(ОбластьДанных);
	КонецЦикла;
 
	ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	//ОбластьМакета.Параметры.Заполнить(Шапка);	
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(ЭтотОбъект.Организация,ЭтотОбъект.Дата);
	//***170206
	Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
		ОбластьМакета.Параметры.Директор  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.РуководительФИО.Фамилия, Руководители.РуководительФИО.Имя, Руководители.РуководительФИО.Отчество, Истина);// Кратко
    КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеПокупателя =Контрагент.Наименование; 
	ОбластьМакета.Параметры.ПредставлениеНАкладной = "Накладна №  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
		
КонецФункции // ПечатьДекларации()

Функция ПечатьСпецНакладной()Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,

	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка); //
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия  , Порции КАК Порции
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,Порции КАК Порции,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,Порции 
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НомерСтроки,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	ПараметрыПечати(ТабДокумент);
	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать)+" ЕГРПОУ "+СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ);
	//*** НАЦІОНАЛЬНИЙ АЕРОКОСМІЧНИЙ УНІВЕРСИТЕТ ІМ, М.Є. ЖУКОВСЬКОГО "Харківський авіаційний інститут" 
	Если ЭтотОбъект.Контрагент.Код="000002404" тогда
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,МФО,/,ФактическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

    //***AL01.09.2011 11:01:15  Для савчука контрагент пивденна зализныця ГОС ПЗ 
	//СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,АдресДоставки,";
	Если СокрЛП(Шапка.Покупатель.Код)="100001800" Тогда //ранее 000001800 пивденна зализниця
		СписокДополнительныхПараметров = "АдресДоставки,";
		МассивСтруктурСтрок = Новый Массив();
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетНаОплатуПокупателю.Дата,
			|	СчетНаОплатуПокупателю.Номер,
			|	СчетНаОплатуПокупателю.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
			|		ПО РеализацияТоваровУслуг.Ссылка = СчетНаОплатуПокупателю.Отгрузка
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
			
			Запрос.УстановитьПараметр("ТекущийДокумент",ЭтотОбъект.Ссылка);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Количество()>0  Тогда
				Выборка.Следующий() ;	
				СтрокаФактуры=" № "+СокрЛП(Выборка.Номер)+" вiд "+СокрЛП(Выборка.Дата);
			КонецЕсли;
	Иначе 
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,АдресДоставки,";
	КонецЕсли;

	// Выводим дополнительно информацию об адресе доставки, договоре и сделке	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) или ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
		
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		//ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар); //+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика), "", "(" + ВыборкаСтрокТовары.Характеристика +")")+ ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Порции), "", "(" + ВыборкаСтрокТовары.Порции+")");
		ТабДокумент.Присоединить(ОбластьДанных);

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) И НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка)) * (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка);
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
        //ВсегоВес       = ВсегоВес    + ВыборкаСтрокТовары.Количество;
		ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = формат(Сумма,"ЧЦ=10; ЧДЦ=2; ЧГ=0");
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = формат(СуммаНДС,"ЧЦ=10; ЧДЦ=2; ЧГ=0");
		//ЗаполнениеДокументов.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = формат(Сумма + СуммаНДС,"ЧЦ=10; ЧДЦ=2; ЧГ=0");
			//ЗаполнениеДокументов.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = формат(СуммаТара,"ЧЦ=10; ЧДЦ=2; ЧГ=0");
		//ЗаполнениеДокументов.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьСуммы);	
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + ",   весом " + ВсегоВес+ " кг.,"+
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + формат(СуммаКПрописи,"ЧЦ=10; ЧДЦ=2; ЧГ=0")
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + формат(СуммаТара,"ЧЦ=10; ЧДЦ=2; ЧГ=0")) + ".";
	
	
	//ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
	//										 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
	//										 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ЗаполнениеДокументов.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
	//									   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);
//		Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		//ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
//		КонецЕсли; 
	

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	// Отпуск товара произвел
	Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ОбластьМакета.Параметры.Выписал = Шапка.ОтпускПроизвел.Наименование;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции 

// Функция формирует табличный документ с печатной формой накладной,
// разработанной  AL	
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной пердочтавленной контрагентом Фоззи
//
Функция ПечатьФоззи()Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	Ответственный.ФизЛицо КАК ФизЛицо,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия, Порции КАК Порции,АртикулВК КАК АртикулВК
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,Порции КАК Порции,
	|		АртикулВК КАК АртикулВК,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,Порции,АртикулВК
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НомерСтроки,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	0,
	|	NULL,
	|	NULL,NULL,NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяФоззи";
    
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    

	Макет = ПолучитьМакет("НакладнаяФОЗЗИ");

	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,НомерСчета,МФО,/,ИНН,НомерСвидетельства,/,ЮридическийАдрес",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя	= формированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,НомерСчета,МФО,/,ИНН,НомерСвидетельства,/,ЮридическийАдрес",,КодЯзыкаПечать);
	//Сообщить("КодЯзыкаПечать "+КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.АдресДорставки	=ЭтотОбъект.АдресДоставки;
	ОбластьМакета.Параметры.Договор			="Договiр №"+СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Номер)+" вiд "+Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy")+" р.";
	ТабДокумент.Вывести(ОбластьМакета);
	
	//ОбластьМакета = Макет.ПолучитьОбласть("Основание");
	//	ОбластьМакета.Параметры.ЗаказМетро = СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
	//	ОбластьМакета.Параметры.НомерДоговора = СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Номер);
	//	ОбластьМакета.Параметры.ДатаДоговора  = Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy");
	//ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "НАКЛАДНАЯ № "+ЭтотОбъект.Номер + " вiд " + Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);

	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.НомерСтроки		= ВыборкаСтрокТовары.НомерСтрокиТЧ;
		ОбластьМакета.Параметры.Артикул			= ВыборкаСтрокТовары.АртикулВК;
		//ОбластьМакета.Параметры.Товар           = СокрЛП(ВыборкаСтрокТовары.Товар)+" "+СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
        ОбластьМакета.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика), "", " " + ВыборкаСтрокТовары.Характеристика +" ")+ ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Порции), "", "(" + ВыборкаСтрокТовары.Порции+")");
		ОбластьМакета.Параметры.ЕдиницаИзмерения= ВыборкаСтрокТовары.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Количество      = ВыборкаСтрокТовары.Количество;
		
        Если ВыборкаСтрокТовары.АвтоматическаяСкидка<>0 тогда
            ОбластьМакета.Параметры.Цена            = ?(ВыборкаСтрокТовары.Количество<>0,Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5/ВыборкаСтрокТовары.Количество, ВыборкаСтрокТовары.Сумма/ВыборкаСтрокТовары.Количество),"ЧЦ=10; ЧДЦ=2"),"");
        Иначе
            ОбластьМакета.Параметры.Цена            = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");    
        КонецЕсли;
        ОбластьМакета.Параметры.Сумма           = Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма),"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		Сумма          = Сумма       + ?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма);
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего=Сумма;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС=СуммаНДС;
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести ИтогоДополнительно
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоДополнительно");
	ОбластьМакета.Параметры.Сумма=СуммаНДС+Сумма;
	ТабДокумент.Вывести(ОбластьМакета);
	
	

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи=СуммаНДС+Сумма;
	
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всього  на суму ";
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + "У т.ч. ПДВ: "  + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалДокументыРМК");
	Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ОбластьМакета.Параметры.Выписал = Шапка.ОтпускПроизвел.Наименование;
	Иначе 
	//	Юзер=глЗначениеПеременной("глТекущийПользователь");
	//	Если СокрЛП(Юзер)="Саулевич М.Г." тогда
	//		Юзер="Овчаренко Т.М.";
	//	КонецЕсли;	
	//	ОбластьМакета.Параметры.Выписал = Юзер;
		Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Шапка.ФизЛицо), "КтоВыписалДокументыРМК");	
		Если не ЗначениеЗаполнено(Подмена) тогда
			ОбластьМакета.Параметры.Выписал = глЗначениеПеременной("глТекущийПользователь");
		Иначе
			ОбластьМакета.Параметры.Выписал = Подмена;
		КонецЕсли;	
	КонецЕсли;
	//ФизЛицо=Шапка.ФизЛицо;
	//Если ФизЛицо.Код="000000371" тогда
	//	ФизЛицо=Справочники.ФизическиеЛица.НайтиПоКоду("000000656");//*** Овчаренко Тетяна Миколаївна 
	//КонецЕсли;	
	//
	//ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,ФизЛицо, Шапка.Дата);
	Если не ЗначениеЗаполнено(Подмена) тогда
		Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Шапка.ФизЛицо), "КтоВыписалДокументыРМК");
		Если не ЗначениеЗаполнено(Подмена)  тогда
				Подмена=Шапка.ФизЛицо;
		КонецЕсли;
	КонецЕсли;
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Подмена, Шапка.Дата);
	
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
	?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
	?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
	?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // ПечатьФоззи()
 
// Функция формирует табличный документ с печатной формой накладной,
// разработанной  AL	добавлены коды покупателя
Функция ПечатьОмега()Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	Ответственный.ФизЛицо КАК ФизЛицо,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия, Порции КАК Порции,АртикулВК КАК АртикулВК,ШтрихКод КАК ШтрихКод
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(ВЫБОР КОГДА ЕСТЬNULL(НомерМетроСтроки,0)=0 ТОГДА НомерСтроки ИНАЧЕ ЕСТЬNULL(НомерМетроСтроки,0) КОНЕЦ ) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,Порции КАК Порции,
	|		АртикулВК КАК АртикулВК,
	|		ШтрихКод  КАК ШтрихКод,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,Порции,АртикулВК,ШтрихКод
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяФоззи";
    
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
	Макет = ПолучитьМакет("НакладнаяОмега");

	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,НомерСчета,МФО,/,ИНН,НомерСвидетельства,/,ЮридическийАдрес",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя	= формированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,НомерСчета,МФО,/,ИНН,НомерСвидетельства,/",,КодЯзыкаПечать)+"," +СокрЛП(ЭтотОбъект.АдресДоставки);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "НАКЛАДНАЯ № "+ЭтотОбъект.Номер + " вiд " + Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);

	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
    ОбластьМакета.Параметры.Сумма=?(ЭтотОбъект.СуммаВключаетНДС, "Сума, грн.","Сума без ПДВ, грн."); 
    ОбластьМакета.Параметры.Цена=?(ЭтотОбъект.СуммаВключаетНДС, "Ціна, грн."," Ціна без ПДВ, грн."); 
	
	ОбластьМакета.Параметры.АртикулПокупця=?(ЭтотОбъект.Контрагент.Код="000001419" ИЛИ ЭтотОбъект.Контрагент.Код="000000797","Артикул покупця","Штрiховий код");
	ТабДокумент.Вывести(ОбластьМакета);
	

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.НомерСтроки		= ВыборкаСтрокТовары.НомерСтрокиТЧ;
		ОбластьМакета.Параметры.Артикул			= ?(ЭтотОбъект.Контрагент.Код="000001419" ИЛИ ЭтотОбъект.Контрагент.Код="000000797",ВыборкаСтрокТовары.АртикулВК,ВыборкаСтрокТовары.ШтрихКод);
		
		
		ОбластьМакета.Параметры.Товар           = ВыборкаСтрокТовары.Товар+?(СокрЛП(ВыборкаСтрокТовары.Характеристика.Наименование)="","","   - "+СокрЛП(ВыборкаСтрокТовары.Характеристика.Наименование)+" ");
		ОбластьМакета.Параметры.ЕдиницаИзмерения= ВыборкаСтрокТовары.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Количество      = Формат(ВыборкаСтрокТовары.Количество,"ЧЦ=12; ЧДЦ=3");;
        
		//***ОбластьМакета.Параметры.Цена            = Формат(ВыборкаСтрокТовары.Цена,"ЧЦ=10; ЧДЦ=2"); Сбыт И.П. Алексеенко  18-06-13
        ТекЦена=?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена,ВыборкаСтрокТовары.Цена*1.2);
        ОбластьМакета.Параметры.Цена            = Формат(?(ВыборкаСтрокТовары.АвтоматическаяСкидка=0 И ВыборкаСтрокТовары.Скидка=0,ТекЦена,ТекЦена*(100-(ВыборкаСтрокТовары.АвтоматическаяСкидка+ВыборкаСтрокТовары.Скидка))/100),"ЧЦ=10; ЧДЦ=2"); 
        
        
        //Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");
		ОбластьМакета.Параметры.Сумма           = Формат(ВыборкаСтрокТовары.Сумма,"ЧЦ=10; ЧДЦ=2");
        //Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма),"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		Сумма          = Сумма       +   ВыборкаСтрокТовары.Сумма;
        //?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма);//***31-07-13Наташа БЄ
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего=?(ЭтотОбъект.СуммаВключаетНДС, Сумма-СуммаНДС, Сумма);
    
    //Сумма;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС=СуммаНДС;
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести ИтогоДополнительно
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоДополнительно");
	ОбластьМакета.Параметры.Сумма=?(ЭтотОбъект.СуммаВключаетНДС, Сумма, Сумма+СуммаНДС) ;
    //СуммаНДС+Сумма;
	ТабДокумент.Вывести(ОбластьМакета);
	
	

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи=?(ЭтотОбъект.СуммаВключаетНДС, Сумма, Сумма+СуммаНДС);
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всього  на суму ";
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + "У т.ч. ПДВ: "  + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	мПредставительПоставщика="";
	Если ЭтотОбъект.ПредставительОрганизации=Справочники.ФизическиеЛица.ПустаяСсылка() тогда
		мПредставительПоставщика=глЗначениеПеременной("глТекущийПользователь").ФизЛицо;
	Иначе
		мПредставительПоставщика=ЭтотОбъект.ПредставительОрганизации;
	КонецЕсли;
	Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалДокументыРМК");
	Если ЗначениеЗаполнено(Подмена) тогда
		мПредставительПоставщика=Подмена;//Справочники.ФизическиеЛица.НайтиПоКоду("000000656");//*** Овчаренко Тетяна Миколаївна 
	Иначе
		Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Шапка.ФизЛицо), "КтоВыписалДокументыРМК");
		Если не ЗначениеЗаполнено(Подмена)  тогда
				Подмена=Шапка.ФизЛицо;
		КонецЕсли;
	КонецЕсли;	
	
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,мПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
	?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
	?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
	?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	ОбластьМакета.Параметры.Выписал = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // ПечатьОмега()

Функция ПечатьАШАН()Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
    "ВЫБРАТЬ
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
    |   ВложенныйЗапросПоТоварам.Номенклатура,
    |   ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
    |   ВложенныйЗапросПоТоварам.Количество,
    |   ВложенныйЗапросПоТоварам.КоличествоМест,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
    |   ВложенныйЗапросПоТоварам.Цена,
    |   ВложенныйЗапросПоТоварам.Сумма,
    |   ВложенныйЗапросПоТоварам.СуммаНДС,
    |   ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
    |   ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
    |   ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
    |   ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
    |   ВложенныйЗапросПоТоварам.Порции КАК Порции,
    |   ВложенныйЗапросПоТоварам.АртикулВК КАК АртикулВК,
    |   ВложенныйЗапросПоТоварам.ШтрихКод КАК ШтрихКод,
    |   ВложенныйЗапросПоТоварам.НомерМетроСтроки КАК НомерМетроСтроки
    |ИЗ
    |   (ВЫБРАТЬ
    |       1 КАК НомерТЧ,
    |       МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
    |       РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
    |       РеализацияТоваровУслуг.Цена КАК Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
    |       РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции КАК Порции,
    |       РеализацияТоваровУслуг.АртикулВК КАК АртикулВК,
    |       РеализацияТоваровУслуг.ШтрихКод КАК ШтрихКод,
    |       СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
    |       СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
    |       СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
    |       СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
    |       РеализацияТоваровУслуг.НомерМетроСтроки КАК НомерМетроСтроки
    |   ИЗ
    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
    |   ГДЕ
    |       РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
    |   
    |   СГРУППИРОВАТЬ ПО
    |       РеализацияТоваровУслуг.Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
    |       РеализацияТоваровУслуг.Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС,
    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
    |       РеализацияТоваровУслуг.СерияНоменклатуры,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции,
    |       РеализацияТоваровУслуг.АртикулВК,
    |       РеализацияТоваровУслуг.ШтрихКод,
    |       РеализацияТоваровУслуг.НомерМетроСтроки) КАК ВложенныйЗапросПоТоварам
    |
    |УПОРЯДОЧИТЬ ПО
    |   ВложенныйЗапросПоТоварам.НомерМетроСтроки";
		
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяАШАН";
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    

	Макет = ПолучитьМакет("НакладнаяАШАН");

	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,Телефоны,/,НомерСчета,Банк,МФО,/,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,/,ЮридическийАдрес",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПокупателя	= формированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,Телефоны,/,НомерСчета,Банк,МФО,/,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,/,ЮридическийАдрес",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя	= формированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,Телефоны,/,НомерСчета,Банк,МФО,/,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,/, ",,КодЯзыкаПечать)+Символы.ПС+"Адреса доставки: "+СокрЛП(ЭтотОбъект.АдресДоставки);
	
	//Сообщить("КодЯзыкаПечать "+КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	//	ОбластьМакета.Параметры.ЗаказМетро = СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
		ОбластьМакета.Параметры.НомерЗаказа= СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
	//	ОбластьМакета.Параметры.ДатаДоговора  = Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);

	
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка 	= "ВИДАТКОВА НАКЛАДНА № "+ЭтотОбъект.Номер ;
		ОбластьМакета.Параметры.ДатаНакладной 	= " вiд " + Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);

	//Суффикс = "";
	//Если Шапка.УчитыватьНДС Тогда
	//	Если Шапка.СуммаВключаетНДС Тогда
	//		Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
	//	Иначе	
	//		Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
	//	КонецЕсли;
	//	Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	//КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.НомерСтроки		= ВыборкаСтрокТовары.НомерМетроСтроки;//***НомерСтрокиТЧ
		ОбластьМакета.Параметры.Артикул			= ВыборкаСтрокТовары.АртикулВК;
		ОбластьМакета.Параметры.ШК				= ВыборкаСтрокТовары.ШтрихКод;
		ОбластьМакета.Параметры.Товар           = ВыборкаСтрокТовары.Товар;
		ОбластьМакета.Параметры.ЕдиницаИзмерения= ВыборкаСтрокТовары.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Количество      = ВыборкаСтрокТовары.Количество;
		ТекЦена=?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5,ВыборкаСтрокТовары.Цена);
		ОбластьМакета.Параметры.Цена            = Формат(?(ВыборкаСтрокТовары.АвтоматическаяСкидка=0 И ВыборкаСтрокТовары.Скидка=0,ТекЦена,ТекЦена*(100-(ВыборкаСтрокТовары.АвтоматическаяСкидка+ВыборкаСтрокТовары.Скидка))/100),"ЧЦ=10; ЧДЦ=2"); 
		
		//ОбластьМакета.Параметры.Цена            = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");
		ОбластьМакета.Параметры.Сумма           = Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма),"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		Сумма          = Сумма       + ?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма);
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего=Сумма;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС=СуммаНДС;
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести ИтогоДополнительно
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоДополнительно");
	ОбластьМакета.Параметры.Сумма=СуммаНДС+Сумма;
	ТабДокумент.Вывести(ОбластьМакета);
	
	

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи=СуммаНДС+Сумма;
	
    //ОбластьМакета.Параметры.ИтоговаяСтрока 	= "Всього  на суму ";
    //ОбластьМакета.Параметры.СуммаПрописью 	= ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ИтоговаяСтрока 	= НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + НСтр("ru=',   весом ';uk=', вагою '",КодЯзыкаПечать) + ВсегоВес+ " кг.,";
    //"Всього   на суму ";
	ОбластьМакета.Параметры.СуммаПрописью 	= "Всього на суму " +ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать);
    
    
	ОбластьМакета.Параметры.ПДВ				=  "ПДВ: "  +Формат(СуммаНДС,"ЧЦ=12; ЧДЦ=2; ЧРД=.; ЧГ=0")+" грн.";
	//ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
    мПредставительПоставщика="";
    Если ЭтотОбъект.ПредставительОрганизации=Справочники.ФизическиеЛица.ПустаяСсылка() тогда
        мПредставительПоставщика=глЗначениеПеременной("глТекущийПользователь").ФизЛицо;
    Иначе
        мПредставительПоставщика=ЭтотОбъект.ПредставительОрганизации;
	КонецЕсли;
	Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалДокументыРМК");
	Если ЗначениеЗаполнено(Подмена) тогда
		мПредставительПоставщика=Подмена;//Справочники.ФизическиеЛица.НайтиПоКоду("000000656");//*** Овчаренко Тетяна Миколаївна 
	КонецЕсли;	
	
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,мПредставительПоставщика, Шапка.Дата);
    ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	ОбластьМакета.Параметры.Выписал = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // ПечатьАШАН()

Функция ПечатьТН() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий

	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|   Порции КАК Порции,
	|	АртикулВК КАК АртикулВК
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|       Порции КАК Порции,
	|		АртикулВК КАК АртикулВК,	
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|    	Порции,АртикулВК 
	|	) КАК ВложенныйЗапросПоТоварам	";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТН";
	
	Макет = ПолучитьМакет("ТранспортнаяНакладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДата="№  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.АдресПоставщика="м.Харкiв, вул. Роганська, 151.";
	ОбластьМакета.Параметры.ОКПОПоставщика="34389679";
	ОбластьМакета.Параметры.Поставщик=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование());
	ОбластьМакета.Параметры.ТелефонПоставщика="(057) 766-88-78";
	
	
	ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ОбластьМакета.Параметры.ЗаказПокупателя		= ЭтотОбъект.Сделка;
	ОбластьМакета.Параметры.АдресаДоставки		= ЭтотОбъект.АдресДоставки;
	ОбластьМакета.Параметры.ОКПОПокупателя		= ЭтотОбъект.Контрагент.КодПоЕДРПОУ;
	
	ЗапросИнфо = Новый Запрос;
	ЗапросИнфо.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	ЗапросИнфо.УстановитьПараметр("Вид","Юридический адрес контрагента" );
	ЗапросИнфо.УстановитьПараметр("Вид1","Телефон контрагента");
	
	ЗапросИнфо.Текст =	"	ВЫБРАТЬ
	| КонтактнаяИнформация.Объект,
	| КонтактнаяИнформация.Тип,
	| КонтактнаяИнформация.Вид,
	| КонтактнаяИнформация.Представление КАК Представление
	| ИЗ
	| РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	| ГДЕ
	| КонтактнаяИнформация.Объект = &Объект
	| И (КонтактнаяИнформация.Вид.Наименование = &Вид
	| 			ИЛИ КонтактнаяИнформация.Вид.Наименование = &Вид1)
	| УПОРЯДОЧИТЬ ПО 
	| КонтактнаяИнформация.Тип.Порядок";
	
	
	Если не ЗапросИнфо.Выполнить().Пустой() тогда
		ЗапросИнфо= ЗапросИнфо.Выполнить().Выгрузить();
		СтрокаИнфо=1;
		Для каждого ВыборкаСтрокИнфо из ЗапросИнфо Цикл 
			Если СтрокаИнфо=1 тогда
				ОбластьМакета.Параметры.АдресПокупателя		= ВыборкаСтрокИнфо.Представление;
			Иначе
				ОбластьМакета.Параметры.ТелефонПокупателя	= ВыборкаСтрокИнфо.Представление;
			КонецЕсли;
			СтрокаИнфо=СтрокаИнфо+1;
	    КонецЦикла;
	КонецЕсли;
	//***AL 100720
	//ОбластьМакета.Параметры.ЗаказПокупателя=Шапка.Комментарий;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВыводитьКоды = Ложь;
	//Сообщить("1");
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьДанных.Параметры.НомерСтроки 	= ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		
		СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		
		
		ОбластьДанных.Параметры.Товар 			= СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+", "+СокрЛП(ВыборкаСтрокТовары.Порции)+")");
		ОбластьДанных.Параметры.ЕдИзм 			= ВыборкаСтрокТовары.ЕдиницаИзмерения ;
		ОбластьДанных.Параметры.Артикул=ВыборкаСтрокТовары.АртикулВК;
		ОбластьДанных.Параметры.Количество		= ВыборкаСтрокТовары.Количество;
		ТабДокумент.Вывести(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
	КонецЦикла;
 
	ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	
	ОбластьМакета.Параметры.ВсегоКол=Формат(ВсегоКоличество,"ЧДЦ=0; ЧГ=0")+" кг. (вага)"; 
	//ОбластьМакета.Параметры.ПредставлениеНАкладной = "Накладна №  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьДекларации()

Функция ПечатьТНМЕТРО () Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий,
	| 	Автомобиль
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|   Порции КАК Порции, АртикулВК КАК АртикулВК
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерМетроСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|       Порции КАК Порции,
	|		АртикулВК КАК АртикулВК,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|    	Порции,АртикулВК
	|	) КАК ВложенныйЗапросПоТоварам	УПОРЯДОЧИТЬ ПО  НомерСтрокиТЧ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТНМЕТРО";
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    

	Макет = ПолучитьМакет("ТранспортнаяНакладнаяМЕТРО");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерНакладной=СокрЛП(ЭтотОбъект.Номер);
	ОбластьМакета.Параметры.ДатаНакладной=Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Поставщик=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование());
	ОбластьМакета.Параметры.АдресПоставщика="вул. Роганська, 151.";
	ОбластьМакета.Параметры.ГородИндексПоставщика="м.Харкiв 61172";
	ОбластьМакета.Параметры.АдресДоставки=СокрЛП(ЭтотОбъект.АдресДоставки);
	
	//ОбластьМакета.Параметры.ОКПОПоставщика="34389679";
	ОбластьМакета.Параметры.ТелефонПоставщика="(057) 766-88-78";
	ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ЗапросИнфо = Новый Запрос;
	ЗапросИнфо.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	ЗапросИнфо.УстановитьПараметр("Вид","Юридический адрес контрагента" );
	ЗапросИнфо.УстановитьПараметр("Вид1","Телефон контрагента");
	
	ЗапросИнфо.Текст =	"ВЫБРАТЬ
	                  	|	КонтактнаяИнформация.Объект,
	                  	|	КонтактнаяИнформация.Тип,
	                  	|	КонтактнаяИнформация.Вид,
	                  	|	КонтактнаяИнформация.Представление КАК Представление,
	                  	|	КонтактнаяИнформация.Поле1,
	                  	|	КонтактнаяИнформация.Поле2,
	                  	|	КонтактнаяИнформация.Поле3,
	                  	|	КонтактнаяИнформация.Поле4,
	                  	|	КонтактнаяИнформация.Поле5,
	                  	|	КонтактнаяИнформация.Поле6,
	                  	|	КонтактнаяИнформация.Поле7,
	                  	|	КонтактнаяИнформация.Поле8,
	                  	|	КонтактнаяИнформация.Поле9,
	                  	|	КонтактнаяИнформация.Поле10
	                  	|ИЗ
	                  	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                  	|ГДЕ
	                  	|	КонтактнаяИнформация.Объект = &Объект
	                  	|	И (КонтактнаяИнформация.Вид.Наименование = &Вид
	                  	|			ИЛИ КонтактнаяИнформация.Вид.Наименование = &Вид1)
	                  	|
	                  	|УПОРЯДОЧИТЬ ПО
	                  	|	КонтактнаяИнформация.Тип.Порядок";
	
	
	Если не ЗапросИнфо.Выполнить().Пустой() тогда
		ЗапросИнфо= ЗапросИнфо.Выполнить().Выгрузить();
		СтрокаИнфо=1;
		Для каждого ВыборкаСтрокИнфо из ЗапросИнфо Цикл 
			Если СтрокаИнфо=1 тогда
				ОбластьМакета.Параметры.АдресПокупателя		= ВыборкаСтрокИнфо.Поле6+", "+ВыборкаСтрокИнфо.Поле7;
				ОбластьМакета.Параметры.ГородИндексПокупателя= ВыборкаСтрокИнфо.Поле4+" "+ВыборкаСтрокИнфо.Поле1;
			Иначе
				ОбластьМакета.Параметры.ТелефонПокупателя	= ВыборкаСтрокИнфо.Представление;
			КонецЕсли;
			СтрокаИнфо=СтрокаИнфо+1;
	    КонецЦикла;
	КонецЕсли;
	//ОбластьМакета.Параметры.ЗаказПокупателя=Шапка.Комментарий;
	
	ОбластьМакета.Параметры.НомерПоставщика=ЭтотОбъект.Контрагент.НомерДляНашейОрганизации;
    //Константы.НомерМетропоставщика.Получить();
	ОбластьМакета.Параметры.НомерМетроЗаказа=ЭтотОбъект.НомерМетроЗаказа;
	ОбластьМакета.Параметры.Автомобиль		=Шапка.Автомобиль;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВыводитьКоды = Ложь;
	//Сообщить("1");
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//ОбластьДанных.Параметры.НомерСтроки 	= ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		
		СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		
		
		ОбластьДанных.Параметры.Товар 			= СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+", "+СокрЛП(ВыборкаСтрокТовары.Порции)+")");
		
		ОбластьДанных.Параметры.ЕдИзм 			= ВыборкаСтрокТовары.ЕдиницаИзмерения ;
		
		//ВыборкаСтрокТовары.Артикул;
		ОбластьДанных.Параметры.Артикул=Формат(СокрЛП(ВыборкаСтрокТовары.АртикулВК),"ЧЦ=6; ЧГ=0");
		//Сред(ВыборкаСтрокТовары.АртикулВК,2,5); *** Мац 20-06-11
		ОбластьДанных.Параметры.КодРМК=Формат(Строка(Число(ВыборкаСтрокТовары.Код)),"ЧЦ=6; ЧГ=0");
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.Количество,"ЧЦ=6; ЧДЦ=3; ЧГ=0");
		ТабДокумент.Вывести(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
	КонецЦикла;
 
	ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	
	ОбластьМакета.Параметры.ВсегоКол=ВсегоКоличество; 
	//ОбластьМакета.Параметры.ПредставлениеНАкладной = "Накладна №  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьТНМЕТРО()

Функция ТоварнаяНакладнаяМЕТРО() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий,
	| 	Автомобиль
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|   Порции КАК Порции,АртикулВК КАК АртикулВК
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерМетроСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|       Порции КАК Порции,
	|       АртикулВК КАК АртикулВК,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|    	Порции,АртикулВК
	|	) КАК ВложенныйЗапросПоТоварам	УПОРЯДОЧИТЬ ПО  НомерСтрокиТЧ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТНМЕТРО";
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует()  тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    

	Макет = ПолучитьМакет("ТоварнаяНакладнаяМЕТРО");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерНакладной=СокрЛП(ЭтотОбъект.Номер);
	ОбластьМакета.Параметры.ДатаНакладной=Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Поставщик=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование());
	ОбластьМакета.Параметры.АдресПоставщика="вул. Роганська, 151.";
	ОбластьМакета.Параметры.ГородИндексПоставщика="м.Харкiв 61172";
	//ОбластьМакета.Параметры.ОКПОПоставщика="34389679";
	ОбластьМакета.Параметры.ТелефонПоставщика="(057) 766-88-78";
	
	
	ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ЗапросИнфо = Новый Запрос;
	ЗапросИнфо.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	ЗапросИнфо.УстановитьПараметр("Вид","Юридический адрес контрагента" );
	ЗапросИнфо.УстановитьПараметр("Вид1","Телефон контрагента");
	
	ЗапросИнфо.Текст =	"ВЫБРАТЬ
	                  	|	КонтактнаяИнформация.Объект,
	                  	|	КонтактнаяИнформация.Тип,
	                  	|	КонтактнаяИнформация.Вид,
	                  	|	КонтактнаяИнформация.Представление КАК Представление,
	                  	|	КонтактнаяИнформация.Поле1,
	                  	|	КонтактнаяИнформация.Поле2,
	                  	|	КонтактнаяИнформация.Поле3,
	                  	|	КонтактнаяИнформация.Поле4,
	                  	|	КонтактнаяИнформация.Поле5,
	                  	|	КонтактнаяИнформация.Поле6,
	                  	|	КонтактнаяИнформация.Поле7,
	                  	|	КонтактнаяИнформация.Поле8,
	                  	|	КонтактнаяИнформация.Поле9,
	                  	|	КонтактнаяИнформация.Поле10
	                  	|ИЗ
	                  	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                  	|ГДЕ
	                  	|	КонтактнаяИнформация.Объект = &Объект
	                  	|	И (КонтактнаяИнформация.Вид.Наименование = &Вид
	                  	|			ИЛИ КонтактнаяИнформация.Вид.Наименование = &Вид1)
	                  	|
	                  	|УПОРЯДОЧИТЬ ПО
	                  	|	КонтактнаяИнформация.Тип.Порядок";
	
	
	Если не ЗапросИнфо.Выполнить().Пустой() тогда
		ЗапросИнфо= ЗапросИнфо.Выполнить().Выгрузить();
		СтрокаИнфо=1;
		Для каждого ВыборкаСтрокИнфо из ЗапросИнфо Цикл 
			Если СтрокаИнфо=1 тогда
				ОбластьМакета.Параметры.АдресПокупателя		= ВыборкаСтрокИнфо.Поле6+", "+ВыборкаСтрокИнфо.Поле7;
				ОбластьМакета.Параметры.ГородИндексПокупателя= ВыборкаСтрокИнфо.Поле4+" "+ВыборкаСтрокИнфо.Поле1;
			Иначе
				ОбластьМакета.Параметры.ТелефонПокупателя	= ВыборкаСтрокИнфо.Представление;
			КонецЕсли;
			СтрокаИнфо=СтрокаИнфо+1;
	    КонецЦикла;
	КонецЕсли;
	//ОбластьМакета.Параметры.ЗаказПокупателя=Шапка.Комментарий;
	
	ОбластьМакета.Параметры.НомерПоставщика 		= ЭтотОбъект.Контрагент.НомерДляНашейОрганизации;
    //Константы.НомерМетропоставщика.Получить();
	ОбластьМакета.Параметры.НомерМетроЗаказа		= ЭтотОбъект.НомерМетроЗаказа;
	ОбластьМакета.Параметры.ВходнойСкладскойНомер 	= ЭтотОбъект.ВходнойСкладскойНомерМетро; //***AL02.08.2011 12:29:58
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВыводитьКоды = Ложь;
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		ОбластьДанных.Параметры.Товар 			= СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+", "+СокрЛП(ВыборкаСтрокТовары.Порции)+")");
		ОбластьДанных.Параметры.ЕдИзм 			= ВыборкаСтрокТовары.ЕдиницаИзмерения ;
		ОбластьДанных.Параметры.Артикул=Формат(СокрЛП(ВыборкаСтрокТовары.АртикулВК),"ЧЦ=6; ЧГ=0");
		ОбластьДанных.Параметры.КодРМК=Формат(Строка(Число(ВыборкаСтрокТовары.Код)),"ЧЦ=6; ЧГ=0");
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.Количество,"ЧЦ=8; ЧДЦ=3; ЧГ=0");
		ОбластьДанных.Параметры.ЦенаЕд		= Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5,ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2; ЧГ=");
		ОбластьДанных.Параметры.ЦенаМетро= Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5,ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2; ЧГ=");
		ОбластьДанных.Параметры.Сумма= Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Сумма/6*5,ВыборкаСтрокТовары.Сумма),"ЧЦ=12; ЧДЦ=2; ЧГ=");
		
		ТабДокумент.Вывести(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
		Сумма    = Сумма+?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Сумма/6*5,ВыборкаСтрокТовары.Сумма);
		СуммаНДС = СуммаНДС+ВыборкаСтрокТовары.СуммаНДС;
	КонецЦикла;
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИтогов");
	ОбластьМакета.Параметры.СуммаБезНДС     =Формат(Сумма,"ЧЦ=12; ЧДЦ=2; ЧГ=");  	
	ОбластьМакета.Параметры.СуммаНДС        =Формат(СуммаНДС,"ЧЦ=12; ЧДЦ=2; ЧГ=") ;
	ОбластьМакета.Параметры.СуммаВсего      =Формат(Шапка.СуммаДокумента,"ЧЦ=12; ЧДЦ=2; ЧГ=");
	ТабДокумент.Вывести(ОбластьМакета);	
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента,КодЯзыкаПечать) +" грн.";
	ТабДокумент.Вывести(ОбластьМакета);	
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	//ОбластьМакета.Параметры.ВсегоКол=ВсегоКоличество; 
	//ОбластьМакета.Параметры.ПредставлениеНАкладной = "Накладна №  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьТоварнойНакладнойМЕТРО()

//печать декларациипроизводителя
Функция  ПечатьДекларацииПроизводителя() Экспорт
	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	//*****************************  заголовок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	Контрагент КАК Покупатель
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	//СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//*******************************         содержимое
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Упаковка,
	|	ТекстыНоменклатуры.ТекстДекларацииПроизводителя КАК УсловияХранения,
	|	ЗначенияСвойствОбъектов.Значение КАК Влажность,
	|	ЗначенияСвойствОбъектов1.Значение КАК ФормаВид,
	|	ЗначенияСвойствОбъектов2.Значение КАК ВДСЕЕ,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул  КАК Артикул
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыНоменклатуры КАК ТекстыНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ТекстыНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = ТекстыНоменклатуры.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Код = ""00000000019"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов1.Объект
	|			И (ЗначенияСвойствОбъектов1.Свойство.Код = ""00000000028"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов2
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов2.Объект
	|			И (ЗначенияСвойствОбъектов2.Свойство.Код = ""00000000029"")
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|	И РеализацияТоваровУслугТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ТекстыНоменклатуры.ТекстДекларацииПроизводителя,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЗначенияСвойствОбъектов1.Значение,
	|	ЗначенияСвойствОбъектов2.Значение,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ЗапросТУ = Новый запрос;
	ЗапросТУ.Текст="ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ДСТУ,
	               |	ЗначенияСвойствОбъектов1.Значение КАК ВДСЕЕ,
	               |	РеализацияТоваровУслугТовары.Номенклатура
	               |ПОМЕСТИТЬ ТУ
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов1.Объект
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	               |	И ЗначенияСвойствОбъектов1.Свойство.Код = ""00000000029""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТУ.ДСТУ,
	               |	ТУ.ВДСЕЕ,
	               |	КОЛИЧЕСТВО(ТУ.Номенклатура) КАК Номенклатура
	               |ИЗ
	               |	ТУ КАК ТУ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТУ.ДСТУ,
	               |	ТУ.ВДСЕЕ";
	ЗапросТУ.УстановитьПараметр("ССылка",МойОбъект.Ссылка);
	ТЗНормДок = ЗапросТУ.Выполнить().Выгрузить();			   
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ДекларацииПроизводителя";
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует()  тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    

    Макет = МойОбъект.ПолучитьМакет("ДекларацияПроизводителя");
	// печать производится на языке, указанном в настройках пользователя
    //КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
    //Макет.КодЯзыкаМакета = КодЯзыкаПечать;

//найдем строку декларации
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СправочникВетеринарныхСвидетельств.Ссылка,
        |   СправочникВетеринарныхСвидетельств.Код,
        |   СправочникВетеринарныхСвидетельств.Наименование,
        |   СправочникВетеринарныхСвидетельств.Дата,
        |   СправочникВетеринарныхСвидетельств.Комментарий,
        |   СправочникВетеринарныхСвидетельств.НомерДекларацииВиробника
        |ИЗ
        |   Справочник.СправочникВетеринарныхСвидетельств КАК СправочникВетеринарныхСвидетельств
        |ГДЕ
        |   СправочникВетеринарныхСвидетельств.Дата = &Дата
        |   И СправочникВетеринарныхСвидетельств.ПометкаУдаления = ЛОЖЬ";

    Запрос.УстановитьПараметр("Дата", НачалоДня(ЭтотОбъект.Дата));
    РезультатСВС = Запрос.Выполнить();
    ВыборкаДЗ = РезультатСВС.Выбрать();
    СтрокаСвидетельств="";
    МойНомерДекларации="";
    Если не РезультатСВС.Пустой() тогда 
        ВыборкаДЗ.Следующий();
        МойНомерДекларации=ВыборкаДЗ.НомерДекларацииВиробника;
        СтрокаСвидетельств=ВыборкаДЗ.Наименование;
    КонецЕсли;
 
    
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
    Если СокрЛП(СтрокаСвидетельств)="" тогда
        СтрЗаголовка="Декларація виробника №___________";
    Иначе    
        СтрЗаголовка        =СтрокаСвидетельств;
        СтрЗаголовка="Декларація виробника № "+СокрЛП(МойНомерДекларации);
    КонецЕсли;
    
    ОбластьМакета.Параметры.ЗаголовокДокумента = СтрЗаголовка;
	ОбластьМакета.Параметры.Покупатель = "Товароотримувач:  "+СокрЛП(МойОбъект.Контрагент.НаименованиеПолное);
	НомерНакладной=СокрЛП(МойОбъект.Номер);
	
	//ОбластьМакета.Параметры.ДатаПроизводстваНомерНАкладной = "Дата виробництва та  відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".  Накладна № "+Формат(Число(СокрЛП(МойОбъект.Номер)),"ЧГ=0")+"  від  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".";//+" 08:00:00 для реалізації";
	ОбластьМакета.Параметры.ДатаПроизводстваНомерНАкладной = "Дата виробництва та  відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".  Накладна № "+СокрЛП(НомерНакладной)+"  від  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".";//+" 08:00:00 для реалізації";
	ТабДокумент.Вывести(ОбластьМакета);

	ЭтоМясо=ТОвары[0].Номенклатура.Родитель.Код="00000000023";
	
	//ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	Если ЭтоМясо тогда
		ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицыМясо");
	Иначе 
		ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
	
	ВсегоСкидок    = 0;
	строкаНомер= 0;
	
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
    
		//ОбластьДанных=Макет.ПолучитьОбласть("Строка");
        Если ЭтоМясо тогда
	    	ОбластьДанных=Макет.ПолучитьОбласть("СтрокаМясо");
		Иначе
			ОбластьДанных=Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		

		ОбластьДанных.Параметры.Номенклатура 	= ВыборкаСтрокТовары.Номенклатура;
		ОбластьДанных.Параметры.Количество		= ВыборкаСтрокТовары.Количество;
		ОбластьДанных.Параметры.ТекстВидУпаковки= ВыборкаСтрокТовары.Упаковка;
		Если не ЭтоМясо тогда
			ОбластьДанных.Параметры.Влажность       = ВыборкаСтрокТовары.Влажность;	
			ОбластьДанных.Параметры.Форма			= ВыборкаСтрокТовары.ФормаВид;  
		КонецЕсли;	
		ОбластьДанных.Параметры.Условия			= ВыборкаСтрокТовары.УсловияХранения;	
		ОбластьДанных.Параметры.Время			= ?(ЭтотОбъект.Контрагент.Код<>"000002431","01:00:00","11:00:00");//Севагин И.И. 29-01-2016
		Шаг=0;
		Пока Шаг < ТЗНормДок.Количество() Цикл
			Если Врег(СокрЛП(ТЗНормДок[Шаг].ДСТУ))=Врег(СокрЛП(ВыборкаСтрокТовары.Артикул))
				И Врег(СокрЛП(ТЗНормДок[Шаг].ВДСЕЕ))=Врег(СокрЛП(ВыборкаСтрокТовары.ВДСЕЕ)) ТОГДА
				прервать;
			КонецЕсли;
			Шаг=Шаг+1;
		КонецЦикла;
		ОбластьДанных.Параметры.НомерСтроки =	Формат(строкаНомер+1,"ЧДЦ=0; ЧГ=0");
		ОбластьДанных.Параметры.СсылкаДСТУ	=	Формат(Шаг+1,"ЧДЦ=0; ЧГ=0");
		
		строкаНомер=строкаНомер+1;
		ТабДокумент.Вывести(ОбластьДанных);
	КонецЦикла;
	Если ЭтоМясо тогда
		ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицыМясо");
	Иначе
		ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицы");
	КонецЕсли;	
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Заголовок2");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Шапка2");
	ТабДокумент.Вывести(ОбластьДанных);
	Шаг=0;
	ОбластьДанных=Макет.ПолучитьОбласть("Строка2");
	Пока Шаг < ТЗНормДок.Количество() Цикл
		ОбластьДанных.Параметры.НомерТУ=Шаг+1;
		ОбластьДанных.Параметры.ТекстДСТУ=ТЗНормДок[Шаг].ДСТУ;
		ОбластьДанных.Параметры.ТекстВДСЕЕ=ТЗНормДок[Шаг].ВДСЕЕ;
		ТабДокумент.Вывести(ОбластьДанных);
		Шаг=Шаг+1;
	КонецЦикла;

	ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицы2");
	ТабДокумент.Вывести(ОбластьДанных);
	//Определить это мясо или нет?
	
	
	Если не ЭтоМясо тогда 
		
		ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметки");	
		Текст_ЭВ="";
		ЗапросЭВ = новый запрос;
		ЗапросЭВ.Текст="ВЫБРАТЬ
		|	СправочникЭкспертноеВетеринарноеЗаключение.Дата КАК Дата,
		|	СправочникЭкспертноеВетеринарноеЗаключение.Наименование,
		|	СправочникЭкспертноеВетеринарноеЗаключение.ссылка
		|ИЗ
		|	Справочник.СправочникЭкспертноеВетеринарноеЗаключение КАК СправочникЭкспертноеВетеринарноеЗаключение
		|ГДЕ
		|	СправочникЭкспертноеВетеринарноеЗаключение.ПометкаУдаления = ЛОЖЬ
		|	И СправочникЭкспертноеВетеринарноеЗаключение.ЭтоМясо = ЛОЖЬ
		|	И СправочникЭкспертноеВетеринарноеЗаключение.Дата <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
		ЗапросЭВ.УстановитьПараметр("Дата",КонецДня(МойОбъект.Дата));
		Рез_ЭВ= ЗапросЭВ.Выполнить().Выбрать();
		//Текст_ЭВ="";
		//Текст_ЭВ=РегистрыСведений.ЭкспертноеВетеринарноеЗаключение.
		Если Рез_ЭВ.Количество()>0 тогда 
			Рез_ЭВ.Следующий();
			Текст_ЭВ=Рез_ЭВ.ссылка;
		КонецЕсли;	
		ОбластьОсобыеОтметки.Параметры.ЭкспертВисновок=Текст_ЭВ;
		СтрокаВС="Серія ______№ _________________________від ____________"+Формат(ЭтотОбъект.Дата,"ДФ=yyyy")+" р.";
		ОбластьОсобыеОтметки.Параметры.СтрокаВС=?(СокрЛП(СтрокаСвидетельств)="",СтрокаВС,СокрЛП(СтрокаСвидетельств));
		
		ОбластьОсобыеОтметки.Параметры.Технолог=?(СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Код)="F00000060" ИЛИ
		СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Код)="F00000060"    ИЛИ ИСТИНА
		,"Ковтун О.I.", " ");
		
		//ОбластьОсобыеОтметки.Параметры.ВетВрач="Вет. врач "+СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
		
		ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	Иначе
		Ответ = Вопрос("Если в накладной МЯСО нажмите ДА, если КУРИЦА нажмите НЕТ!", РежимДиалогаВопрос.ДаНет); 
		ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметкиМясо");	
		Текст_ЭВ="";
		ДопЗапрос=?(Ответ = КодВозвратаДиалога.Да,"ЭтоМясо = ИСТИНА ","ЭтоКурица = ИСТИНА ");
		ЗапросЭВ = новый запрос;
		ЗапросЭВ.Текст="ВЫБРАТЬ
		|	СправочникЭкспертноеВетеринарноеЗаключение.Дата КАК Дата,
		|	СправочникЭкспертноеВетеринарноеЗаключение.Наименование,
		|	СправочникЭкспертноеВетеринарноеЗаключение.ссылка
		|ИЗ
		|	Справочник.СправочникЭкспертноеВетеринарноеЗаключение КАК СправочникЭкспертноеВетеринарноеЗаключение
		|ГДЕ
		|	СправочникЭкспертноеВетеринарноеЗаключение.ПометкаУдаления = ЛОЖЬ
		|	И СправочникЭкспертноеВетеринарноеЗаключение."+ДопЗапрос+"
		|	И СправочникЭкспертноеВетеринарноеЗаключение.Дата <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
		ЗапросЭВ.УстановитьПараметр("Дата",КонецДня(МойОбъект.Дата));
		Рез_ЭВ= ЗапросЭВ.Выполнить().Выбрать();
		//Текст_ЭВ="";
		//Текст_ЭВ=РегистрыСведений.ЭкспертноеВетеринарноеЗаключение.
		Если Рез_ЭВ.Количество()>0 тогда 
			Рез_ЭВ.Следующий();
			Текст_ЭВ=Рез_ЭВ.ссылка;
		КонецЕсли;	
		ОбластьОсобыеОтметки.Параметры.ЭкспертВисновокМясо=Текст_ЭВ;
		СтрокаВС="Серія ______№ _________________________від ____________"+Формат(ЭтотОбъект.Дата,"ДФ=yyyy")+" р.";
		ОбластьОсобыеОтметки.Параметры.СтрокаВС=?(СокрЛП(СтрокаСвидетельств)="",СтрокаВС,СокрЛП(СтрокаСвидетельств));
		ОбластьОсобыеОтметки.Параметры.Технолог=?(СокрЛП(ЭтотОбъект.Контрагент.Код)="F00000060" ИЛИ 
		СокрЛП(ЭтотОбъект.Контрагент.Код)="F00000060"
		ИЛИ ИСТИНА,"Ковтун О.I." ,"");
		ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	КонецЕсли;	
	возврат ТабДокумент;
КонецФункции // ПечатьДекларацииПроизводителя()

Функция ПечатьКачественногоСвидетельства() Экспорт 
	//*****************************  заголовок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Реализатор КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");

	//*******************************         содержимое
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
    | ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Качественное";
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует()  тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    

	Макет = ЭтотОбъект.ПолучитьМакет("Качественное");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДок = "ПОСВІДЧЕННЯ ПРО ЯКІСТЬ №  ________";//+ ЭтотОбъект.Номер;
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ЭтотОбъект.Организация.НаименованиеПолное) + "   Адреса: 61172, м.Харків, вул. Роганська, 151.";
	ОбластьМакета.Параметры.Отправитель =  СокрЛП(ЭтотОбъект.Организация.НаименованиеПолное) +"   (експлуатаційний дозвіл № 20 29 20 Mt)";;
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ЭтотОбъект.Контрагент.Наименование ;
	//+" "+ЭтотОбъект.АдресДоставки; 
	ОбластьМакета.Параметры.ДатаДок = "Дата відвантаження  "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+"  вид і номер транспортного засобу ___________________ ";
	//ОбластьМакета.Параметры.НомерДок2 = " Накладна (сертифікація) №  "+ЭтотОбъект.Номер+" від "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+" 08:00:00 для реалізації";
	ОбластьМакета.Параметры.НомерДок2 = " Накладна (сертифікація) №  "+ЭтотОбъект.Номер+" від "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+?(ЭтотОбъект.Контрагент.Код="000002431", " 10:00:00 "  ," 08:00:00 ") + " для реалізації";//Алексеенко А.А 06-02-2014
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
	
    ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ВыборкаСтрокТовары.ЕдиницаИзмерения="кг" тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
	    //чтение свойств номенклатуры
		ЗапросРегСвед = Новый Запрос("ВЫБРАТЬ
				| *
				| ИЗ
				| РегистрСведений.ЗначенияСвойствОбъектов
				| ГДЕ Объект=&ООО");

		ЗапросРегСвед.УстановитьПараметр("ООО",ВыборкаСтрокТовары.Номенклатура);
		РегСвед =ЗапросРегСвед.Выполнить().Выгрузить();

		
		
		Для Каждого Запись ИЗ РегСвед Цикл   
			//Предупреждение("Свойство "+Запись.Свойство+"   "+"Запись.Значение "+ Запись.Значение, 10);
			Если СокрЛП(Запись.Свойство)="Время хранения"  Тогда
				ВрХранения=Запись.Значение;
			//	Сообщить("ВрХранения",Запись.Значение);
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Температура хранения"   Тогда
				Темп=Запись.Значение;
			//	Сообщить("Темп",Запись.Значение);
			КонецЕсли;	
			Если СокрЛП(Запись.Свойство)="Оболочка"    Тогда
				Обол=Запись.Значение;
			//	Сообщить("Обол",Запись.Значение);
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Упаковка"    Тогда
			//	Сообщить("Упак",Запись.Значение);
				Упак=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Влажность хранения" Тогда
				Влаж=Запись.Значение;
			//	Сообщить("Влаж",Запись.Значение);
			КонецЕсли;		
			
		КонецЦикла;		
		
		ОбластьДанных.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура;
		ОбластьДанных.Параметры.Артикул= ВыборкаСтрокТовары.Артикул;
		ОбластьДанных.Параметры.Влажность=Влаж;
		ОбластьДанных.Параметры.Температура=Темп;
		ОбластьДанных.Параметры.СрокГодности=ВрХранения;
		ОбластьДанных.Параметры.Количество=ВыборкаСтрокТовары.Количество;
		//ОбластьДанных.Параметры.ДатаИВремя = Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+" 08:00:00 ";
		ОбластьДанных.Параметры.ДатаИВремя = Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+?(ЭтотОбъект.Контрагент.Код="000002431", " 11:00:00 "  ," 08:00:00 ");//Алексеенко А.А 06-02-2014 //Севагин И.И. 29-01-2016
		
		
		//ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Вывести(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
		КонецЕсли;	
	КонецЦикла;
	ОбластьИтогоКоличество = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоКоличество.Параметры.ИтогоКоличество= Формат(ВсегоКоличество,"ЧЦ=9; ЧДЦ=3");
    ТабДокумент.Вывести(ОбластьИтогоКоличество);
	
	ОбластьСтандарты = Макет.ПолучитьОбласть("Стандарты");	
	ТабДокумент.Вывести(ОбластьСтандарты);

	
	ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметки");	
	ТабДокумент.Вывести(ОбластьОсобыеОтметки );
	
	возврат ТабДокумент;
КонецФункции // ПечатьКачественногоСвидетельства()	

Функция ПечатьДокумента()Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
    |   РеализацияТоваровУслуг.Номер,
    |   РеализацияТоваровУслуг.Дата,
    |   РеализацияТоваровУслуг.ДоговорКонтрагента,
    |   РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
    |   РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
    |   РеализацияТоваровУслуг.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
    |   РеализацияТоваровУслуг.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
    |   РеализацияТоваровУслуг.Сделка,
    |   РеализацияТоваровУслуг.Контрагент КАК Покупатель,
    |   РеализацияТоваровУслуг.Организация,
    |   РеализацияТоваровУслуг.Организация КАК Поставщик,
    |   РеализацияТоваровУслуг.Ответственный.ФизЛицо.Наименование КАК Выписал,
    |   РеализацияТоваровУслуг.ДоверенностьСерия,
    |   РеализацияТоваровУслуг.ДоверенностьНомер,
    |   РеализацияТоваровУслуг.ДоверенностьДата,
    |   РеализацияТоваровУслуг.ДоверенностьПолучил,
    |   РеализацияТоваровУслуг.СуммаДокумента,
    |   РеализацияТоваровУслуг.ВалютаДокумента,
    |   РеализацияТоваровУслуг.УчитыватьНДС,
    |   РеализацияТоваровУслуг.ОтпускПроизвел,
    |   РеализацияТоваровУслуг.АдресДоставки,
    |   РеализацияТоваровУслуг.СуммаВключаетНДС,
    |   РеализацияТоваровУслуг.МестоСоставленияДокумента
    |ИЗ
    |   Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |ГДЕ
    |   РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия, Порции КАК Порции
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,Порции КАК Порции,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,Порции
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НомерСтроки,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	0,
	|	NULL,
	|	NULL,NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяРМК";
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует() тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
	
	Макет = ПолучитьМакет("НакладнаяРМК");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	
	//*** Л.Г. 150504 Полтавський технікум харчових технологій НУХТ
	Если   Шапка.Покупатель.код="000002820" тогда
		ОбластьМакета.Параметры.ПредставлениеПокупателя  = СокрЛП(Шапка.Покупатель.ГоловнойКонтрагент.НаименованиеПолное)+" "+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	КонецЕсли;	
	
	
	//*** НАЦІОНАЛЬНИЙ АЕРОКОСМІЧНИЙ УНІВЕРСИТЕТ ІМ, М.Є. ЖУКОВСЬКОГО "Харківський авіаційний інститут" 
	Если ЭтотОбъект.Контрагент.Код="000002404" тогда
		ОбластьМакета.Параметры.РеквизитыПокупателя	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,МФО,/,ФактическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.РеквизитыПокупателя	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию об адресе доставки, договоре и сделке
	//СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,АдресДоставки,";//***AL21.09.2011 9:44:51
	СтрокаФактуры="";
	Если СокрЛП(Шапка.Покупатель.Код)="100001800" Тогда //*** 000001800 ранее держ пидприемство Пивденна зализниця 
		СписокДополнительныхПараметров = "АдресДоставки,";
		МассивСтруктурСтрок = Новый Массив();
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетНаОплатуПокупателю.Дата,
			|	СчетНаОплатуПокупателю.Номер,
			|	СчетНаОплатуПокупателю.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
			|		ПО РеализацияТоваровУслуг.Ссылка = СчетНаОплатуПокупателю.Отгрузка
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
			
			Запрос.УстановитьПараметр("ТекущийДокумент",ЭтотОбъект.Ссылка);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Количество()>0  Тогда
				Выборка.Следующий() ;	
				СтрокаФактуры="Договiр поставки № "+СокрЛП(Выборка.Номер)+" вiд "+СокрЛП(Формат(Выборка.Дата,"ДФ=dd.MM.yy"));
			КонецЕсли;
	Иначе 
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,АдресДоставки,";
	КонецЕсли;	
	
	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	
	
	Если СокрЛП(Шапка.Покупатель.Код)="100001800" Тогда //000001800 ранее пивденна зализниця 
		ОбластьМакета = Макет.ПолучитьОбласть("Фактура");
		ОбластьМакета.Параметры.СтрокаРахункаФактури=СтрокаФактуры;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) или ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
		
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		//ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика), "", "(" + ВыборкаСтрокТовары.Характеристика +")")+ ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Порции), "", "(" + ВыборкаСтрокТовары.Порции+")");
		ТабДокумент.Присоединить(ОбластьДанных);

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) И НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка)) * (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка);
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьСуммы);	
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	//ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + ",   весом " + ВсегоВес+ " кг.,"+
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
    
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	// Отпуск товара произвел
	//Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
	//	ОбластьМакета.Параметры.Выписал = Шапка.ОтпускПроизвел.Наименование;
	//КонецЕсли;
	//ОбластьМакета.Параметры.Пользователь=глЗначениеПеременной("глТекущийПользователь");
    
    //***//***//Н.Ф. Н.А. по просьбе сбыт - бухгалтер, который распечатал 23-05-13
    мПредставительПоставщика="";
    Если ЭтотОбъект.ПредставительОрганизации=Справочники.ФизическиеЛица.ПустаяСсылка() тогда
        мПредставительПоставщика=глЗначениеПеременной("глТекущийПользователь").ФизЛицо;
    Иначе
        мПредставительПоставщика=ЭтотОбъект.ПредставительОрганизации;
    КонецЕсли;
	Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалДокументыРМК");
	Если ЗначениеЗаполнено(Подмена) тогда
		мПредставительПоставщика=Подмена;//Справочники.ФизическиеЛица.НайтиПоКоду("000000656");//*** Овчаренко Тетяна Миколаївна 
	КонецЕсли;	
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,мПредставительПоставщика, Шапка.Дата);
    ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	//ОбластьМакета.Параметры.Ответственный 		= Шапка.ОтпускПроизвел.Наименование;
	ОбластьМакета.Параметры.ДоверенностьСерия	= Шапка.ДоверенностьСерия;
	ОбластьМакета.Параметры.ДоверенностьНомер	= Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДоверенностьДата	= Шапка.ДоверенностьДата;
	ОбластьМакета.Параметры.ДоверенностьПолучил = Шапка.ДоверенностьПолучил;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // ПечатьДокумента()

//Ал *** 
Процедура  ВыгрузитьФайлНаТаврию() Экспорт
   //Путь = СокрЛП(Константы.ПутьКФайлуТаврия.Получить());
   Если ЭтотОбъект.Контрагент.Код<>"000002097" тогда
       Предупреждение("Выгрузка файла доступна только для ""Таврии ПЛЮС"" !",,"ВНИМАНИЕ!"); 
       Возврат;
   КонецЕсли;
   Пользователь=глЗначениеПеременной("глТекущийПользователь");	
   ДляФайла ="";
   ИмяДляФайла ="";
   
   Путь =ФункцииОбщегоНазначения.НайтиЗначениеНастройкиПользователя(Пользователь,"Каталог предприятия архивы exite");
   Если не Путь=неопределено тогда
      Путь = СокрЛП(Путь)+"\Tavria";
    Иначе
      Предупреждение("Не найден путь к папке -  Каталог предприятия архивы exite !"); 
      возврат
   КонецЕсли;    
   ////Путь =   СокрЛП(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "КаталогПредприятияАрхивыExite"))+"\Tavria\";
   ////НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
   ////НаборЗаписей.Отбор.Объект.Значение = ЭтотОбъект.Контрагент;
   ////НаборЗаписей.Прочитать();
   ////Для Каждого Адрес из НаборЗаписей Цикл
   ////    Если Адрес.Вид= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000037") Тогда
   ////  	 ДляФайла = СокрЛП(Адрес.Представление);
   ////    КонецЕсли;
   ////    Если Адрес.Вид= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000038") Тогда
   ////  	 ИмяДляФайла = СокрЛП(Адрес.Представление);
   ////    КонецЕсли;
   ////КонецЦикла;
   //ДляФайла     = ФункцииОбщегоНазначения.ЗначениеКонтактнойИнформации(ЭтотОбъект.Контрагент,Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000037"));
   //НомерАдреса=Число(ПРАВ(СокрЛП(ЭтотОбъект.ВидАдреса.Наименование),1)); //*** Ляшенко Ю. 07-03-2014 Письмо из Таврии
   //Если НомерАдреса=2 тогда
   //	ДляФайла="Gvardeyskiy@tavriav.com.ua";
   //ИначеЕсли НомерАдреса=3 тогда 
   //	ДляФайла="target@tavriav.com.ua";
   //КонецЕсли;	
   //*** 14-07-22
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Комментарий,
		|	КонтактнаяИнформация.Поле1,
		|	КонтактнаяИнформация.Поле2,
		|	КонтактнаяИнформация.Поле3,
		|	КонтактнаяИнформация.Поле4,
		|	КонтактнаяИнформация.Поле5,
		|	КонтактнаяИнформация.Поле6,
		|	КонтактнаяИнформация.Поле7,
		|	КонтактнаяИнформация.Поле8,
		|	КонтактнаяИнформация.Поле9,
		|	КонтактнаяИнформация.Поле10,
		|	КонтактнаяИнформация.Вид.Ссылка
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Вид.Ссылка = &Вид";

	Запрос.УстановитьПараметр("Вид", ЭтотОбъект.ВидАдреса);
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();	
		ВыборкаДетальныеЗаписи.Следующий();
		ДляФайла=СокрЛП(ВыборкаДетальныеЗаписи.Комментарий);
		//ДляФайла=СокрЛП(ВыборкаДетальныеЗаписи.Комментарий);
	КонецЕсли;
   
   ИмяДляФайла  = ФункцииОбщегоНазначения.ЗначениеКонтактнойИнформации(ЭтотОбъект.Контрагент,Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000038"));
  //Имя  = ИмяДляФайла+"_"+СокрЛП(ДляФайла)+"_"+Формат(Дата,"DF=ddMM")+".txt_"+Формат(Число(СокрЛП(ЭтотОбъект.Номер)),"ЧДЦ=0; ЧГ=0");
  //
   Имя     = ИмяДляФайла+"_"+СокрЛП(ДляФайла)+"_"+Формат(Дата,"DF=ddMM")+".txt";//Беломестная 04-02-2013
   Файл     = Новый  ЗаписьТекста(Путь+"\"+Имя,КодировкаТекста.ANSI); 
   
   //Файл.Открыть(ИмяФайлаЗаписей, КодировкаТекста.UTF8);
   Для Каждого ТекущаяСтрока Из Товары Цикл 
       Строка = "weight@"+СокрЛП(?(ЗначениеЗаполнено(ТекущаяСтрока.АртикулВК),ТекущаяСтрока.АртикулВК,ТекущаяСтрока.АртикулПокупателя))+"@"+ТекущаяСтрока.Номенклатура.Наименование+"@"+ТекущаяСтрока.Количество+"@"+ТекущаяСтрока.Цена+"@";
       Файл.ЗаписатьСтроку(Строка);
   КонецЦикла;
   Сообщить("Выгружен текстовый файл "+Путь+"\"+Имя);          
   Файл.Закрыть();
   //отправить почту   
   Получатель="";
   
   ОтборПараметра = Новый Структура;
   ОтборПараметра.Вставить("Пользователь", Пользователь);
   ОтборПараметра.Вставить("Настройка",ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("Учетная запись электронной почты по умолчанию"));
   ДанныеНастроек = РегистрыСведений.НастройкиПользователей.Получить(ОтборПараметра);
   Если не ДанныеНастроек.Значение=неопределено тогда 
       МойMail=ДанныеНастроек.Значение;
       Если	СокрЛП(МойMail.Логин)="" тогда
           Сообщить("У пользователя не настроен почтовый ящик!");
           возврат;
       КонецЕсли;
       Получатель=ДляФайла;
	   //НомерАдреса=Число(ПРАВ(СокрЛП(ЭтотОбъект.ВидАдреса.Наименование),1)); //*** Ляшенко Ю. 07-03-2014 Письмо из Таврии
	   //Если НомерАдреса<>1  тогда
	   // 	Получатель="Gvardeyskiy@tavriav.com.ua";
	   //   КонецЕсли;	
		//Получатель
       Если СокрЛП(Получатель)="" тогда
           Предупреждение("У контрагента нет адреса e-mail, отправка писем не возможна!");
           возврат;
       КонецЕсли;
       Сообщить(МойMail);
       ИПП=Новый ИнтернетПочтовыйПрофиль;
       ИПП.АдресСервераSMTP=МойMail.SMTPСервер;
       ИПП.ПортSMTP=МойMail.ПортSMTP;
       ИПП.ПользовательSMTP=МойMail.Логин;
       ИПП.ПарольSMTP=МойMail.Пароль;
       ИПП.АутентификацияSMTP=СпособSMTPАутентификации.ПоУмолчанию;
       
       Письмо=Новый ИнтернетПочтовоеСообщение;
       Письмо.Отправитель=МойMail.АдресЭлектроннойПочты;
       Письмо.Получатели.Добавить(Получатель);
       
       Письмо.Тема="Накладная от Роганский мясокомбинат г.Харьков № " +СокрЛП(ЭтотОбъект.Номер)+" от "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy") ;
       ТекстПисьма=" ";
       ТекстПисьма=ТекстПисьма+ " Накладная № "+ЭтотОбъект.Номер+" от "+ЭтотОбъект.Дата+Символы.ВК+Символы.ПС;
       
       МойФайл=СокрЛП(Путь) +"\"+ Имя;
       
       Письмо.Вложения.Добавить(МойФайл);
       Почта=Новый ИнтернетПочта;
       Почта.Подключиться(ИПП);
       Почта.Послать(Письмо);
       Почта.Отключиться();   
       ЭтотОбъект.Комментарий=СокрЛП(ЭтотОбъект.Комментарий) +" Отпарвлено на "+СокрЛП(Получатель)+" от "+Формат(ТекущаяДата(),"ДЛФ=DT");
       ЭтотОбъект.Записать();
   Иначе
       Сообщить("У пользователя не настроен почтовый ящик!");
       возврат;
   КонецЕсли;

КонецПроцедуры

Функция ПечатьПростогоРеестра() 
        ТабДокумент = Новый ТабличныйДокумент;
        ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Реестрдокументов";
        ПараметрыПечати(ТабДокумент);
        Макет = ПолучитьМакет("РеестрБухДокументов");
        
        // печать производится на языке, указанном в настройках пользователя
        //КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
        КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
        //Макет.КодЯзыкаМакета = КодЯзыкаПечать;
        
        // Выводим шапку накладной
        ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
        ОбластьМакета.Параметры.Поставщик=ЭтотОбъект.Организация.НаименованиеПолное;
        ОбластьМакета.Параметры.Покупатель= ЭтотОбъект.Контрагент.НаименованиеПолное;
        ОбластьМакета.Параметры.АдресДоставки = СокрЛП(ЭтотОбъект.АдресДоставки);
        ТабДокумент.Вывести(ОбластьМакета);
        
        ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
        ТабДокумент.Вывести(ОбластьМакета);
        
        ОбластьМакета = Макет.ПолучитьОбласть("Строка");
        ОбластьМакета.Параметры.НомерСтроки		= 1;
        ОбластьМакета.Параметры.ВидДокумента    = "Расходная накладная";
        ОбластьМакета.Параметры.НомерДокумента  = ЭтотОбъект.Номер;
        ОбластьМакета.Параметры.ДатаДокумента   = Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
        ОбластьМакета.Параметры.СуммаДокумента  = Формат(ЭтотОбъект.СуммаДокумента,"ЧЦ=10; ЧДЦ=2");
        ТабДокумент.Вывести(ОбластьМакета);
        
        //Определение налоговой накладной
        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("ДокументРеализации", ЭтотОбъект.Ссылка);
        ТекстЗапроса =
        "ВЫБРАТЬ
        |	НалоговаяНакладная.Ссылка,
        |	НалоговаяНакладная.Номер,
        |	НалоговаяНакладная.Дата
        |ИЗ
        |	Документ.НалоговаяНакладная КАК НалоговаяНакладная
        |ГДЕ
        |	НалоговаяНакладная.ДокументОснование = &ДокументРеализации
        |	И НалоговаяНакладная.ПометкаУдаления = ЛОЖЬ";
        
        Запрос.Текст = ТекстЗапроса;
        Выборка = Запрос.Выполнить().Выбрать();
        Если Выборка.Количество()>0 тогда
            Выборка.Следующий();
            НалоговаяНакладнаяСсылка=Выборка.Ссылка;                    
            МояНН=НалоговаяНакладнаяСсылка.ПолучитьОбъект();
            ОбластьМакета = Макет.ПолучитьОбласть("Строка");
            ОбластьМакета.Параметры.НомерСтроки		= 2;
            ОбластьМакета.Параметры.ВидДокумента    = "Налоговая накладная";
            ОбластьМакета.Параметры.НомерДокумента  = МояНН.Номер;
            ОбластьМакета.Параметры.ДатаДокумента   = Формат(МояНН.Дата,"ДФ=dd.MM.yyyy");
            ОбластьМакета.Параметры.СуммаДокумента  = Формат(МояНН.СуммаДокумента,"ЧЦ=10; ЧДЦ=2");
            ТабДокумент.Вывести(ОбластьМакета);
        Иначе
            Сообщить("Не найдена налоговая накладная... ");
        КонецЕсли;
        // Вывести Итого
        ОбластьМакета = Макет.ПолучитьОбласть("Итого");
        ТабДокумент.Вывести(ОбластьМакета);
        // Вывести подписи
        ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
        ТабДокумент.Вывести(ОбластьМакета);
        Возврат ТабДокумент;
КонецФункции

Функция ПечатьРеестраПоСтруктуре(ТабДок) 
    Если ТабДок=неопределено тогда
        ТабДок= Новый ТаблицаЗначений;
        ТабДок.Колонки.Добавить("Наименование" ,Новый  ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
        ТабДок.Колонки.Добавить("Номер"        ,Новый  ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
        ТабДок.Колонки.Добавить("Дата"         ,Новый  ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
        ТабДок.Колонки.Добавить("Сумма"        ,Новый  ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
        
        НовСтрокаТД=ТабДок.Добавить();
        НовСтрокаТД.Наименование   ="Расходная накладная";
        НовСтрокаТД.Номер               =СокрЛП(ЭтотОбъект.Номер);
        НовСтрокаТД.Дата                =Формат(ЭтотОбъект.Дата,"ДЛФ=D");
        НовСтрокаТД.Сумма               =Формат(ЭтотОбъект.СуммаДокумента,"ЧДЦ=2; ЧН=' '; ЧГ=0");
        
        //Определение налоговой накладной
        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("ДокументРеализации", ЭтотОбъект.Ссылка);
        ТекстЗапроса =
        "ВЫБРАТЬ
        |	НалоговаяНакладная.Ссылка,
        |	НалоговаяНакладная.Номер,
        |	НалоговаяНакладная.Дата
        |ИЗ
        |	Документ.НалоговаяНакладная КАК НалоговаяНакладная
        |ГДЕ
        |	НалоговаяНакладная.ДокументОснование = &ДокументРеализации
        |	И НалоговаяНакладная.ПометкаУдаления = ЛОЖЬ";
        
        Запрос.Текст = ТекстЗапроса;
        Выборка = Запрос.Выполнить().Выбрать();
        Если Выборка.Количество()>0 тогда
            Выборка.Следующий();
            НалоговаяНакладнаяСсылка=Выборка.Ссылка;                    
            МояНН=НалоговаяНакладнаяСсылка.ПолучитьОбъект();
            НовСтрокаТД=ТабДок.Добавить();
            НовСтрокаТД.Наименование   ="Налоговая накладная";
            НовСтрокаТД.Номер               =СокрЛП(МояНН.Номер);
            НовСтрокаТД.Дата                =Формат(МояНН.Дата,"ДЛФ=D");
            НовСтрокаТД.Сумма               =Формат(МояНН.СуммаДокумента,"ЧДЦ=2; ЧН=' '; ЧГ=0");
        Иначе
            Сообщить("Не найдена налоговая накладная... ");
        КонецЕсли;
    конецесли;    
    
    ТабДокумент = Новый ТабличныйДокумент;
    ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Реестрдокументов";
    ПараметрыПечати(ТабДокумент);
    Макет = ПолучитьМакет("РеестрБухДокументов");
    
    // печать производится на языке, указанном в настройках пользователя
    //КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
    КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
    //Макет.КодЯзыкаМакета = КодЯзыкаПечать;
    
    // Выводим шапку накладной
    ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
    ОбластьМакета.Параметры.Поставщик=ЭтотОбъект.Организация.НаименованиеПолное;
    ОбластьМакета.Параметры.Покупатель= ЭтотОбъект.Контрагент.НаименованиеПолное;
    ОбластьМакета.Параметры.АдресДоставки = СокрЛП(ЭтотОбъект.АдресДоставки);
    ТабДокумент.Вывести(ОбластьМакета);
    
    ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
    ТабДокумент.Вывести(ОбластьМакета);
    Шаг=0;
    Пока Шаг<ТабДок.Количество() цикл
        ОбластьМакета = Макет.ПолучитьОбласть("Строка");
        ОбластьМакета.Параметры.НомерСтроки		= Формат(Шаг+1,"ЧДЦ=0; ЧН=' '; ЧГ=0");
        ОбластьМакета.Параметры.ВидДокумента    = ТабДок[Шаг].Наименование;
        ОбластьМакета.Параметры.НомерДокумента  = ТабДок[Шаг].Номер;
        ОбластьМакета.Параметры.ДатаДокумента   = ТабДок[Шаг].Дата;
        ОбластьМакета.Параметры.СуммаДокумента  = ТабДок[Шаг].Сумма;
        ТабДокумент.Вывести(ОбластьМакета);
        Шаг=Шаг+1;
    КонецЦикла;
    
    // Вывести Итого
    ОбластьМакета = Макет.ПолучитьОбласть("Итого");
    ТабДокумент.Вывести(ОбластьМакета);
    // Вывести подписи
    ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
    ТабДокумент.Вывести(ОбластьМакета);
    Возврат ТабДокумент;
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной  AL	добавлены коды покупателя
Функция ПечатьРеестраДокументов(ТабДок = неопределено)Экспорт
    Если ТабДок=Неопределено тогда
        Возврат ПечатьПростогоРеестра();
    Иначе
        Возврат ПечатьРеестраПоСтруктуре(ТабДок);
	КонецЕсли;	
КонецФункции // ПечатьФоззи()

Функция ПараметрыПечати(ТабДок) Экспорт
    //ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 10;
	ТабДок.ПолеСлева  = 10;
	ТабДок.ПолеСнизу  = 10;
	ТабДок.ПолеСправа = 10;
	ТабДок.АвтоМасштаб=истина;
КонецФункции

Функция ПечатьТНАмстор () Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий,
	| 	Автомобиль
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
    |   ВложенныйЗапросПоТоварам.Номенклатура,
    |   ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
    |   ВложенныйЗапросПоТоварам.Количество,
    |   ВложенныйЗапросПоТоварам.КоличествоМест,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
    |   ВложенныйЗапросПоТоварам.Цена,
    |   ВложенныйЗапросПоТоварам.Сумма,
    |   ВложенныйЗапросПоТоварам.СуммаНДС,
    |   ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
    |   ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
    |   ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
    |   ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
    |   ВложенныйЗапросПоТоварам.Порции КАК Порции,
    |   ВложенныйЗапросПоТоварам.АртикулВК КАК АртикулВК,
    |   ВложенныйЗапросПоТоварам.ШтрихКод
    |ИЗ
    |   (ВЫБРАТЬ
    |       1 КАК НомерТЧ,
    |       МИНИМУМ(РеализацияТоваровУслуг.НомерМетроСтроки) КАК НомерСтрокиТЧ,
    |       РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
    |       РеализацияТоваровУслуг.Цена КАК Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
    |       РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции КАК Порции,
    |       РеализацияТоваровУслуг.АртикулВК КАК АртикулВК,
    |       СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
    |       СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
    |       СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
    |       СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
    |       РеализацияТоваровУслуг.ШтрихКод КАК ШтрихКод
    |   ИЗ
    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
    |   ГДЕ
    |       РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
    |       И РеализацияТоваровУслуг.Количество <> 0
    |   
    |   СГРУППИРОВАТЬ ПО
    |       РеализацияТоваровУслуг.Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
    |       РеализацияТоваровУслуг.Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС,
    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
    |       РеализацияТоваровУслуг.СерияНоменклатуры,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции,
    |       РеализацияТоваровУслуг.АртикулВК,
    |       РеализацияТоваровУслуг.ШтрихКод) КАК ВложенныйЗапросПоТоварам
    |
    |УПОРЯДОЧИТЬ ПО
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТНАМСТОР";
	ПараметрыПечати(ТабДокумент);
	Макет = ПолучитьМакет("ТранспортнаяНакладнаяАмстор");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
    ОбластьМакета.Параметры.ЗаголовокНакладной="Транспортна накладна  № "+ СокрЛП(ЭтотОбъект.Номер)+" від "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
    ОбластьМакета.Параметры.Автомобиль  ="Автомобіль:   "+ЭтотОбъект.Автомобиль;
    ОбластьМакета.Параметры.Водитель    ="Водій:   "+ЭтотОбъект.Водитель;
	ОбластьМакета.Параметры.Поставщик=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование());
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
    ОбластьМакета.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ОКПОПоставщика   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.АдресПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,"ЮридическийАдрес",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ТелефонПоставщика= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Телефоны",,КодЯзыкаПечать);
    
    ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ЗапросИнфо = Новый Запрос;
	ЗапросИнфо.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	ЗапросИнфо.УстановитьПараметр("Вид","Юридический адрес контрагента" );
	ЗапросИнфо.УстановитьПараметр("Вид1","Телефон контрагента");
	
	ЗапросИнфо.Текст =	"ВЫБРАТЬ
	                  	|	КонтактнаяИнформация.Объект,
	                  	|	КонтактнаяИнформация.Тип,
	                  	|	КонтактнаяИнформация.Вид,
	                  	|	КонтактнаяИнформация.Представление КАК Представление,
	                  	|	КонтактнаяИнформация.Поле1,
	                  	|	КонтактнаяИнформация.Поле2,
	                  	|	КонтактнаяИнформация.Поле3,
	                  	|	КонтактнаяИнформация.Поле4,
	                  	|	КонтактнаяИнформация.Поле5,
	                  	|	КонтактнаяИнформация.Поле6,
	                  	|	КонтактнаяИнформация.Поле7,
	                  	|	КонтактнаяИнформация.Поле8,
	                  	|	КонтактнаяИнформация.Поле9,
	                  	|	КонтактнаяИнформация.Поле10
	                  	|ИЗ
	                  	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                  	|ГДЕ
	                  	|	КонтактнаяИнформация.Объект = &Объект
	                  	|	И (КонтактнаяИнформация.Вид.Наименование = &Вид
	                  	|			ИЛИ КонтактнаяИнформация.Вид.Наименование = &Вид1)
	                  	|
	                  	|УПОРЯДОЧИТЬ ПО
	                  	|	КонтактнаяИнформация.Тип.Порядок";
	
	
	Если не ЗапросИнфо.Выполнить().Пустой() тогда
		ЗапросИнфо= ЗапросИнфо.Выполнить().Выгрузить();
		СтрокаИнфо=1;
		Для каждого ВыборкаСтрокИнфо из ЗапросИнфо Цикл 
			Если СтрокаИнфо=1 тогда
				ОбластьМакета.Параметры.АдресПокупателя		= ВыборкаСтрокИнфо.Поле4+" "+ВыборкаСтрокИнфо.Поле1+", " +ВыборкаСтрокИнфо.Поле6+", "+ВыборкаСтрокИнфо.Поле7;
				//ОбластьМакета.Параметры.ГородИндексПокупателя= ВыборкаСтрокИнфо.Поле4+" "+ВыборкаСтрокИнфо.Поле1;
			Иначе
				ОбластьМакета.Параметры.ТелефонПокупателя	= ВыборкаСтрокИнфо.Представление;
			КонецЕсли;
			СтрокаИнфо=СтрокаИнфо+1;
	    КонецЦикла;
	КонецЕсли;
	
	ОбластьМакета.Параметры.НомерПоставщика =ЭтотОбъект.Контрагент.НомерДляНашейОрганизации;
    //Константы.НомерАмсторПоставщика.Получить();
	ОбластьМакета.Параметры.НомерМетроЗаказа=ЭтотОбъект.НомерМетроЗаказа;
    ОбластьМакета.Параметры.АдресДоставки   =ЭтотОбъект.АдресДоставки;
    ОбластьМакета.Параметры.НомерДоговора   =ЭтотОбъект.ДоговорКонтрагента.Номер+" від "+Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВыводитьКоды = Ложь;
	//Сообщить("1");
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
    НомерСтроки=0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//ОбластьДанных.Параметры.НомерСтроки 	= ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		ОбластьДанных.Параметры.Товар 			= СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+?(СтрДлина(СокрЛП(ВыборкаСтрокТовары.Порции))=0," ", ", "+СокрЛП(ВыборкаСтрокТовары.Порции))+")");
		ОбластьДанных.Параметры.ЕдИзм 			= ВыборкаСтрокТовары.ЕдиницаИзмерения ;
		//ВыборкаСтрокТовары.Артикул;
		ОбластьДанных.Параметры.Артикул=СокрЛП(ВыборкаСтрокТовары.АртикулВК);
		ОбластьДанных.Параметры.КодРМК="00"+Сред(СокрЛП(ВыборкаСтрокТовары.ШтрихКод),3,5);
        //СокрЛП(ВыборкаСтрокТовары.АртикулВК);
        НомерСтроки=НомерСтроки+1;
        ОбластьДанных.Параметры.НомерСтроки=НомерСтроки;
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.Количество,"ЧЦ=6; ЧДЦ=3; ЧГ=0");
		ТабДокумент.Вывести(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
	КонецЦикла;
 
    ОбластьМакета = Макет.ПолучитьОбласть("Итог");
        ОбластьМакета.Параметры.ИтогоКол=Формат(ВсегоКоличество,"ЧДЦ=3"); 
    ТабДокумент.Вывести(ОбластьМакета);
    
    ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьТНАмстор()

Функция ПечатьЗаявкаАмстор () Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий,
	| 	Автомобиль
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =	"ВЫБРАТЬ
                    |   ВложенныйЗапросПоТоварам.НомерТЧ,
                    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
                    |   ВложенныйЗапросПоТоварам.Номенклатура,
                    |   ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
                    |   ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
                    |   ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
                    |   ВложенныйЗапросПоТоварам.Количество,
                    |   ВложенныйЗапросПоТоварам.КоличествоМест,
                    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
                    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
                    |   ВложенныйЗапросПоТоварам.Цена,
                    |   ВложенныйЗапросПоТоварам.Сумма,
                    |   ВложенныйЗапросПоТоварам.СуммаНДС,
                    |   ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
                    |   ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
                    |   ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
                    |   ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
                    |   ВложенныйЗапросПоТоварам.Порции КАК Порции,
                    |   ВложенныйЗапросПоТоварам.АртикулВК КАК АртикулВК,
                    |   ВложенныйЗапросПоТоварам.КоличествоЗаявки КАК КоличествоЗаявки,
                    |   ВложенныйЗапросПоТоварам.АртикулПокупателя КАК АртикулПокупателя,
                    |   ВложенныйЗапросПоТоварам.ШтрихКод КАК ШтрихКод
                    |ИЗ
                    |   (ВЫБРАТЬ
                    |       1 КАК НомерТЧ,
                    |       МИНИМУМ(РеализацияТоваровУслуг.НомерМетроСтроки) КАК НомерСтрокиТЧ,
                    |       РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
                    |       РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
                    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
                    |       РеализацияТоваровУслуг.Цена КАК Цена,
                    |       РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
                    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
                    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
                    |       РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
                    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
                    |       РеализацияТоваровУслуг.Порции КАК Порции,
                    |       РеализацияТоваровУслуг.АртикулВК КАК АртикулВК,
                    |       СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
                    |       СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
                    |       СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
                    |       СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
                    |       СУММА(РеализацияТоваровУслуг.КоличествоЗаявки) КАК КоличествоЗаявки,
                    |       РеализацияТоваровУслуг.АртикулПокупателя КАК АртикулПокупателя,
                    |       РеализацияТоваровУслуг.ШтрихКод КАК ШтрихКод
                    |   ИЗ
                    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
                    |   ГДЕ
                    |       РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
                    |       И РеализацияТоваровУслуг.Количество <> 0
                    |   
                    |   СГРУППИРОВАТЬ ПО
                    |       РеализацияТоваровУслуг.Номенклатура,
                    |       РеализацияТоваровУслуг.ЕдиницаИзмерения,
                    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
                    |       РеализацияТоваровУслуг.Цена,
                    |       РеализацияТоваровУслуг.СтавкаНДС,
                    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
                    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
                    |       РеализацияТоваровУслуг.СерияНоменклатуры,
                    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
                    |       РеализацияТоваровУслуг.Порции,
                    |       РеализацияТоваровУслуг.АртикулВК,
                    |       РеализацияТоваровУслуг.КоличествоЗаявки,
                    |       РеализацияТоваровУслуг.АртикулПокупателя,
                    |       РеализацияТоваровУслуг.ШтрихКод) КАК ВложенныйЗапросПоТоварам
                    |
                    |УПОРЯДОЧИТЬ ПО
                    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаАмстор";
	ПараметрыПечати(ТабДокумент);
	Макет = ПолучитьМакет("ЗаявкаАмстор");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
    ОбластьМакета.Параметры.ЗаголовокНакладной="Замовлення на придбання товару № "+ СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
    ОбластьМакета.Параметры.НомерДоговора   =ЭтотОбъект.ДоговорКонтрагента.Номер+" від "+Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy");
    ОбластьМакета.Параметры.ДатаЗаявки      =Формат(ЭтотОбъект.ЗаявкаДата,"ДФ=dd.MM.yyyy");
    
    ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
    ОбластьМакета.Параметры.МенеджерАссортимента= ЭтотОбъект.Контрагент.ОсновноеКонтактноеЛицо;
    ОбластьМакета.Параметры.НомерПоставщика =ЭтотОбъект.Контрагент.НомерДляНашейОрганизации;
    //Константы.НомерАмсторПоставщика.Получить();//???
    ОбластьМакета.Параметры.Поставщик=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование());
    ОбластьМакета.Параметры.КонтактноеЛицо=ЭтотОбъект.Контрагент.ОсновнойМенеджерПокупателя;
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
    ОбластьМакета.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ТелефонПоставщика= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Телефоны",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ФаксПоставщика   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,"Факс",,КодЯзыкаПечать);
    //ОбластьМакета.Параметры.АдресПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,"ЮридическийАдрес",,КодЯзыкаПечать);
    
    ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ЗапросИнфо = Новый Запрос;
	ЗапросИнфо.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	ЗапросИнфо.УстановитьПараметр("Вид",ЭтотОбъект.ВидАдреса);
	
	
	ЗапросИнфо.Текст =	"ВЫБРАТЬ
	                  	|	КонтактнаяИнформация.Объект,
	                  	|	КонтактнаяИнформация.Тип,
	                  	|	КонтактнаяИнформация.Вид,
	                  	|	КонтактнаяИнформация.Представление КАК Представление,
	                  	|	КонтактнаяИнформация.Поле1,
	                  	|	КонтактнаяИнформация.Поле2,
	                  	|	КонтактнаяИнформация.Поле3,
	                  	|	КонтактнаяИнформация.Поле4,
	                  	|	КонтактнаяИнформация.Поле5,
	                  	|	КонтактнаяИнформация.Поле6,
	                  	|	КонтактнаяИнформация.Поле7,
	                  	|	КонтактнаяИнформация.Поле8,
	                  	|	КонтактнаяИнформация.Поле9,
	                  	|	КонтактнаяИнформация.Поле10
	                  	|ИЗ
	                  	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                  	|ГДЕ
	                  	|	КонтактнаяИнформация.Объект = &Объект
	                  	|	И КонтактнаяИнформация.Вид = &Вид";
	
	
	Если не ЗапросИнфо.Выполнить().Пустой() тогда
		ЗапросИнфо= ЗапросИнфо.Выполнить().Выгрузить();
		СтрокаИнфо=1;
		Для каждого ВыборкаСтрокИнфо из ЗапросИнфо Цикл 
            //Если СтрокаИнфо=1 тогда
				//ОбластьМакета.Параметры.АдресПокупателя		= ВыборкаСтрокИнфо.Поле4+" "+ВыборкаСтрокИнфо.Поле1+", " +ВыборкаСтрокИнфо.Поле6+", "+ВыборкаСтрокИнфо.Поле7;
                ОбластьМакета.Параметры.ГородПоставки= ВыборкаСтрокИнфо.Поле4;//+" "+ВыборкаСтрокИнфо.Поле1;
                ОбластьМакета.Параметры.УлицаДом=" "+ВыборкаСтрокИнфо.Поле6+"  /  "+ВыборкаСтрокИнфо.Поле7;
            //Иначе
            //	ОбластьМакета.Параметры.ТелефонПокупателя	= ВыборкаСтрокИнфо.Представление;
            //КонецЕсли;
			СтрокаИнфо=СтрокаИнфо+1;
	    КонецЦикла;
	КонецЕсли;
	ОбластьМакета.Параметры.ОтветственноеЛицо=ЭтотОбъект.Контрагент.ОсновноеКонтактноеЛицо;
    ОбластьМакета.Параметры.Банк             = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Банк",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.МФО              = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "МФО",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.НомерСчета       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ДатаПоставки     = Формат(ЭтотОбъект.ЗаявкаДата,"ДФ=dd.MM.yyyy"); 
    ТабДокумент.Вывести(ОбластьМакета);
	
	ВыводитьКоды = Ложь;
	//Сообщить("1");
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
    НомерСтроки=0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		ОбластьДанных.Параметры.Товар 			= СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+?(СтрДлина(СокрЛП(ВыборкаСтрокТовары.Порции))=0," ", ", "+СокрЛП(ВыборкаСтрокТовары.Порции))+")");
		ОбластьДанных.Параметры.ЕдИзм 			= ВыборкаСтрокТовары.ЕдиницаИзмерения ;
		ОбластьДанных.Параметры.АртикулПокупателя=СокрЛП(ВыборкаСтрокТовары.АртикулВК);
		ОбластьДанных.Параметры.АртикулПоставщика="00"+Сред(СокрЛП(ВыборкаСтрокТовары.ШтрихКод),3,5);
        //СокрЛП(ВыборкаСтрокТовары.АртикулВК);
        ОбластьДанных.Параметры.ШтрихКод         =СокрЛП(ВыборкаСтрокТовары.ШтрихКод);
        
        НомерСтроки=НомерСтроки+1;
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.КоличествоЗаявки,"ЧЦ=6; ЧДЦ=3; ЧГ=0");
   		ТекЦена=?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена,ВыборкаСтрокТовары.Цена*1.2);
		ОбластьДанных.Параметры.Цена            = Формат(ТекЦена,"ЧЦ=6; ЧДЦ=2; ЧГ=0");
        //Формат(?(ВыборкаСтрокТовары.АвтоматическаяСкидка=0 И ВыборкаСтрокТовары.Скидка=0,ТекЦена,ТекЦена*(100-(ВыборкаСтрокТовары.АвтоматическаяСкидка+ВыборкаСтрокТовары.Скидка))/100),"ЧЦ=10; ЧДЦ=2"); 
		ТабДокумент.Вывести(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.КоличествоЗаявки;
	КонецЦикла;
    //ОбластьМакета = Макет.ПолучитьОбласть("Итог");
    //    ОбластьМакета.Параметры.ИтогоКол=ВсегоКоличество; 
    //ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьЗаявкаАмстор()

Функция НакладнаяАМСТОР ()Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
    |   ВложенныйЗапросПоТоварам.Номенклатура,
    |   ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
    |   ВложенныйЗапросПоТоварам.Количество,
    |   ВложенныйЗапросПоТоварам.КоличествоМест,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
    |   ВложенныйЗапросПоТоварам.Цена,
    |   ВложенныйЗапросПоТоварам.Сумма,
    |   ВложенныйЗапросПоТоварам.СуммаНДС,
    |   ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
    |   ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
    |   ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
    |   ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
    |   ВложенныйЗапросПоТоварам.Порции КАК Порции,
    |   ВложенныйЗапросПоТоварам.АртикулВК КАК АртикулВК,
    |   ВложенныйЗапросПоТоварам.АртикулПокупателя,
    |   ВложенныйЗапросПоТоварам.ШтрихКод
    |ИЗ
    |   (ВЫБРАТЬ
    |       1 КАК НомерТЧ,
    |       МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
    |       РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
    |       РеализацияТоваровУслуг.Цена КАК Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
    |       РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции КАК Порции,
    |       РеализацияТоваровУслуг.АртикулВК КАК АртикулВК,
    |       СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
    |       СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
    |       СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
    |       СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
    |       РеализацияТоваровУслуг.АртикулПокупателя КАК АртикулПокупателя,
    |       РеализацияТоваровУслуг.ШтрихКод КАК ШтрихКод
    |   ИЗ
    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
    |   ГДЕ
    |       РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
    |   
    |   СГРУППИРОВАТЬ ПО
    |       РеализацияТоваровУслуг.Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
    |       РеализацияТоваровУслуг.Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС,
    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
    |       РеализацияТоваровУслуг.СерияНоменклатуры,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции,
    |       РеализацияТоваровУслуг.АртикулВК,
    |       РеализацияТоваровУслуг.АртикулПокупателя,
    |       РеализацияТоваровУслуг.ШтрихКод) КАК ВложенныйЗапросПоТоварам
    |
    |УПОРЯДОЧИТЬ ПО
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяАМСТОР";
	ПараметрыПечати(ТабДокумент);
	Макет = ПолучитьМакет("НакладнаяАмстор");

	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
    
    
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Товарна накладна";
        ОбластьМакета.Параметры.Номер          =  СокрЛП(ЭтотОбъект.Номер);
        ОбластьМакета.Параметры.Дата           =  Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
        ОбластьМакета.Параметры.НомерЗаказа    =  СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
	ТабДокумент.Вывести(ОбластьМакета);
    
    ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьМакета);

    ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьМакета);
	//**********************************************
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	//ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СтрПоставщик			= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	СтрРеквизитыПоставщика	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	//ТабДокумент.Вывести(ОбластьМакета);

//	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
//	ОбластьМакета.Параметры.Заполнить(Шапка);	
//  ОбластьМакета.Параметры.ПредставлениеПокупателя 
	СтрПокупатель 			= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать)+" ЕГРПОУ "+СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ);
	СтрРеквизитыПокупателя	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	//ТабДокумент.Вывести(ОбластьМакета);
	//**********************************************
    //СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
//	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭтотОбъект.Организация.НаименованиеПолное;
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СтрПоставщик;
	ОбластьМакета.Параметры.РассшифровкаПоставщика	=СтрРеквизитыПоставщика;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
//	ОбластьМакета.Параметры.ПредставлениеПокупателя = ЭтотОбъект.Контрагент.НаименованиеПолное;
	ОбластьМакета.Параметры.ПредставлениеПокупателя =СтрПокупатель;
	ОбластьМакета.Параметры.РасшифровкаПокупателя	=СтрРеквизитыПокупателя;
	ТабДокумент.Вывести(ОбластьМакета);
    
    ОбластьМакета = Макет.ПолучитьОбласть("Основание");
	
	ОбластьМакета.Параметры.ПоДоговору              = "Згідно договору № "+ЭтотОбъект.ДоговорКонтрагента.Номер+" від "+Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy");    
    ОбластьМакета.Параметры.ПоТранспортнойНакладной = "Згідно транспортної накладної № "+ЭтотОбъект.Номер + " від "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
    СтрокаУпаковки="";
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.НомерСтроки		 = ВыборкаСтрокТовары.НомерСтрокиТЧ;
		ОбластьМакета.Параметры.Артикул			 = ВыборкаСтрокТовары.АртикулВК;
        ОбластьМакета.Параметры.АртикулПоставщика= "00"+Сред(СокрЛП(ВыборкаСтрокТовары.ШтрихКод),3,5);
        
        СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);        
		ОбластьМакета.Параметры.Товар            = СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+?(СтрДлина(СокрЛП(ВыборкаСтрокТовары.Порции))=0," ", ", "+СокрЛП(ВыборкаСтрокТовары.Порции))+")");
        
		ОбластьМакета.Параметры.ЕдиницаИзмерения = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Количество       = ВыборкаСтрокТовары.Количество;
		//***ОбластьМакета.Параметры.Цена             = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");
		ОбластьМакета.Параметры.Цена             = Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5/ВыборкаСтрокТовары.Количество, ВыборкаСтрокТовары.Сумма/ВыборкаСтрокТовары.Количество),"ЧЦ=10; ЧДЦ=2");
		ОбластьМакета.Параметры.Сумма            = Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма),"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		Сумма          = Сумма       + ?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма);
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего=Сумма;
	ОбластьМакета.Параметры.ВсегоНДС=СуммаНДС;    
	ОбластьМакета.Параметры.Сумма=СуммаНДС+Сумма;    
	ТабДокумент.Вывести(ОбластьМакета);

    //// Вывести Сумму прописью
    ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
    СуммаКПрописи=СуммаНДС+Сумма;
    ОбластьМакета.Параметры.ИтоговаяСтрока = "Всього  на суму ";
    ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
     										 + ". У т.ч. ПДВ: "  + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать);
    ТабДокумент.Вывести(ОбластьМакета);

    //// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	алПредставительПоставщика="";
    алПредставительПоставщика=глЗначениеПеременной("глТекущийПользователь").ФизЛицо;
    

    ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,алПредставительПоставщика, Шапка.Дата);
    ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	ОбластьМакета.Параметры.Выписал = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // НакладнаяАмстор()

Функция ПечатьАдвентис()Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	РеализацияТоваровУслуг.ДоверенностьСерия,
	|	РеализацияТоваровУслуг.ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьПолучил,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.АдресДоставки,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ДоговорДата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК НомерДоговора
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия, Порции КАК Порции,АртикулВК КАК АртикулВК
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,Порции КАК Порции,
	|		АртикулВК КАК АртикулВК,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,Порции,АртикулВК
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НомерСтроки,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	0,
	|	NULL,
	|	NULL,NULL,NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяАдвентис";
	
	Макет = ПолучитьМакет("НакладнаяАдвентис");

	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,НомерСчета,МФО,/,ИНН,НомерСвидетельства,/,ЮридическийАдрес",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя	= формированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,НомерСчета,МФО,/,ИНН,НомерСвидетельства,/,ЮридическийАдрес",,КодЯзыкаПечать);
	//Сообщить("КодЯзыкаПечать "+КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.АдресДорставки	=	ЭтотОбъект.АдресДоставки;
	ОбластьМакета.Параметры.Договор			= 	Шапка.НомерДоговора+" от "+Формат(Шапка.ДоговорДата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//ОбластьМакета = Макет.ПолучитьОбласть("Основание");
	//	ОбластьМакета.Параметры.ЗаказМетро = СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
	//	ОбластьМакета.Параметры.НомерДоговора = СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Номер);
	//	ОбластьМакета.Параметры.ДатаДоговора  = Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy");
	//ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "НАКЛАДНАЯ № "+ЭтотОбъект.Номер + " вiд " + Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);

	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) или ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
    
  	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|Артикул");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьКодов);
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
    
	//Если НЕ ЕстьСкидки Тогда
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
	//										Макет.Область("СуммаБезСкидки").ШиринаКолонки +
	//										Макет.Область("СуммаСкидки").ШиринаКолонки;
	//КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|Артикул");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
    
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
        //*****************************************
        Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		//ОбластьМакета = Макет.ПолучитьОбласть("Строка");
        ОбластьНомера.Параметры.НомерСтроки = ВыборкаСтрокТовары.НомерСтрокиТЧ;//ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
//		ОбластьМакета.Параметры.НомерСтроки		= ВыборкаСтрокТовары.НомерСтрокиТЧ;
		ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.АртикулВК;
        ТабДокумент.Присоединить(ОбластьКодов);
        //ОбластьМакета.Параметры.Артикул			= ВыборкаСтрокТовары.АртикулВК;
        ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика), "", "(" + ВыборкаСтрокТовары.Характеристика +")")+ ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Порции), "", "(" + ВыборкаСтрокТовары.Порции+")");
		ОбластьДанных.Параметры.ЕдиницаИзмерения= ВыборкаСтрокТовары.ЕдиницаИзмерения;
		ОбластьДанных.Параметры.Количество      = ВыборкаСтрокТовары.Количество;
		ОбластьДанных.Параметры.Цена            = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена, ВыборкаСтрокТовары.Цена*1.2),"ЧЦ=10; ЧДЦ=2");
        ТабДокумент.Присоединить(ОбластьДанных);
        
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) И НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка)) * (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка);
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
        ОбластьСуммы.Параметры.Сумма           = Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Сумма*1.2),"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Сумма*1.2);
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

   	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|Артикул");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьКодов);
    ОбластьДанных.Параметры.НомерЗаказа="Номер заказа "+СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = Формат(ВсегоСкидок,"ЧЦ=10; ЧДЦ=2");
		ОбластьСкидок.Параметры.ВсегоБезСкидок = Формат(ВсегоБезСкидок,"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего           =Формат(ЭтотОбъект.СуммаДокумента-СуммаНДС,"ЧЦ=10; ЧДЦ=2");
	ТабДокумент.Присоединить(ОбластьСуммы);
	// Вывести ИтогоНДС
    
	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|Артикул");
	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьКодов);
    ТабДокумент.Присоединить(ОбластьДанных);
    Если ЕстьСкидки Тогда
        ТабДокумент.Присоединить(ОбластьСкидок);
    КонецЕсли;
    ОбластьСуммы.Параметры.ВсегоНДС=СуммаНДС;
    ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоДополнительно
    
   	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|Артикул");
	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьКодов);
    ТабДокумент.Присоединить(ОбластьДанных);
    Если ЕстьСкидки Тогда
        ТабДокумент.Присоединить(ОбластьСкидок);
    КонецЕсли;
    ОбластьСуммы.Параметры.Сумма=ЭтотОбъект.СуммаДокумента;
    ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи=ЭтотОбъект.СуммаДокумента;
	
    ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + ",   весом " + ВсегоВес+ " кг.,"+
    НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + формат(СуммаКПрописи,"ЧЦ=10; ЧДЦ=2; ЧГ=0") ;

    
    
    
    
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + "  У т.ч. ПДВ: "  + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	 // Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
    //***//***//Н.Ф. Н.А. по просьбе сбыт - бухгалтер, который распечатал 23-05-13
    мПредставительПоставщика="";
	Если ЭтотОбъект.ПредставительОрганизации=Справочники.ФизическиеЛица.ПустаяСсылка() тогда
		мПредставительПоставщика=глЗначениеПеременной("глТекущийПользователь").ФизЛицо;
	Иначе
		мПредставительПоставщика=ЭтотОбъект.ПредставительОрганизации;
	КонецЕсли;
	Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалДокументыРМК");
	Если ЗначениеЗаполнено(Подмена) тогда
		мПредставительПоставщика=Подмена;//Справочники.ФизическиеЛица.НайтиПоКоду("000000656");//*** Овчаренко Тетяна Миколаївна 
	КонецЕсли;	
	
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,мПредставительПоставщика, Шапка.Дата);
    ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	ОбластьМакета.Параметры.Выписал = ДолжностьФИОПредставителя;
	//ОбластьМакета.Параметры.Ответственный 		= Шапка.ОтпускПроизвел.Наименование;
	//ОбластьМакета.Параметры.ДоверенностьСерия	= Шапка.ДоверенностьСерия;
	//ОбластьМакета.Параметры.ДоверенностьНомер	= Шапка.ДоверенностьНомер;
	//ОбластьМакета.Параметры.ДоверенностьДата	= Шапка.ДоверенностьДата;
	//ОбластьМакета.Параметры.ДоверенностьПолучил = Шапка.ДоверенностьПолучил;
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;

КонецФункции // ПечатьАдвентисНовый()

Функция ПечатьИнвойс() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	СУММА(ВЫБОР КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС ТОГДА РеализацияТоваровУслугТовары.Сумма 
	|	ИНАЧЕ РеализацияТоваровУслугТовары.Сумма+РеализацияТоваровУслугТовары.СуммаНДС КОНЕЦ) КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьИнвойс";
	Макет = ПолучитьМакет("Инвойс");
	НомерБелойНакладной	= Формат(Число(ЭтотОбъект.Номер),"ЧДЦ=0; ЧГ=0");
	ВвестиСтроку(НомерБелойНакладной, "Введите номер спецификации.", 11);
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = "ru";
	//кализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Номер		= "  "+Формат(Число(ЭтотОбъект.Номер),"ЧДЦ=0; ЧГ=0");
	ОбластьМакета.Параметры.Дата		= Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Контракт	="Контракт № "+СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Номер)+" от "+Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy")+" г.";
	ОбластьМакета.Параметры.Специяикация= " № "+НомерБелойНакладной+" от "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+" г.";
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ВсегоСумма      = 0;
	ВсегоКоличество = 0;
	ВсегоВес=0;
    НомерПП=0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
        КонецЕсли;
        ОбластьДанных = Макет.ПолучитьОбласть("Строка");
		ОбластьДанных.Параметры.НомерСтроки 	= НомерПП + 1;
		ОбластьДанных.Параметры.Товар 			= ВыборкаСтрокТовары.Номенклатура;
		ОбластьДанных.Параметры.ЕдИзм 			= СокрЛП(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование);
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
        ОбластьДанных.Параметры.Цена		    = Формат(?(ВыборкаСтрокТовары.Количество=0,0,ВыборкаСтрокТовары.Сумма/ВыборкаСтрокТовары.Количество),"ЧДЦ=2");
        ОбластьДанных.Параметры.Сумма	        = Формат(ВыборкаСтрокТовары.Сумма,"ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьДанных);
        ВсегоКоличество =   ВсегоКоличество + ВыборкаСтрокТовары.Количество;
        ВсегоСумма      =   ВсегоСумма      + ВыборкаСтрокТовары.Сумма;
		Вес=ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес;
		ВсегоВес		=	ВсегоВес		+ВыборкаСтрокТовары.Количество*?(Вес=0,1,Вес);
        НомерПП=НомерПП+1;
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИтого");
    ОбластьМакета.Параметры.ИтогоСумма      = Формат(ВсегоСумма,"ЧДЦ=2") ;
	ОбластьМакета.Параметры.ИтогоКоличество	= Формат(ВсегоКоличество,"ЧДЦ=3") ;
	
	ТабДокумент.Вывести(ОбластьМакета);
    
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.СуммаПрописью	= 	ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоСумма, Шапка.ВалютаДокумента,КодЯзыкаПечать);
	
//	ОбластьМакета.Параметры.ВесТары			=	Формат(ВсегоВес,"ЧДЦ=3; ЧГ=0")+" кг.";
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьИнвойс()

Функция ПечатьСпецификацияКриворотько()Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	СУММА(ВЫБОР КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС ТОГДА РеализацияТоваровУслугТовары.Сумма 
	|	ИНАЧЕ РеализацияТоваровУслугТовары.Сумма+РеализацияТоваровУслугТовары.СуммаНДС КОНЕЦ) КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СпецификацияКриворотько";
	Макет = ПолучитьМакет("СпецификацияКриворотько");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = "ru";
	//кализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	НомерБелойНакладной	= Формат(Число(ЭтотОбъект.Номер),"ЧДЦ=0; ЧГ=0");
	ВвестиСтроку(НомерБелойНакладной, "Введите номер спецификации.", 11);
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Номер		= "СПЕЦИФИКАЦИЯ  №"+НомерБелойНакладной;
	ОбластьМакета.Параметры.Дата		= Формат(ЭтотОбъект.Дата,"ДЛФ=DD");
	//
	//СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЭтотОбъект.Контрагент, ЭтотОбъект.Дата,,,КодЯзыкаПечать);
	//Ю_Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе , "ЮридическийАдрес",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.Покупатель	= СокрЛП(ЭтотОбъект.Контрагент.НаименованиеПолное)+", "+СОКРЛП(Ю_Адрес);
	//
	ОбластьМакета.Параметры.Контракт	="к контракту № "+СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Номер)+" от "+Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy; ДЛФ=DD");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ВсегоСумма      = 0;
	ВсегоКоличество = 0;
	ВсегоВес=0;
    НомерПП=0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
        КонецЕсли;
        ОбластьДанных = Макет.ПолучитьОбласть("Строка");
		ОбластьДанных.Параметры.НомерСтроки 	= НомерПП + 1;
		ОбластьДанных.Параметры.Товар 			= ВыборкаСтрокТовары.Номенклатура;
		ОбластьДанных.Параметры.ЕдИзм 			= СокрЛП(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование);
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
        ОбластьДанных.Параметры.Цена		    = Формат(?(ВыборкаСтрокТовары.Количество=0,0,ВыборкаСтрокТовары.Сумма/ВыборкаСтрокТовары.Количество),"ЧДЦ=2");
        ОбластьДанных.Параметры.Сумма	        = Формат(ВыборкаСтрокТовары.Сумма,"ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьДанных);
        ВсегоКоличество =   ВсегоКоличество + ВыборкаСтрокТовары.Количество;
        ВсегоСумма      =   ВсегоСумма      + ВыборкаСтрокТовары.Сумма;
		Вес=ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес;
		ВсегоВес		=	ВсегоВес		+ВыборкаСтрокТовары.Количество*?(Вес=0,1,Вес);
        НомерПП=НомерПП+1;
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИтого");
    ОбластьМакета.Параметры.ИтогоСумма      = Формат(ВсегоСумма,"ЧДЦ=2") ;
	ОбластьМакета.Параметры.ИтогоКоличество	= Формат(ВсегоКоличество,"ЧДЦ=3") ;
	
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.СуммаПрописью	= 	"наименований "+Формат(НомерПП,"ЧДЦ=0")+", на сумму "+
		НРег(ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоСумма, Шапка.ВалютаДокумента,КодЯзыкаПечать)) + ", в количестве "+Формат(ВсегоКоличество,"ЧДЦ=3")+ "кг.";
	    
//	ОбластьМакета.Параметры.ВесТары			=	Формат(ВсегоВес,"ЧДЦ=3; ЧГ=0")+" кг.";
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьИнвойс()

Функция ПечатьПроформаНаТаруТаможня() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	СУММА(РеализацияТоваровУслугВозвратнаяТара.Количество) КАК Количество,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена,
	|	СУММА(РеализацияТоваровУслугВозвратнаяТара.Сумма) КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьПроформаНаТаруТаможня";
	Макет = ПолучитьМакет("СчетПроформаНаТару");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	//найдем документ в белой базе
	// т.к. найти не возможно (несколько накладных в одной дате, сумма и количество УУ и БУ не совпадает 20-10-14 накладные 00000118210 )
	// пусть вводят вручную
		//Коннектор=Новый COMObject("V82.COMConnector");
		//Импорт=Коннектор.Connect("Srvr=""1CSERVER""; Ref=""RMKBUHBASE""; SQLSrvr=""1CSERVER""; SQLDB= ""RMKBUHBASE""; Usr =""БелаяОтгрузка""; Pwd =""Роганский1978""");
		//ИмпортКонтрагенты = Импорт.Справочники.Контрагенты;
		//ИмпортКонтрагент=ИмпортКонтрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",МойДокумент.Контрагент.КодПоЕДРПОУ);
		//Если  СокрЛП(ИмпортКонтрагент.Наименование)<>"" тогда
		//	ИмпортРеализация=Импорт.Документы.РеализацияТоваровУслуг;
		//	Выборка = ИмпортРеализация.Выбрать(НачалоДня(МойДокумент.Дата),КонецДня(МойДокумент.Дата));
		//	Пока Выборка.Следующий() Цикл
		//		Текст=Сред(СокрЛП(Выборка.Комментарий),14,11);
		//		//Сообщить(Текст);
		//		//Копия из УУ №00000045113,  от 01.06.2012 7:45:31
		//		Если СокрЛП(Текст)=СокрЛП(МойДокумент.Номер) тогда
		//			НомерНакладной=Выборка.Номер;
		//			//Сообщить("Вот Он "+НомерНакладной);
		//		КонецЕсли;   
		//		//Индекс=Индекс+1;
		//	КонецЦикла;
		//КонецЕсли;
	//***	
	//НомерБелойНакладной	= Формат(Число(ЭтотОбъект.Номер),"ЧДЦ=0; ЧГ=0");
	//ВвестиСтроку(НомерБелойНакладной, "Введите номер документа из Бух. учета.", 11);
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Номер		= "  "+ЭтотОбъект.Номер;
	ОбластьМакета.Параметры.Дата		= Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Контракт	="Контракт № "+СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Номер)+" от "+Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy")+" г.";
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	
	ОбластьДанных = Макет.ПолучитьОбласть("Пояснение");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ВсегоСумма      = 0;
	ВсегоКоличество = 0;
	ВсегоВес=0;
    НомерПП=0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
        КонецЕсли;
        ОбластьДанных = Макет.ПолучитьОбласть("Строка");
		ОбластьДанных.Параметры.НомерСтроки 	= НомерПП + 1;
		ОбластьДанных.Параметры.Товар 			= ВыборкаСтрокТовары.Номенклатура;
		ОбластьДанных.Параметры.ЕдИзм 			= СокрЛП(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование);
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
        ОбластьДанных.Параметры.Цена		    = Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
        ОбластьДанных.Параметры.Сумма	        = Формат(ВыборкаСтрокТовары.Сумма,"ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьДанных);
        ВсегоКоличество =   ВсегоКоличество + ВыборкаСтрокТовары.Количество;
        ВсегоСумма      =   ВсегоСумма      + ВыборкаСтрокТовары.Сумма;
		Вес=ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес;
		ВсегоВес		=	ВсегоВес		+ВыборкаСтрокТовары.Количество*?(Вес=0,3,Вес);
        НомерПП=НомерПП+1;
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИтого");
    ОбластьМакета.Параметры.ИтогоСумма      = Формат(ВсегоСумма,"ЧДЦ=2") ;
	ТабДокумент.Вывести(ОбластьМакета);
    
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.СуммаПрописью	= 	ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоСумма, Шапка.ВалютаДокумента,КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.ВесТары			=	Формат(ВсегоВес,"ЧДЦ=3; ЧГ=0")+" кг.";
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьПроформаНаТаруТаможня()

//НакладнаяБилла
Функция НакладнаяБилла() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	Ответственный.ФизЛицо КАК ФизЛицо,	
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
    "ВЫБРАТЬ
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
    |   ВложенныйЗапросПоТоварам.Номенклатура,
    |   ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
    |   ВложенныйЗапросПоТоварам.Количество,
    |   ВложенныйЗапросПоТоварам.КоличествоМест,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
    |   ВложенныйЗапросПоТоварам.Цена,
    |   ВложенныйЗапросПоТоварам.Сумма,
    |   ВложенныйЗапросПоТоварам.СуммаНДС,
    |   ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
    |   ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
    |   ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
    |   ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
    |   ВложенныйЗапросПоТоварам.Порции КАК Порции,
    |   ВложенныйЗапросПоТоварам.АртикулВК КАК АртикулВК,
    |   ВложенныйЗапросПоТоварам.ШтрихКод КАК ШтрихКод,
    |   ВложенныйЗапросПоТоварам.НомерМетроСтроки КАК НомерМетроСтроки
    |ИЗ
    |   (ВЫБРАТЬ
    |       1 КАК НомерТЧ,
    |       МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
    |       РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
    |       РеализацияТоваровУслуг.Цена КАК Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
    |       РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции КАК Порции,
    |       РеализацияТоваровУслуг.АртикулВК КАК АртикулВК,
    |       РеализацияТоваровУслуг.ШтрихКод КАК ШтрихКод,
    |       СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
    |       СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
    |       СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
    |       СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
    |       РеализацияТоваровУслуг.НомерМетроСтроки КАК НомерМетроСтроки
    |   ИЗ
    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
    |   ГДЕ
    |       РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
    |   
    |   СГРУППИРОВАТЬ ПО
    |       РеализацияТоваровУслуг.Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
    |       РеализацияТоваровУслуг.Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС,
    |       РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
    |       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
    |       РеализацияТоваровУслуг.СерияНоменклатуры,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции,
    |       РеализацияТоваровУслуг.АртикулВК,
    |       РеализацияТоваровУслуг.ШтрихКод,
    |       РеализацияТоваровУслуг.НомерМетроСтроки) КАК ВложенныйЗапросПоТоварам
    |
    |УПОРЯДОЧИТЬ ПО
    |   ВложенныйЗапросПоТоварам.НомерМетроСтроки";
		
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяБилла";
    //***//
    ПараметрыПечати(ТабДокумент);
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    

	Макет = ПолучитьМакет("НакладнаяБилла");

	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,Телефоны,/,НомерСчета,Банк,МФО,/,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,/,ЮридическийАдрес",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПокупателя	= формированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,Телефоны,/,НомерСчета,Банк,МФО,/,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,/,ЮридическийАдрес",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя	= формированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,Телефоны,/,НомерСчета,Банк,МФО,/,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,/, ",,КодЯзыкаПечать)+Символы.ПС+"Адреса доставки: "+СокрЛП(ЭтотОбъект.АдресДоставки);
	
	//Сообщить("КодЯзыкаПечать "+КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	
		ОбластьМакета.Параметры.НомерЗаказа					= СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
		ОбластьМакета.Параметры.НомерОрганизацииУПоставщика = ЭтотОбъект.ДоговорКонтрагента.Номер; 
		ОбластьМакета.Параметры.НомерДоговора               = ЭтотОбъект.ДоговорКонтрагента.Номер;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка 	= "ВИДАТКОВА НАКЛАДНА № "+ЭтотОбъект.Номер ;
		ОбластьМакета.Параметры.ДатаНакладной 	= " вiд " + Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	Сумма    		= 0;
	СуммаНДС 		= 0;
	ВсегоСкидок    	= 0;
	ВсегоБезСкидок 	= 0;
    ВсегоВес 		= 0;
	НомСтроки		= 1;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.НомерСтроки		= НомСтроки;//*** НомерМетроСтроки;//***НомерСтрокиТЧ
		ОбластьМакета.Параметры.Артикул			= ВыборкаСтрокТовары.АртикулВК;
		//ОбластьМакета.Параметры.ШК				= ВыборкаСтрокТовары.ШтрихКод;
		ОбластьМакета.Параметры.Товар           = ВыборкаСтрокТовары.Товар;
		ОбластьМакета.Параметры.ЕдиницаИзмерения= ВыборкаСтрокТовары.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Количество      = ВыборкаСтрокТовары.Количество;
		ТекЦена=?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5,ВыборкаСтрокТовары.Цена);
		ОбластьМакета.Параметры.Цена            = Формат(?(ВыборкаСтрокТовары.АвтоматическаяСкидка=0 И ВыборкаСтрокТовары.Скидка=0,ТекЦена,ТекЦена*(100-(ВыборкаСтрокТовары.АвтоматическаяСкидка+ВыборкаСтрокТовары.Скидка))/100),"ЧЦ=10; ЧДЦ=2"); 
		
		//ОбластьМакета.Параметры.Цена            = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");
		ОбластьМакета.Параметры.Сумма           = Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма),"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьМакета);
		НомСтроки		=	НомСтроки	+1;
		
		Сумма          = Сумма       + ?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5, ВыборкаСтрокТовары.Сумма);
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего=Сумма;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС=СуммаНДС;
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести ИтогоДополнительно
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоДополнительно");
	ОбластьМакета.Параметры.Сумма=СуммаНДС+Сумма;
	ТабДокумент.Вывести(ОбластьМакета);
	
	

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи=СуммаНДС+Сумма;
	
    //ОбластьМакета.Параметры.ИтоговаяСтрока 	= "Всього  на суму ";
    //ОбластьМакета.Параметры.СуммаПрописью 	= ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ИтоговаяСтрока 	= НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + НСтр("ru=',   весом ';uk=', вагою '",КодЯзыкаПечать) + ВсегоВес+ " кг.,";
    //"Всього   на суму ";
	ОбластьМакета.Параметры.СуммаПрописью 	= "Всього на суму " +ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать);
    
    
	ОбластьМакета.Параметры.ПДВ				=  "ПДВ: "  +Формат(СуммаНДС,"ЧЦ=12; ЧДЦ=2; ЧРД=.; ЧГ=0")+" грн.";
	//ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалДокументыРМК");
	ФизЛицо=Шапка.ФизЛицо;
	Если не ЗначениеЗаполнено(Подмена) тогда
		Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Шапка.ФизЛицо), "КтоВыписалДокументыРМК");
		Если не ЗначениеЗаполнено(Подмена)  тогда
				Подмена=Шапка.ФизЛицо;
		КонецЕсли;
	КонецЕсли;
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Подмена, Шапка.Дата);
		//ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ФизЛицо, Шапка.Дата);
		ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
		ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
		?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
		?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
		?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
		//*** Отпуск товара произвел
		Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ОбластьМакета.Параметры.Выписал = Шапка.ОтпускПроизвел.Наименование;
		Иначе 
			Если не ЗначениеЗаполнено(Подмена) тогда
				ОбластьМакета.Параметры.Выписал = глЗначениеПеременной("глТекущийПользователь");
			Иначе
				ОбластьМакета.Параметры.Выписал = Подмена;
			КонецЕсли;	
		КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // НакладнаяБилла()

Функция НакладнаяДЖУНА()Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	//|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	//|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	//|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
    |   ВложенныйЗапросПоТоварам.Номенклатура,
    |   ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
    |   ВложенныйЗапросПоТоварам.Количество,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
    |   ВложенныйЗапросПоТоварам.Цена,
    |   ВложенныйЗапросПоТоварам.Сумма,
    |   ВложенныйЗапросПоТоварам.СуммаНДС,
    |   ВложенныйЗапросПоТоварам.Упаковка КАК Характеристика,
    |   ВложенныйЗапросПоТоварам.Порции КАК Порции,
    |   ВложенныйЗапросПоТоварам.АртикулВК КАК АртикулВК,
    |   ВложенныйЗапросПоТоварам.АртикулПокупателя,
    |   ВложенныйЗапросПоТоварам.ШтрихКод,ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок
    |ИЗ
    |   (ВЫБРАТЬ
    |       1 КАК НомерТЧ,
    |       МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
    |       РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.Цена КАК Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК Упаковка,
    |       РеализацияТоваровУслуг.Порции КАК Порции,
    |       РеализацияТоваровУслуг.АртикулВК КАК АртикулВК,
	|       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
    |       СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
    |       СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
    |       СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
    |       РеализацияТоваровУслуг.АртикулПокупателя КАК АртикулПокупателя,
    |       РеализацияТоваровУслуг.ШтрихКод КАК ШтрихКод
    |   ИЗ
    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
    |   ГДЕ
    |       РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
    |   
    |   СГРУППИРОВАТЬ ПО
    |       РеализацияТоваровУслуг.Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции,
    |       РеализацияТоваровУслуг.АртикулВК,
    |       РеализацияТоваровУслуг.АртикулПокупателя,
    |       РеализацияТоваровУслуг.ШтрихКод,РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок) КАК ВложенныйЗапросПоТоварам
    |
    |УПОРЯДОЧИТЬ ПО
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяДЖУНА";
	
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
	КонецЕсли;    
	ТабДокумент.АвтоМасштаб=Истина;

	
	Макет = ПолучитьМакет("НакладнаяДЖУНА");

	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
    
    ОбластьМакета = Макет.ПолучитьОбласть("Реквизиты");
   	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
    ОбластьМакета.Параметры.Поставщик           = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.АдресПоставщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ОКПОПоставщика      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.СчетПоставщика      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.МФОПоставщика       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "МФО,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ИПНПоставщика       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.СвПДВПоставщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСвидетельства,",,КодЯзыкаПечать);
    
   	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
    ОбластьМакета.Параметры.Покупатель          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ОКПОПокупателя      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.АдресПокупателя     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.СчетПокупателя      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.МФОПокупателя       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "МФО,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ИПНПокупателя       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.СвПДВПокупателя     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НомерСвидетельства,",,КодЯзыкаПечать);
    ТабДокумент.Вывести(ОбластьМакета);
    
    ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьМакета);

    ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьМакета);
    
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Видаткова накладна № "+СокрЛП(ЭтотОбъект.Номер);
        ОбластьМакета.Параметры.ДатаНакладной    =  Формат(ЭтотОбъект.Дата,"Л=uk_UA; ДЛФ=DD");
        ОбластьМакета.Параметры.НомерДоговора    =  СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Номер);
        ОбластьМакета.Параметры.ДатаДоговору     =  Формат(ЭтотОбъект.ДоговорКонтрагента.Дата,"Л=uk_UA; ДЛФ=DD");
	ТабДокумент.Вывести(ОбластьМакета);
    

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
    СтрокаУпаковки="";
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.НомерСтроки		 = ВыборкаСтрокТовары.НомерСтрокиТЧ;
		ОбластьМакета.Параметры.Артикул			 = ВыборкаСтрокТовары.АртикулВК;
        ОбластьМакета.Параметры.ШтрихКод         = ВыборкаСтрокТовары.ШтрихКод;
        СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);        
		ОбластьМакета.Параметры.Товар            = СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+?(СтрДлина(СокрЛП(ВыборкаСтрокТовары.Порции))=0," ", ", "+СокрЛП(ВыборкаСтрокТовары.Порции))+")");        
		ОбластьМакета.Параметры.ЕдиницаИзмерения = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Количество       = ВыборкаСтрокТовары.Количество;
		
		//ОбластьМакета.Параметры.Цена             = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");
        Если ВыборкаСтрокТовары.ПроцентАвтоматическихСкидок<>0 тогда
            ОбластьМакета.Параметры.Цена            = ?(ВыборкаСтрокТовары.Количество<>0,Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5/ВыборкаСтрокТовары.Количество, ВыборкаСтрокТовары.Сумма/ВыборкаСтрокТовары.Количество),"ЧЦ=10; ЧДЦ=2"),"");
        Иначе
            ОбластьМакета.Параметры.Цена            = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");    
        КонецЕсли;
		
		ОбластьМакета.Параметры.Сумма            = Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма-ВыборкаСтрокТовары.СуммаНДС, ВыборкаСтрокТовары.Сумма),"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		Сумма          = Сумма       + ?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма-ВыборкаСтрокТовары.СуммаНДС, ВыборкаСтрокТовары.Сумма);
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего=Сумма;
	ОбластьМакета.Параметры.ВсегоНДС=СуммаНДС;    
	ОбластьМакета.Параметры.Сумма=СуммаНДС+Сумма;    
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + СуммаНДС;
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всього одиниць: "+Формат(ВсегоВес,"ЧДЦ=3; ЧГ=3,0");
	ОбластьМакета.Параметры.СуммаПрописью  = "Сума з ПДВ (прописом):"+ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ (20%): '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
    
	ТабДокумент.Вывести(ОбластьМакета);
    
    
    
    //// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
    мПредставительПоставщика="";
    Если ЭтотОбъект.ПредставительОрганизации=Справочники.ФизическиеЛица.ПустаяСсылка() тогда
        мПредставительПоставщика=глЗначениеПеременной("глТекущийПользователь").ФизЛицо;
    Иначе
        мПредставительПоставщика=ЭтотОбъект.ПредставительОрганизации;
	КонецЕсли;
	Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалДокументыРМК");
	Если ЗначениеЗаполнено(Подмена) тогда
		мПредставительПоставщика=Подмена;//Справочники.ФизическиеЛица.НайтиПоКоду("000000656");//*** Овчаренко Тетяна Миколаївна 
	КонецЕсли;	
	
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,мПредставительПоставщика, Шапка.Дата);
    ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	ОбластьМакета.Параметры.Выписал = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // НакладнаяДЖАЯ()

Функция ПечатьТНТара() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий

	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.НомерТЧ,
	|	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество,
	|	ВложенныйЗапросПоТоварам.Цена,
	|	ВложенныйЗапросПоТоварам.Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(РеализацияТоваровУслугВозвратнаяТара.НомерСтроки) КАК НомерСтрокиТЧ,
	|		РеализацияТоваровУслугВозвратнаяТара.Номенклатура КАК Номенклатура,
	|		РеализацияТоваровУслугВозвратнаяТара.Цена КАК Цена,
	|		СУММА(РеализацияТоваровУслугВозвратнаяТара.Количество) КАК Количество,
	|		СУММА(РеализацияТоваровУслугВозвратнаяТара.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|	ГДЕ
	|		РеализацияТоваровУслугВозвратнаяТара.Ссылка = &ТекущийДокумент
	|		И РеализацияТоваровУслугВозвратнаяТара.Количество <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|		РеализацияТоваровУслугВозвратнаяТара.Цена) КАК ВложенныйЗапросПоТоварам";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТН";
	
	Макет = ПолучитьМакет("ТранспортнаяНакладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДата="№  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.АдресПоставщика="м.Харкiв, вул. Роганська, 151.";
	ОбластьМакета.Параметры.ОКПОПоставщика="34389679";
	ОбластьМакета.Параметры.Поставщик=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование());
	ОбластьМакета.Параметры.ТелефонПоставщика="(057) 766-88-78";
	
	
	ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ОбластьМакета.Параметры.ЗаказПокупателя		= ЭтотОбъект.Сделка;
	ОбластьМакета.Параметры.АдресаДоставки		= ЭтотОбъект.АдресДоставки;
	ОбластьМакета.Параметры.ОКПОПокупателя		= ЭтотОбъект.Контрагент.КодПоЕДРПОУ;
	
	ЗапросИнфо = Новый Запрос;
	ЗапросИнфо.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	ЗапросИнфо.УстановитьПараметр("Вид","Юридический адрес контрагента" );
	ЗапросИнфо.УстановитьПараметр("Вид1","Телефон контрагента");
	
	ЗапросИнфо.Текст =	"	ВЫБРАТЬ
	| КонтактнаяИнформация.Объект,
	| КонтактнаяИнформация.Тип,
	| КонтактнаяИнформация.Вид,
	| КонтактнаяИнформация.Представление КАК Представление
	| ИЗ
	| РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	| ГДЕ
	| КонтактнаяИнформация.Объект = &Объект
	| И (КонтактнаяИнформация.Вид.Наименование = &Вид
	| 			ИЛИ КонтактнаяИнформация.Вид.Наименование = &Вид1)
	| УПОРЯДОЧИТЬ ПО 
	| КонтактнаяИнформация.Тип.Порядок";
	
	
	Если не ЗапросИнфо.Выполнить().Пустой() тогда
		ЗапросИнфо= ЗапросИнфо.Выполнить().Выгрузить();
		СтрокаИнфо=1;
		Для каждого ВыборкаСтрокИнфо из ЗапросИнфо Цикл 
			Если СтрокаИнфо=1 тогда
				ОбластьМакета.Параметры.АдресПокупателя		= ВыборкаСтрокИнфо.Представление;
			Иначе
				ОбластьМакета.Параметры.ТелефонПокупателя	= ВыборкаСтрокИнфо.Представление;
			КонецЕсли;
			СтрокаИнфо=СтрокаИнфо+1;
	    КонецЦикла;
	КонецЕсли;
	//***AL 100720
	//ОбластьМакета.Параметры.ЗаказПокупателя=Шапка.Комментарий;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВыводитьКоды = Ложь;
	//Сообщить("1");
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьДанных.Параметры.НомерСтроки 	= ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		
		//СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		
		
		ОбластьДанных.Параметры.Товар 			= СокрП(ВыборкаСтрокТовары.Товар);
		ОбластьДанных.Параметры.ЕдИзм 			= ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков;
		
		//ОбластьДанных.Параметры.Артикул=ВыборкаСтрокТовары.АртикулВК;
		ОбластьДанных.Параметры.Количество		= ВыборкаСтрокТовары.Количество;
		ТабДокумент.Вывести(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
	КонецЦикла;
 
	ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	
	ОбластьМакета.Параметры.ВсегоКол=Формат(ВсегоКоличество,"ЧДЦ=0; ЧГ=0")+" (штук)"; 
	//ОбластьМакета.Параметры.ПредставлениеНАкладной = "Накладна №  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьДекларации()

Процедура ОтправитьФайлВасилевскому()
	ОтправкаПочты();
КонецПроцедуры

Функция ФайлПередачиВасилевский(МойФайл,Номер)
	//Сообщить("Это Василевский sbyt_svigina@ukr.net");
	Попытка
         Excel_DMS = Новый COMОбъект("Excel.Application");
         Excel_DMS.Application.WorkBooks.Add(1);
         Лист = Excel_DMS.ActiveSheet;
         Лист.Name = СокрЛП(Номер);                 
    Исключение
         Сообщить("Не удалось создать файл Microsoft Excel!!!",СтатусСообщения.ОченьВажное);
         Возврат 0;
	КонецПопытки;          
	ТаблицаТоваров=ЭтотОбъект.Товары;
	НомерСтроки =1;
    Лист.Cells(НомерСтроки,1).Value = "kod_tov";
	Лист.Cells(НомерСтроки,2).Value = "nazvanie";
    Лист.Cells(НомерСтроки,3).Value = "kol";
	Лист.Cells(НомерСтроки,4).Value = "cena";
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
//Индикатор.КомментарийОбработкиДанных = "строка  " +НомерСтроки +" "+СокрЛП(ТекущаяСтрока.Номенклатура.Наименование)+" "+СОКРЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование)+" "+СОКРЛП(ТекущаяСтрока.Порции.Наименование);                                                                       
    	НомерСтроки = НомерСтроки+1;
		Лист.Cells(НомерСтроки,2).Value =СокрЛП(ТекущаяСтрока.Номенклатура.НаименованиеПолное)+" "+СОКРЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование) ;
    	Лист.Cells(НомерСтроки,3).Value = ТекущаяСтрока.Количество;
    	Лист.Cells(НомерСтроки,4).Value = ?(ТекущаяСтрока.Количество>0,ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество,0);
		//СимволУпаковки="0";
		//Если СокрЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование)="" тогда
		//	СимволУпаковки="0";
		//ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Вакуум" 	тогда
		//	СимволУпаковки="1";
		//ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Газ" 		тогда
		//	СимволУпаковки="2";
		//ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Нарезка" 	тогда	
		//	СимволУпаковки="3";
		//ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Ж/У" 		тогда						
		//	СимволУпаковки="4";
		//Иначе
		//	СимволУпаковки="0";
		//КонецЕсли;
		//СимволПорции="0";
		//Если СокрЛП(ТекущаяСтрока.Порции.Наименование)="" тогда
		//	СимволПорции="0";
		//ИначеЕсли  ТекущаяСтрока.Порции.Код="000000001"   тогда   //0,250
		//	СимволПорции="1";
		//ИначеЕсли  ТекущаяСтрока.Порции.Код="000000009" 	тогда  //по 1/2 шт.
		//	СимволПорции="2";
		//ИначеЕсли  ТекущаяСтрока.Порции.Код="000000008" тогда	//целым куском
		//	СимволПорции="3";
		//Иначе
		//	СимволПорции="0";
		//КонецЕсли;
		//КодДляКлиента=СимволПорции+СимволУпаковки+СокрЛП(ТекущаяСтрока.Номенклатура.Код);
		
		Лист.Cells(НомерСтроки,1).Value =ДополнительныеФункции.ПолучитьКодТовараУпаковкиПорции(СокрЛП(ТекущаяСтрока.Номенклатура.КодУправленческойБазы),
							СокрЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование),
						СокрЛП(ТекущаяСтрока.Порции.Код));
	КонецЦикла; 
	
	ФайлНаДиске = Новый Файл(МойФайл);
	Если ФайлНаДиске.Существует() тогда
		Попытка
			УдалитьФайлы(МойФайл);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЕсли;
	//Сообщить(МойФайл);
	//Excel_DMS.ActiveWorkBook.Save(МойФайл);    //КаталогЭкспорта+"\Прайс для сайта "+СтрЗаменить(СтрЗаменить(ТекущаяДата(),".","_"),":", "_")+".xls"
	Excel_DMS.ActiveWorkbook.SaveAs(МойФайл,-4143);
	//Excel_DMS.Workbooks.Close(); 
	Сообщить("Файл для почты, выгружен в каталог "+МойФайл);
	Excel_DMS.Quit();
	Возврат 0;
КонецФункции

Процедура ОтправкаПочты() Экспорт
	Получатель="";
	Пользователь=глЗначениеПеременной("глТекущийПользователь");	
	ОтборПараметра = Новый Структура;
	ОтборПараметра.Вставить("Пользователь", Пользователь);
	ОтборПараметра.Вставить("Настройка",ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоКоду("00000000029"));
	ДанныеНастроек = РегистрыСведений.НастройкиПользователей.Получить(ОтборПараметра);
	МойMail=ДанныеНастроек.Значение;
	Если	СокрЛП(МойMail.Логин)="" тогда
		Сообщить("У пользователя не настроен почтовый ящик!");
		возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("Код", "000000013");
	Запрос.Текст =" ВЫБРАТЬ
	| КонтактнаяИнформация.Объект,
	| КонтактнаяИнформация.Тип,
	| КонтактнаяИнформация.Вид,
	| КонтактнаяИнформация.Представление
	| ИЗ
	| РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	| ГДЕ
	| 	КонтактнаяИнформация.Объект = &Объект 	И
	|  	КонтактнаяИнформация.Вид.Код = &Код";
	
	АдресМайл = Запрос.Выполнить().Выбрать();
	Если АдресМайл.Количество()>0 тогда
		АдресМайл.Следующий();
		Получатель=АдресМайл.Представление;
	КонецЕсли;
	Если СокрЛП(Получатель)="" тогда
		Предупреждение("У контрагента нет адреса e-mail, отправка писем не возможна!");
		возврат;
	КонецЕсли;
	
	//Сообщить(МойMail);
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
    ИПП.АдресСервераSMTP=МойMail.SMTPСервер;
    ИПП.ПортSMTP=МойMail.ПортSMTP;
    ИПП.ПользовательSMTP=МойMail.Логин;
    ИПП.ПарольSMTP=МойMail.Пароль;
    ИПП.АутентификацияSMTP=СпособSMTPАутентификации.ПоУмолчанию;
	
	Письмо=Новый ИнтернетПочтовоеСообщение;
    Письмо.Отправитель=МойMail.АдресЭлектроннойПочты;
	Письмо.Получатели.Добавить(Получатель);     //*** только для коноваленко
	Письмо.Тема="" ;
	
	Если ЭтотОбъект.Контрагент.Код="000001652" 	 тогда
		Письмо.Тема="От Роганский мясокомбинат! Накладная № "+СокрЛП(ЭтотОбъект.Номер)+" от "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
		ТекстПисьма="От Роганский мясокомбинат! Накладная № "+СокрЛП(ЭтотОбъект.Номер)+" от "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
		Письмо.Тексты.Добавить(ТекстПисьма);					
	Иначе //василевские
		ТекстПисьма=" ";
		ТекстПисьма=ТекстПисьма+ " Накладная Ф1 № "+ЭтотОбъект.Номер+" от "+ЭтотОбъект.Дата+Символы.ВК+Символы.ПС+
		"  "+ЭтотОбъект.Контрагент.НаименованиеПолное+Символы.ВК+Символы.ПС+
		"  Сумма "+Формат(ЭтотОбъект.СуммаДокумента,"ЧДЦ=2")+" грн.";
		Письмо.Тексты.Добавить(ТекстПисьма);					
	КонецЕсли;		

	//Создание файла экспорта
	Пользователь=глЗначениеПеременной("глТекущийПользователь");	
	ОтборПараметра = Новый Структура;
	ОтборПараметра.Вставить("Пользователь", Пользователь);
	ОтборПараметра.Вставить("Настройка"	 , ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("Путь экспорта-импорта для программы производства"));	
	ДанныеНастроек = РегистрыСведений.НастройкиПользователей.Получить(ОтборПараметра);
	Путь=ДанныеНастроек.Значение;
	Если Путь=неопределено или Путь="" тогда
		ОтборПараметра.Вставить("Пользователь", Пользователь);
		ОтборПараметра.Вставить("Настройка"	 , ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоКоду("00000000018"));	
		ДанныеНастроек = РегистрыСведений.НастройкиПользователей.Получить(ОтборПараметра);
		Путь=ДанныеНастроек.Значение;
	КонецЕсли;
	Если Путь=неопределено или Путь="" тогда
		Путь="S:\";
	КонецЕсли;		
	МойФайл=СокрЛП(Путь) +Прав(СокрЛП(ЭтотОбъект.Номер),8)+".xls";

	Если ЭтотОбъект.Контрагент.Код="000001652" 	 тогда
		ФайлПередачиДигма(МойФайл,СокрЛП(ЭтотОбъект.Номер));
	Иначе //Василевский
		ФайлПередачиВасилевский(МойФайл,СокрЛП(ЭтотОбъект.Номер));
	КонецЕсли;
	
	Если ЭтотОбъект.Модифицированность() тогда
		ЭтотОбъект.Комментарий=ЭтотОбъект.Комментарий+" Файл "+МойФайл+", отправлен  "+ТекущаяДата()+".";
		ЭтотОбъект.Записать();
	Иначе
		ЭтотОбъект.Комментарий=ЭтотОбъект.Комментарий+" Файл "+МойФайл+", отправлен  "+ТекущаяДата()+".";
		ЭтотОбъект.Записать();
	КонецЕсли;	
	Письмо.Вложения.Добавить(МойФайл);
	Почта=Новый ИнтернетПочта;
	Почта.Подключиться(ИПП);
	Почта.Послать(Письмо);
	Почта.Отключиться();
КонецПроцедуры

Функция ФайлПередачиДигма(МойФайл,Номер)
	//Сообщить("Это Василевский sbyt_svigina@ukr.net");
	Попытка
         Excel_DMS = Новый COMОбъект("Excel.Application");
         Excel_DMS.Application.WorkBooks.Add(1);
         Лист = Excel_DMS.ActiveSheet;
         Лист.Name = СокрЛП(Номер);                 
    Исключение
         Сообщить("Не удалось создать файл Microsoft Excel!!!",СтатусСообщения.ОченьВажное);
         Возврат 0;
	КонецПопытки;          
	ТаблицаТоваров=ЭтотОбъект.Товары;
	
	//Шапка 
	НомерСтроки =1;
	Лист.Cells(НомерСтроки,1).Value = "Расходная накладная № "+ЭтотОбъект.Номер;
	Лист.Cells(НомерСтроки,3).Value = "Поставщик: "		+СокрЛП(ЭтотОбъект.Организация.НаименованиеПолное);
	Лист.Cells(НомерСтроки,5).Value = "Код ЕГРПОУ: "	+СокрЛП("34389679");
	
	НомерСтроки =3;
	Лист.Cells(НомерСтроки,1).Value = "Дата накладной "	+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	Лист.Cells(НомерСтроки,3).Value = "Покупатель: "	+СокрЛП(ЭтотОбъект.Контрагент.НаименованиеПолное);
	Лист.Cells(НомерСтроки,5).Value = "Адрес доставки: "+СокрЛП(ЭтотОбъект.АдресДоставки);
	
	НомерСтроки =5;
    Лист.Cells(НомерСтроки,1).Value = "№ п/п";
	Лист.Cells(НомерСтроки,1).Borders.Linestyle =1;
	Лист.Cells(НомерСтроки,2).Value = "ТС Дигма";
	Лист.Cells(НомерСтроки,2).Borders.Linestyle =1;
    Лист.Cells(НомерСтроки,3).Value = "Штрих-код";
	Лист.Cells(НомерСтроки,3).Borders.Linestyle =1;
	Лист.Cells(НомерСтроки,4).Value = "Наименование товара";
	Лист.Cells(НомерСтроки,4).Borders.Linestyle =1;
	Лист.Cells(НомерСтроки,5).Value = "Ед.Изм.";
	Лист.Cells(НомерСтроки,5).Borders.Linestyle =1;	
	Лист.Cells(НомерСтроки,6).Value = "Цена без НДС";
	Лист.Cells(НомерСтроки,6).Borders.Linestyle =1;
	Лист.Cells(НомерСтроки,7).Value = "Ставка НДС";
	Лист.Cells(НомерСтроки,7).Borders.Linestyle =1;
	Лист.Cells(НомерСтроки,8).Value = "Количество в накладной";
	Лист.Cells(НомерСтроки,8).Borders.Linestyle =1;
	Лист.Cells(НомерСтроки,9).Value = "Сумма без НДС";
	Лист.Cells(НомерСтроки,9).Borders.Linestyle =1;
	ШагТаблицы=1;
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
//Индикатор.КомментарийОбработкиДанных = "строка  " +НомерСтроки +" "+СокрЛП(ТекущаяСтрока.Номенклатура.Наименование)+" "+СОКРЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование)+" "+СОКРЛП(ТекущаяСтрока.Порции.Наименование);                                                                       
    	НомерСтроки = НомерСтроки+1;
		Лист.Cells(НомерСтроки,1).Value =Формат(ШагТаблицы,"ЧДЦ=0; ЧГ=0");
		Лист.Cells(НомерСтроки,1).Borders.Linestyle =1;
		Лист.Cells(НомерСтроки,2).Value =СокрЛП(ТекущаяСтрока.АртикулВК);
		Лист.Cells(НомерСтроки,2).Borders.Linestyle =1;
		Лист.Cells(НомерСтроки,3).Value =СокрЛП(ТекущаяСтрока.ШтрихКод);
		Лист.Cells(НомерСтроки,3).Borders.Linestyle =1;
		Лист.Cells(НомерСтроки,4).Value =СокрЛП(ТекущаяСтрока.Номенклатура.НаименованиеПолное)+" "+СОКРЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование);
		Лист.Cells(НомерСтроки,4).Borders.Linestyle =1;
		Лист.Cells(НомерСтроки,5).Value =СокрЛП(ТекущаяСтрока.ЕдиницаИзмерения.Наименование);
		Лист.Cells(НомерСтроки,5).Borders.Linestyle =1;
		Лист.Cells(НомерСтроки,6).Value =?(ЭтотОбъект.СуммаВключаетНДС,ТекущаяСтрока.Цена/1.2,ТекущаяСтрока.Цена);
		Лист.Cells(НомерСтроки,6).Borders.Linestyle =1;
		Лист.Cells(НомерСтроки,7).Value = "Ставка 20%";
		Лист.Cells(НомерСтроки,7).Borders.Linestyle =1;
		Лист.Cells(НомерСтроки,8).Value = ТекущаяСтрока.Количество;
		Лист.Cells(НомерСтроки,8).Borders.Linestyle =1;
    	Лист.Cells(НомерСтроки,9).Value = ?(ЭтотОбъект.СуммаВключаетНДС,ТекущаяСтрока.Сумма/1.2,ТекущаяСтрока.Сумма);
		Лист.Cells(НомерСтроки,9).Borders.Linestyle =1;
		ШагТаблицы=ШагТаблицы+1;
	КонецЦикла; 
	
	ФайлНаДиске = Новый Файл(МойФайл);
	Если ФайлНаДиске.Существует() тогда
		Попытка
			УдалитьФайлы(МойФайл);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЕсли;
	//Сообщить(МойФайл);
	//Excel_DMS.ActiveWorkBook.Save(МойФайл);    //КаталогЭкспорта+"\Прайс для сайта "+СтрЗаменить(СтрЗаменить(ТекущаяДата(),".","_"),":", "_")+".xls"
	Excel_DMS.ActiveWorkbook.SaveAs(МойФайл,-4143);
	//Excel_DMS.Workbooks.Close(); 
	Сообщить("Файл для почты, выгружен в каталог "+МойФайл);
	Excel_DMS.Quit();
	Возврат 0;
КонецФункции
//***190916
Функция ТранспортнаяНакладнаяОмега()Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	//|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	//|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	//|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
    |   ВложенныйЗапросПоТоварам.Номенклатура,
    |   ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
    |   ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
    |   ВложенныйЗапросПоТоварам.Количество,
    |   ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
    |   ВложенныйЗапросПоТоварам.Цена,
    |   ВложенныйЗапросПоТоварам.Сумма,
    |   ВложенныйЗапросПоТоварам.СуммаНДС,
    |   ВложенныйЗапросПоТоварам.Упаковка КАК Характеристика,
    |   ВложенныйЗапросПоТоварам.Порции КАК Порции,
    |   ВложенныйЗапросПоТоварам.АртикулВК КАК АртикулВК,
    |   ВложенныйЗапросПоТоварам.АртикулПокупателя,
    |   ВложенныйЗапросПоТоварам.ШтрихКод,ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок
    |ИЗ
    |   (ВЫБРАТЬ
    |       1 КАК НомерТЧ,
    |       МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
    |       РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.Цена КАК Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК Упаковка,
    |       РеализацияТоваровУслуг.Порции КАК Порции,
    |       РеализацияТоваровУслуг.АртикулВК КАК АртикулВК,
	|       РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
    |       СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
    |       СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
    |       СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
    |       РеализацияТоваровУслуг.АртикулПокупателя КАК АртикулПокупателя,
    |       РеализацияТоваровУслуг.ШтрихКод КАК ШтрихКод
    |   ИЗ
    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
    |   ГДЕ
    |       РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
    |   
    |   СГРУППИРОВАТЬ ПО
    |       РеализацияТоваровУслуг.Номенклатура,
    |       РеализацияТоваровУслуг.ЕдиницаИзмерения,
    |       РеализацияТоваровУслуг.Цена,
    |       РеализацияТоваровУслуг.СтавкаНДС,
    |       РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
    |       РеализацияТоваровУслуг.Порции,
    |       РеализацияТоваровУслуг.АртикулВК,
    |       РеализацияТоваровУслуг.АртикулПокупателя,
    |       РеализацияТоваровУслуг.ШтрихКод,РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок) КАК ВложенныйЗапросПоТоварам
    |
    |УПОРЯДОЧИТЬ ПО
    |   ВложенныйЗапросПоТоварам.НомерТЧ,
    |   ВложенныйЗапросПоТоварам.НомерСтрокиТЧ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТранспортнаяНакладнаяОмега";
	
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ДополнительныеФункции.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
	КонецЕсли;    
	ТабДокумент.АвтоМасштаб=Истина;

	
	Макет = ПолучитьМакет("ТранспортнаяНакладнаяОмега");

	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать=Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
    
    ОбластьМакета = Макет.ПолучитьОбласть("Реквизиты");
   	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
    ОбластьМакета.Параметры.Поставщик           = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.АдресПоставщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ОКПОПоставщика      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.СчетПоставщика      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.МФОПоставщика       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "МФО,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ИПНПоставщика       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.СвПДВПоставщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСвидетельства,",,КодЯзыкаПечать);
    
   	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
    ОбластьМакета.Параметры.Покупатель          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ОКПОПокупателя      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.АдресПокупателя     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.СчетПокупателя      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.МФОПокупателя       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "МФО,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.ИПНПокупателя       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.СвПДВПокупателя     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НомерСвидетельства,",,КодЯзыкаПечать);
    ТабДокумент.Вывести(ОбластьМакета);
    
    ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьМакета);

    ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьМакета);
    
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "ТРАНСПОРТНА НАКЛАДНА № "+СокрЛП(ЭтотОбъект.Номер);
        ОбластьМакета.Параметры.ДатаНакладной    =  Формат(ЭтотОбъект.Дата,"Л=uk_UA; ДЛФ=DD");
		ОбластьМакета.Параметры.НомерЗаказа    	=  СокрЛП(ЭтотОбъект.НомерМетроЗаказа);
		ОбластьМакета.Параметры.ДатаЗаказа     	=  Формат(ЭтотОбъект.ЗаявкаДата,"Л=uk_UA; ДЛФ=D");
	ТабДокумент.Вывести(ОбластьМакета);
    

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
    ВсегоВес =0;
    СтрокаУпаковки="";
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.НомерСтроки		 = ВыборкаСтрокТовары.НомерСтрокиТЧ;
		ОбластьМакета.Параметры.Артикул			 = ВыборкаСтрокТовары.АртикулВК;
        ОбластьМакета.Параметры.ШтрихКод         = ВыборкаСтрокТовары.ШтрихКод;
        СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);        
		ОбластьМакета.Параметры.Товар            = СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+?(СтрДлина(СокрЛП(ВыборкаСтрокТовары.Порции))=0," ", ", "+СокрЛП(ВыборкаСтрокТовары.Порции))+")");        
		ОбластьМакета.Параметры.ЕдиницаИзмерения = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Количество       = ВыборкаСтрокТовары.Количество;
		
		//ОбластьМакета.Параметры.Цена             = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");
		//Если ВыборкаСтрокТовары.ПроцентАвтоматическихСкидок<>0 тогда
		//    ОбластьМакета.Параметры.Цена            = ?(ВыборкаСтрокТовары.Количество<>0,Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма/6*5/ВыборкаСтрокТовары.Количество, ВыборкаСтрокТовары.Сумма/ВыборкаСтрокТовары.Количество),"ЧЦ=10; ЧДЦ=2"),"");
		//Иначе
		//    ОбластьМакета.Параметры.Цена            = Формат(?(ЭтотОбъект.СуммаВключаетНДС,ВыборкаСтрокТовары.Цена/6*5, ВыборкаСтрокТовары.Цена),"ЧЦ=10; ЧДЦ=2");    
		//КонецЕсли;
		//
		//ОбластьМакета.Параметры.Сумма            = Формат(?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма-ВыборкаСтрокТовары.СуммаНДС, ВыборкаСтрокТовары.Сумма),"ЧЦ=10; ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		Сумма          = Сумма       + ?(ЭтотОбъект.СуммаВключаетНДС, ВыборкаСтрокТовары.Сумма-ВыборкаСтрокТовары.СуммаНДС, ВыборкаСтрокТовары.Сумма);
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
    	ВсегоВес       = ВсегоВес    + ?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ВсегоТовара=Формат(ВсегоВес,"ЧДЦ=3");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ФормСтрока = "Л = uk_UK; ДП = Истина";
	ПарПредмета="кiлограм,кiлограма,кiлограмiв,м,грам,грама,грамiв,м,3";
	ПрописьЧисла = ЧислоПрописью(ВсегоВес, ФормСтрока, ПарПредмета);
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Загальна кiлькiсть одиниць: "+ПрописьЧисла;
	//ДополнительныеФункции.ВесПрописью(ВсегоВес);
	//+ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоВес,Шапка.ВалютаДокумента ,КодЯзыкаПечать);
	//+Формат(ВсегоВес,"ЧДЦ=3; ЧГ=3,0");
	//
	// 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ (20%): '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
    
	ТабДокумент.Вывести(ОбластьМакета);
    
    
    
    //// Вывести подписи
	//ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//мПредставительПоставщика="";
	//Если ЭтотОбъект.ПредставительОрганизации=Справочники.ФизическиеЛица.ПустаяСсылка() тогда
	//    мПредставительПоставщика=глЗначениеПеременной("глТекущийПользователь").ФизЛицо;
	//Иначе
	//    мПредставительПоставщика=ЭтотОбъект.ПредставительОрганизации;
	//КонецЕсли;
	//Подмена=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалДокументыРМК");
	//Если ЗначениеЗаполнено(Подмена) тогда
	//	мПредставительПоставщика=Подмена;//Справочники.ФизическиеЛица.НайтиПоКоду("000000656");//*** Овчаренко Тетяна Миколаївна 
	//КонецЕсли;	
	//
	//ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,мПредставительПоставщика, Шапка.Дата);
	//ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	//ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
	//							?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
	//							?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
	//							?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	//ОбластьМакета.Параметры.Выписал = ДолжностьФИОПредставителя;
	//ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // НакладнаяДЖАЯ()

//***161129
Функция ПечатьДекларацияБезопасности() Экспорт
	//000003084  СКАЙ ФУД СЕРВІСЕС ТОВ
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДекларацияБезопасности";
	Макет = ПолучитьМакет("ДекларацияБезопасности");
	
	// печать производится на языке, указанном в настройках пользователя
	//КодЯзыкаПечать = "ru";
	//кализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной             
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Договор = "№ "+СокрЛП(ЭтотОбъект.ДоговорКонтрагента.Номер) +" вiд "+Формат(ЭтотОбъект.Дата,"Л=uk_UA; ДЛФ=DD");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ВсегоКГ=0;
	Если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
	    ВсегоКГ=ВыборкаДетальныеЗаписи.Количество;
	КонецЕсли;	
	ОбластьМакета.Параметры.ВесНакладной=Формат(ВсегоКГ,"ЧДЦ=3") + "кг.";
	ОбластьМакета.Параметры.АдресДоставки=ЭтотОбъект.АдресДоставки;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
КонецФункции //ПечатьДекларацияБезопасности()

//***161203
Функция ПечатьАктаРоялти(СуммыВРублях = Ложь) Экспорт
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	Организация,
	|	Организация КАК Поставщик,
	//***|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ПредставительОрганизации КАК Выписал,
	|	ДоверенностьПолучил КАК ПредставительПокупателя,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
  	|	ПредставительОрганизации КАК ПредставительПоставщика
 	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки 			КАК НомерСтрокиТЧ,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	Номенклатура.Код     	КАК Код,
	|	Номенклатура.Артикул 	КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	NULL КАК Характеристика,
	|	NULL КАК Серия
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	ЗапросТовары = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("АктРоялти");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку Акта
	
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,, БанковскийСчетОрганизации, КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
	РуководителиКонтрагента = ФормированиеПечатныхФорм.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			=  РуководителиОрганизации.Руководитель;
	
	Директор_КА=ФункцииОбщегоНазначения.НайтиРуководителяКонтрагентов(Шапка.Покупатель);
	//*** 15-06-2015 Набойченко...
	Если ЗначениеЗаполнено(Директор_КА) тогда
		ОбластьМакета.Параметры.РуководительПокупателя 			= Директор_КА.Наименование;
	Иначе
	   ОбластьМакета.Параметры.РуководительПокупателя 			= Шапка.ПредставительПокупателя;
	КонецЕсли;
	//РуководителиКонтрагента.РуководительПредставление;//*** 15-06-2015 Набойченко...
	
    //*** ОбластьМакета.Параметры.РуководительПокупателя 			= Шапка.ПредставительПокупателя;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПокупателя 			= РуководителиКонтрагента.РуководительПредставление;

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='АКТ сдачи-приемки работ (оказания услуг)';uk='АКТ здачі-прийняття робіт (надання послуг)'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим табличную часть
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") > 0;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
			
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;

	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) И НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			Скидка = 0;
		Иначе

			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка - ВыборкаСтрокТовары.АвтоматическаяСкидка) * (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка);
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Выводим Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= Сумма + ?(Шапка.СуммаВключаетНДС, 	   0, СуммаНДС);
	СуммаКПрописиБезНДС = Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 		 0);
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";												 											 
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	// выводим подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
								
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	
	//ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	//***
	//ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);

	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
	//***161027
	Если ЗначениеЗаполнено(Руководители.ФинДиректорФИО) Тогда
		ОбластьМакета.Параметры.ФИОФиндир  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ФинДиректорФИО.Фамилия, Руководители.ФинДиректорФИО.Имя, Руководители.ФинДиректорФИО.Отчество, Истина);// Кратко
    КонецЕсли;
	Если ЗначениеЗаполнено(Руководители.ЗамГлавБухФИО) Тогда
		ОбластьМакета.Параметры.ФИОЗамБух  = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ЗамГлавБухФИО.Фамилия, Руководители.ЗамГлавБухФИО.Имя, Руководители.ЗамГлавБухФИО.Отчество, Истина);// Кратко
    КонецЕсли;//***161027
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

Функция ПечатьАктаМКИ(СуммыВРублях = Ложь) Экспорт
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	Организация,
	|	Организация КАК Поставщик,
	//***|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ПредставительОрганизации КАК Выписал,
	|	ДоверенностьПолучил КАК ПредставительПокупателя,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
  	|	ПредставительОрганизации КАК ПредставительПоставщика
 	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки 			КАК НомерСтрокиТЧ,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	Номенклатура.Код     	КАК Код,
	|	Номенклатура.Артикул 	КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	NULL КАК Характеристика,
	|	NULL КАК Серия
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	ЗапросТовары = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("АктМКИрина");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку Акта
	
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,, БанковскийСчетОрганизации, КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
	РуководителиКонтрагента = ФормированиеПечатныхФорм.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	//***касторный
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика ="Перший заступник генерального директора" ;
	//РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			=  "Касторний Д.В.";
	//РуководителиОрганизации.Руководитель;
	
	//Директор_КА=ФункцииОбщегоНазначения.НайтиРуководителяКонтрагентов(Шапка.Покупатель);
	////*** 15-06-2015 Набойченко...
	//Если ЗначениеЗаполнено(Директор_КА) тогда
		ОбластьМакета.Параметры.РуководительПокупателя 			= "Семiкоп А.М.";
	//Иначе
	//   ОбластьМакета.Параметры.РуководительПокупателя 			= Шапка.ПредставительПокупателя;
	//КонецЕсли;
	//РуководителиКонтрагента.РуководительПредставление;//*** 15-06-2015 Набойченко...
	
    //*** ОбластьМакета.Параметры.РуководительПокупателя 			= Шапка.ПредставительПокупателя;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = "Генеральний директор";
	//?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РуководительПокупателя 			= РуководителиКонтрагента.РуководительПредставление;

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='АКТ сдачи-приемки работ (оказания услуг)';uk='АКТ здачі-прийняття робіт (надання послуг)'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим табличную часть
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") > 0;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
			
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;

	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) И НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			Скидка = 0;
		Иначе

			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка - ВыборкаСтрокТовары.АвтоматическаяСкидка) * (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка);
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Выводим Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= Сумма + ?(Шапка.СуммаВключаетНДС, 	   0, СуммаНДС);
	СуммаКПрописиБезНДС = Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 		 0);
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";												 											 
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	// выводим подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
								
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	
	//ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	//***
	//ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);

	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
	//***161027
	ОбластьМакета.Параметры.ФИОФиндир  = "Сергиенко Н.Ф.";

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // *** 

//***170215
Функция ПечатьДокументаСоСкидкой() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	Номенклатура.Родитель.Наименование КАК Родитель,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(700)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|	ПроцентСкидкиНаВес,
	|	СкидкаНаВес
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		НомерСтроки КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		СУММА(Сумма)/СУММА(Количество) КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	    ПроцентСкидкиНаВес,
	|	    СкидкаНаВес,	
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент И РеализацияТоваровУслуг.Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		НомерСтроки,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|		ПроцентСкидкиНаВес, СкидкаНаВес
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НомерСтроки,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	Сумма/Количество КАК Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, Родитель, Товар
	|";
	
		//|	НомерТЧ, НомерСтрокиТЧ
		
		
		
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Сумма) КАК СУММА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяСоСкидкой";
    //***//
    Если ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
     
    ПараметрыПечати(ТабДокумент); 
	Макет = ПолучитьМакет("НакладнаяРасходнаяСоСкидкой");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать)+"   ("+СокрЛП(Шапка.Покупатель.Код)+")";
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ЭтотОбъект.АдресДоставки;
	//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать); //*** Ю.Ляшенко 11-12-2014
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Комментарий");
	ОбластьМакета.Параметры.Комментарий=Комментарий;
	ТабДокумент.Вывести(ОбластьМакета);	

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество =0; 
    ВсегоКолШт      =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьСтроки	= Макет.ПолучитьОбласть("Строка");
		ОбластьСтроки.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьСтроки.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар)+
						?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика),"("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+")","");
		//ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.Количество 			=  Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
		ОбластьСтроки.Параметры.ЕдиницаИзмерения	= ВыборкаСтрокТовары.ЕдиницаИзмерения;
		//*** Определение Цены
		ТипЦеныДляПечати= ЭтотОбъект.Контрагент.ЦенаДляПечати;
		ЦенаДляПечати= Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Номенклатура, , ТипЦеныДляПечати, ЭтотОбъект.Дата,);
		
		ОбластьСтроки.Параметры.ЦенаБезСкидки		=	Формат(ЦенаДляПечати,"ЧДЦ=2");
		ОбластьСтроки.Параметры.Цена         		=	Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
		ОбластьСтроки.Параметры.СуммаБезСкидки      =	Формат(ЦенаДляПечати*ВыборкаСтрокТовары.Количество,"ЧДЦ=2");
		ОбластьСтроки.Параметры.Сумма				=   Формат(ВыборкаСтрокТовары.Сумма,"ЧДЦ=2");
		Скидка=(ЦенаДляПечати*ВыборкаСтрокТовары.Количество-ВыборкаСтрокТовары.Сумма);
		ОбластьСтроки.Параметры.Скидка				=   Формат(Скидка,"ЧДЦ=2");
		
		
		ТабДокумент.Вывести(ОбластьСтроки);
        ВсегоКоличество=ВсегоКоличество + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",0,1);
        ВсегоКолШт     =ВсегоКолШт      + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",1,0);
        
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = ВсегоБезСкидок+ ЦенаДляПечати*ВыборкаСтрокТовары.Количество;
	КонецЦикла;

	// Вывести Итого
	ОбластьПечати= Макет.ПолучитьОбласть("Итого");
	ОбластьПечати.Параметры.ВсегоБезСкидок= Формат(ВсегоБезСкидок ,"ЧДЦ=2");
	ОбластьПечати.Параметры.ВсегоСкидок   = Формат(ВсегоСкидок,"ЧДЦ=2");
	ОбластьПечати.Параметры.Всего         = Формат(Сумма,"ЧДЦ=2");
	ТабДокумент.Вывести(ОбластьПечати);
	
	ОбластьПечати= Макет.ПолучитьОбласть("ИтогоНДС");	
	ОбластьПечати.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
	ОбластьПечати.Параметры.ВсегоНДС 	= Формат(СуммаНДС,"ЧДЦ=2");
	ТабДокумент.Вывести(ОбластьПечати);
	
	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    	= 	0;
		ВсегоКолТара	=	0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Номенклатура);			
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			ВсегоКолТара	=ВсегоКолТара+ВыборкаСтрокТара.Количество;
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|ВсегоТары");
		
		ТабДокумент.Вывести(ОбластьНомера);
		ОбластьДанных .Параметры.ВсегоТары = ЗаполнениеДокументов.ФорматСумм(ВсегоКолТара);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 +   ".    в кiлькостi "+Формат(ВсегоКоличество,"ЧДЦ=3; ЧН=' '; ЧГ=0")+?(ВсегоКоличество=0,""," кг.  ") + ?(ВсегоКолШт<>0 И ВсегоКоличество<>0,","," ") + Формат(ВсегоКолШт,"ЧДЦ=0; ЧН=' '; ЧГ=0")+ ?(ВсегоКолШт=0,"","шт.") ;
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести подписи
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Выписал=СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
	ТабДокумент.Вывести(ОбластьМакета);	
	Если СуммаИтогМенеджера>0 тогда 
	//Вывести менеджера
		ОбластьМакета = Макет.ПолучитьОбласть("МенеджерПокупателя");
		ОбластьМакета.Параметры.НомерНакладной	= "№ "+СокрЛП(Номер)+" от "+Формат(Дата,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ПокупательНакладной=Контрагент.Наименование;
		//ОбластьМакета.Параметры.Менеджер		=Реализатор.НаименованиеПолное;
		//Сообщить(Реализатор);
		//Сообщить(Реализатор.Наименование);
		//СокрЛП(Реализатор.Наименование)<>"" и
		ПустаяСсылкаКонтрагенты = Справочники.Контрагенты.ПустаяСсылка();
		если  Реализатор<>NULL 
				И Реализатор.Ссылка<>ПустаяСсылкаКонтрагенты
					И не РольДоступна("Филиал") И не РольДоступна("ФилиалРуководитель") тогда
		    ОбластьМакета.Параметры.Менеджер=Реализатор.Наименование;
		КонецЕсли;
		
		ОбластьМакета.Параметры.СуммаСоСкидкой	=СуммаИтогМенеджера;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	Возврат ТабДокумент;
		
КонецФункции // ПечатьДокумента()



//***//
ПутьФайлаСкрипта="C:\\Windows\\System32\\vbscript.dll";
ФайлСкрипта = Новый Файл(ПутьФайлаСкрипта);
//***//
мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мЕстьКолонкаСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

мИспользоватьТару = Константы.ИспользоватьВозвратнуюТару.Получить();
мИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
мДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");

мРеквизитыЗаполненныеПоОснованию = Новый Структура;
